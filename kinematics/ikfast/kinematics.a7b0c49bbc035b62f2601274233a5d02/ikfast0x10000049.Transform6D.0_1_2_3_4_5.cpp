/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2021-12-13 22:59:36.405295
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[0]);
x5=IKsin(j[4]);
x6=IKcos(j[1]);
x7=IKcos(j[3]);
x8=IKsin(j[3]);
x9=IKcos(j[4]);
x10=IKcos(j[5]);
x11=IKsin(j[5]);
x12=((1.0)*x8);
x13=((0.03861)*x5);
x14=((1.0)*x9);
x15=((1.0)*x5);
x16=((1.0)*x1);
x17=((6.0e-5)*x9);
x18=(x1*x7);
x19=(x2*x6);
x20=(x0*x6);
x21=(x1*x8);
x22=(x0*x2);
x23=(x3*x6);
x24=(x0*x3);
x25=(x2*x4);
x26=(x3*x4);
x27=(x16*x7);
x28=(x4*x6*x7);
x29=(x14*x23);
x30=(((x1*x22))+(((-1.0)*x26)));
x31=((((-1.0)*x16*x26))+x22);
x32=(((x1*x25))+x24);
x33=(((x19*x8))+(((-1.0)*x27)));
x34=((((-1.0)*x12*x19))+x27);
x35=((((-1.0)*x25))+(((-1.0)*x16*x24)));
x36=(x30*x8);
x37=(x33*x9);
x38=(x34*x5);
x39=(x35*x9);
x40=((((-1.0)*x15*x23))+x37);
x41=((((-1.0)*x12*x32))+(((-1.0)*x28)));
x42=(((x31*x5))+((x9*((((x32*x8))+x28)))));
x43=(((x9*((x36+((x20*x7))))))+((x35*x5)));
eerot[0]=(((x10*x43))+((x11*((((x5*(((((-1.0)*x12*x30))+(((-1.0)*x20*x7))))))+x39)))));
eerot[1]=(((x30*x7))+(((-1.0)*x12*x20)));
eerot[2]=((((-1.0)*x10*(((((1.0)*x39))+(((1.0)*x5*(((((-1.0)*x36))+(((-1.0)*x20*x7))))))))))+((x11*x43)));
eetrans[0]=((((((((0.02417)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.02417)*(IKcos(j[2]))*(IKsin(j[0]))))))*(IKcos(j[3]))))+(((0.00761)*(IKcos(j[2]))*(IKsin(j[0]))))+(((((((((((0.03861)*(((((1.0)*(IKcos(j[2]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.03861)*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((((((-0.03861)*(IKsin(j[0]))*(IKsin(j[2]))))+(((-0.03861)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((((((-6.0e-5)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((-6.0e-5)*(IKsin(j[0]))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((((((6.0e-5)*(((((-1.0)*(IKcos(j[2]))*(IKsin(j[0]))))+(((IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((6.0e-5)*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((0.02942)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((0.02942)*(IKsin(j[0]))*(IKsin(j[2]))))))*(IKcos(j[4]))))+(((0.00081)*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[3]))))+(((-0.02417)*(IKcos(j[0]))*(IKcos(j[1]))*(IKsin(j[3]))))+(((0.26849)*(IKcos(j[0]))*(IKcos(j[1]))))+(((((((((((0.03861)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((0.03861)*(IKsin(j[0]))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((((((-0.03861)*(((((-1.0)*(IKcos(j[2]))*(IKsin(j[0]))))+(((IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.03861)*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((-0.00761)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((((((-0.08354)*(IKsin(j[0]))*(IKsin(j[2]))))+(((-0.08354)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))*(IKsin(j[4]))))+(((((((0.02942)*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[3]))))+(((((((-0.02942)*(IKcos(j[2]))*(IKsin(j[0]))))+(((0.02942)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((0.0065)*(IKsin(j[0]))*(IKsin(j[2]))))+(((0.03065)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.0065)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((((((((((0.08354)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((-0.08354)*(IKcos(j[2]))*(IKsin(j[0]))))))*(IKsin(j[3]))))+(((0.08354)*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((0.00041)*(IKcos(j[0]))))+(((((((-0.00081)*(IKcos(j[2]))*(IKsin(j[0]))))+(((0.00081)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((((((((((-6.0e-5)*(IKcos(j[0]))*(IKcos(j[1]))*(IKcos(j[3]))))+(((6.0e-5)*(((((1.0)*(IKcos(j[2]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((((((-6.0e-5)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))+(((-6.0e-5)*(IKsin(j[0]))*(IKsin(j[2]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((0.03283)*(IKsin(j[0])))));
eerot[3]=(((x10*x42))+((x11*((((x31*x9))+((x41*x5)))))));
eerot[4]=(((x32*x7))+(((-1.0)*x12*x4*x6)));
eerot[5]=(((x11*x42))+((x10*(((((-1.0)*x15*x41))+(((-1.0)*x14*x31)))))));
eetrans[1]=((((((((((((0.03861)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.03861)*(IKcos(j[0]))*(IKsin(j[2]))))))*(IKsin(j[4]))))+(((((((-0.03861)*(((((IKcos(j[0]))*(IKcos(j[2]))))+(((IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.03861)*(IKcos(j[1]))*(IKcos(j[3]))*(IKsin(j[0]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((0.02417)*(IKcos(j[0]))*(IKcos(j[2]))))+(((0.02417)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKcos(j[3]))))+(((-0.00761)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.00081)*(IKcos(j[1]))*(IKcos(j[3]))*(IKsin(j[0]))))+(((-0.03283)*(IKcos(j[0]))))+(((-0.02417)*(IKcos(j[1]))*(IKsin(j[0]))*(IKsin(j[3]))))+(((0.00041)*(IKsin(j[0]))))+(((((((((((6.0e-5)*(IKcos(j[0]))*(IKsin(j[2]))))+(((-6.0e-5)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((((((6.0e-5)*(((((-1.0)*(IKcos(j[0]))*(IKcos(j[2]))))+(((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-6.0e-5)*(IKcos(j[1]))*(IKcos(j[3]))*(IKsin(j[0]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((((((0.08354)*(IKcos(j[0]))*(IKsin(j[2]))))+(((-0.08354)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[4]))))+(((((((((((6.0e-5)*(IKcos(j[0]))*(IKsin(j[2]))))+(((-6.0e-5)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[4]))))+(((((((6.0e-5)*(((((IKcos(j[0]))*(IKcos(j[2]))))+(((IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((6.0e-5)*(IKcos(j[1]))*(IKcos(j[3]))*(IKsin(j[0]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((((((0.03861)*(IKcos(j[0]))*(IKsin(j[2]))))+(((-0.03861)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((((((0.03861)*(((((-1.0)*(IKcos(j[0]))*(IKcos(j[2]))))+(((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((-0.03861)*(IKcos(j[1]))*(IKcos(j[3]))*(IKsin(j[0]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((((((0.08354)*(IKcos(j[0]))*(IKcos(j[2]))))+(((0.08354)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.08354)*(IKcos(j[1]))*(IKcos(j[3]))*(IKsin(j[0]))))))*(IKcos(j[4]))))+(((0.0065)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))+(((((((-0.02942)*(IKcos(j[0]))*(IKsin(j[2]))))+(((0.02942)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((-0.00761)*(IKcos(j[0]))*(IKcos(j[2]))))+(((((((0.00081)*(IKcos(j[0]))*(IKcos(j[2]))))+(((0.00081)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))*(IKsin(j[3]))))+(((0.26849)*(IKcos(j[1]))*(IKsin(j[0]))))+(((((((((((0.02942)*(IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((0.02942)*(IKcos(j[0]))*(IKcos(j[2]))))))*(IKsin(j[3]))))+(((0.02942)*(IKcos(j[1]))*(IKcos(j[3]))*(IKsin(j[0]))))))*(IKsin(j[4]))))+(((0.03065)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0065)*(IKcos(j[0]))*(IKsin(j[2])))));
eerot[6]=(((x11*(((((-1.0)*x29))+x38))))+((x10*x40)));
eerot[7]=(((x19*x7))+x21);
eerot[8]=(((x10*((x29+(((-1.0)*x15*x34))))))+((x11*x40)));
IkReal x44=(x23*x5);
IkReal x45=(x23*x9);
IkReal x46=(x19*x8);
eetrans[2]=((0.13171)+(((0.03065)*x6))+(((-0.00761)*x19))+((x11*(((((-0.03861)*x37))+((x13*x23))))))+(((0.02417)*x21))+(((-0.08354)*x44))+(((0.00081)*x46))+(((0.02942)*x45))+(((-0.26849)*x1))+((x5*(((((-0.02942)*x18))+(((0.02942)*x46))))))+(((-0.00081)*x18))+((x11*(((((6.0e-5)*x38))+(((-1.0)*x17*x23))))))+(((0.0065)*x23))+((x9*(((((-0.08354)*x18))+(((0.08354)*x46))))))+((x10*(((((-0.03861)*x45))+((x13*x34))))))+((x10*((((x17*x33))+(((-6.0e-5)*x44))))))+(((0.02417)*x19*x7)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=((-1.0)*r02);
new_r02=r01;
new_px=((((-0.09015)*r01))+(((0.03861)*r02))+(((-6.0e-5)*r00))+px);
new_r10=r10;
new_r11=((-1.0)*r12);
new_r12=r11;
new_py=((((0.03861)*r12))+(((-6.0e-5)*r10))+py+(((-0.09015)*r11)));
new_r20=r20;
new_r21=((-1.0)*r22);
new_r22=r21;
new_pz=((-0.13171)+(((-0.09015)*r21))+(((-6.0e-5)*r20))+pz+(((0.03861)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x47=((1.0)*px);
IkReal x48=((1.0)*pz);
IkReal x49=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x49))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x48)));
rxp0_2=((((-1.0)*r10*x47))+((py*r00)));
rxp1_0=((((-1.0)*r21*x49))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x48)));
rxp1_2=((((-1.0)*r11*x47))+((py*r01)));
rxp2_0=((((-1.0)*r22*x49))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x48))+((px*r22)));
rxp2_2=((((-1.0)*r12*x47))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x50=((0.00082)*py);
IkReal x51=((0.000156979343029536)*r02);
IkReal x52=((0.00478158218183173)*rxp2_2);
IkReal x53=((5.41036e-5)*r12);
IkReal x54=((0.000134349228470334)*r22);
IkReal x55=((6.9167e-5)*r10);
IkReal x56=((0.00203621140452158)*pz);
IkReal x57=((0.000171754431971396)*r20);
IkReal x58=((0.000466493)*r01);
IkReal x59=((0.000122791903415397)*r00);
IkReal x60=((0.00186104733882081)*rxp1_0);
IkReal x61=((2.94544e-5)*r11);
IkReal x62=((0.00374023464561064)*rxp0_2);
IkReal x63=((0.00169919609357518)*r21);
IkReal x64=((0.000156979343029536)*r12);
IkReal x65=((0.07184)*npy);
IkReal x66=((2.94544e-5)*r01);
IkReal x67=((0.00082)*px);
IkReal x68=((0.13196)*npz);
IkReal x69=((5.41036e-5)*r02);
IkReal x70=((0.000122791903415397)*r10);
IkReal x71=((0.1687)*npx);
IkReal x72=((7.63029408916533e-7)*r21);
IkReal x73=((0.00186104733882081)*rxp1_1);
IkReal x74=((1.0)*pp);
IkReal x75=((6.9167e-5)*r00);
IkReal x76=((0.000466493)*r11);
IkReal x77=((0.028930591327201)*px);
IkReal x78=((0.06566)*rxp1_1);
IkReal x79=((0.00244029537844941)*r00);
IkReal x80=((0.016458437)*r11);
IkReal x81=((0.0043322468)*r10);
IkReal x82=((0.00190884041576873)*r02);
IkReal x83=((2.5346020499343)*npy);
IkReal x84=((0.00103918684047306)*r01);
IkReal x85=((5.95193994743758)*npx);
IkReal x86=((2.69206e-5)*r21);
IkReal x87=((35.281208935611)*pp);
IkReal x88=((0.005538421)*r12);
IkReal x89=((4.65570833114323)*npz);
IkReal x90=((0.028930591327201)*py);
IkReal x91=((0.00244029537844941)*r10);
IkReal x92=((0.00190884041576873)*r12);
IkReal x93=((0.13196)*rxp0_2);
IkReal x94=((0.0599496924)*r21);
IkReal x95=((0.005538421)*r02);
IkReal x96=((0.00103918684047306)*r11);
IkReal x97=((0.06566)*rxp1_0);
IkReal x98=((0.016458437)*r01);
IkReal x99=((0.0043322468)*r00);
IkReal x100=((0.006059704)*r20);
IkReal x101=((0.0047400032)*r22);
IkReal x102=((0.1687)*rxp2_2);
IkReal x103=((0.07184)*pz);
IkReal x104=((0.13196)*rxp0_0);
IkReal x105=((0.00499731668296771)*r22);
IkReal x106=((0.00749554545793139)*rxp1_0);
IkReal x107=((0.0618282012)*r01);
IkReal x108=((0.0150641513650415)*rxp0_2);
IkReal x109=((0.06566)*rxp1_2);
IkReal x110=((0.00502400413770345)*r20);
IkReal x111=((0.00537225245937651)*r02);
IkReal x112=((0.00820103542031361)*pz);
IkReal x113=((0.00556514791068569)*r00);
IkReal x114=((0.0192582777757086)*rxp2_2);
IkReal x115=((0.1687)*rxp2_0);
IkReal x116=((0.00961476285176357)*r21);
IkReal x117=((0.07184)*px);
IkReal x118=((0.00082)*rxp1_2);
IkReal x119=((0.13196)*rxp0_1);
IkReal x120=((0.00749554545793139)*rxp1_1);
IkReal x121=((0.0618282012)*r11);
IkReal x122=((5.41036e-5)*r20);
IkReal x123=((3.07317363775187e-6)*r21);
IkReal x124=((6.9167e-5)*r22);
IkReal x125=((0.00537225245937651)*r12);
IkReal x126=((0.00556514791068569)*r10);
IkReal x127=((0.1687)*rxp2_1);
IkReal x128=((0.07184)*py);
IkReal x129=(pp*r11);
IkReal x130=((0.00164)*rxp0_2);
IkReal x131=((0.26392)*rxp1_1);
IkReal x132=((0.0001082072)*r21);
IkReal x133=((0.13132)*rxp0_2);
IkReal x134=((0.26392)*rxp1_0);
IkReal x135=((0.5314814717477)*npz);
IkReal x136=((4.02759526938239)*pp);
IkReal x137=((0.0599493562)*r11);
IkReal x138=((0.000118630402102497)*r01);
IkReal x139=((0.67945532194481)*npx);
IkReal x140=((0.000278576681997372)*r00);
IkReal x141=((0.000217907403416557)*r02);
IkReal x142=((0.289342444152431)*npy);
IkReal x143=((0.006059704)*r10);
IkReal x144=((0.00330262812089356)*px);
IkReal x145=((0.0047400032)*r12);
IkReal x146=(pp*r01);
IkReal x147=((0.005538421)*r22);
IkReal x148=((0.000118630402102497)*r11);
IkReal x149=((0.0047400032)*r02);
IkReal x150=((0.006059704)*r00);
IkReal x151=((0.0043322468)*r20);
IkReal x152=((0.016458437)*r21);
IkReal x153=((0.000278576681997372)*r10);
IkReal x154=((0.0599493562)*r01);
IkReal x155=((0.000217907403416557)*r12);
IkReal x156=((0.00330262812089356)*py);
IkReal x157=((0.00372209467764163)*rxp0_0);
IkReal x158=((0.000932986)*r00);
IkReal x159=((0.00748046929122127)*rxp1_2);
IkReal x160=((0.000245583806830794)*r01);
IkReal x161=((0.00372209467764163)*rxp0_1);
IkReal x162=((0.000932986)*r10);
IkReal x163=((1.52605881783307e-6)*r20);
IkReal x164=((0.000245583806830794)*r11);
IkReal x165=((0.00333548661030206)*rxp2_2);
IkReal x166=((0.000278049633103654)*r21);
IkReal x167=((0.000109504025416217)*r02);
IkReal x168=((0.00947133077582033)*pz);
IkReal x169=((1.066e-5)*r10);
IkReal x170=((0.00407748825904875)*r20);
IkReal x171=((1.3284e-6)*r11);
IkReal x172=((0.000624918404588625)*r22);
IkReal x173=((0.00324)*npy);
IkReal x174=((1.066e-5)*r00);
IkReal x175=((1.3284e-6)*r01);
IkReal x176=((0.026)*npx);
IkReal x177=((0.000109504025416217)*r12);
IkReal x178=((0.0086644936)*r11);
IkReal x179=((5.38412e-5)*r20);
IkReal x180=((0.032916874)*r10);
IkReal x181=((0.13132)*rxp0_1);
IkReal x182=((0.032916874)*r00);
IkReal x183=((0.26392)*rxp1_2);
IkReal x184=((0.13132)*rxp0_0);
IkReal x185=((0.0086644936)*r01);
IkReal x186=((0.917311432325887)*npx);
IkReal x187=((0.11431111695138)*npy);
IkReal x188=((0.000376097687253614)*r00);
IkReal x189=((4.68675579500657e-5)*r01);
IkReal x190=((0.0038634344)*r12);
IkReal x191=((0.1438587152)*r20);
IkReal x192=((0.33416)*pz);
IkReal x193=((0.0038634344)*r02);
IkReal x194=((0.0220478768)*r22);
IkReal x195=((4.68675579500657e-5)*r11);
IkReal x196=((0.000376097687253614)*r10);
IkReal x197=((0.0098099272)*r21);
IkReal x198=((0.11768)*rxp2_2);
IkReal x199=((0.0301283027300831)*rxp1_2);
IkReal x200=((0.0149910909158628)*rxp0_0);
IkReal x201=((6.14634727550374e-6)*r20);
IkReal x202=((0.0149910909158628)*rxp0_1);
IkReal x203=((0.0216068389052553)*r02);
IkReal x204=((0.33416)*px);
IkReal x205=((0.0381466870274498)*pz);
IkReal x206=((0.1476157328)*r00);
IkReal x207=((0.00754462221305821)*r21);
IkReal x208=((0.00638035281007114)*r22);
IkReal x209=((0.0107990393786286)*r01);
IkReal x210=((0.016494401576893)*r20);
IkReal x211=((0.11768)*rxp2_0);
IkReal x212=((0.0134339900927409)*rxp2_2);
IkReal x213=((0.0216068389052553)*r12);
IkReal x214=((0.33416)*py);
IkReal x215=((0.1476157328)*r10);
IkReal x216=((0.0107990393786286)*r11);
IkReal x217=((4.82488e-5)*r22);
IkReal x218=((0.11768)*rxp2_1);
IkReal x219=((0.032916874)*r20);
IkReal x220=((0.0086644936)*r21);
IkReal x221=((0.52784)*rxp0_1);
IkReal x222=((0.0002164144)*r20);
IkReal x223=((0.00328)*rxp1_2);
IkReal x224=((0.26264)*rxp1_2);
IkReal x225=((0.52784)*rxp0_0);
IkReal x226=((5.35025755584757e-6)*r01);
IkReal x227=((4.29341655716163e-5)*r00);
IkReal x228=((0.0220478768)*r12);
IkReal x229=((0.1438580428)*r10);
IkReal x230=((0.0130494086727989)*npy);
IkReal x231=((0.0098099272)*r11);
IkReal x232=((0.104717477003942)*npx);
IkReal x233=((0.0038634344)*r22);
IkReal x234=((5.35025755584757e-6)*r11);
IkReal x235=((4.29341655716163e-5)*r10);
IkReal x236=((0.0098099272)*r01);
IkReal x237=((0.0220478768)*r02);
IkReal x238=((0.1438580428)*r00);
IkReal x239=((0.00168518720853663)*r21);
IkReal x240=((6.78386e-5)*r10);
IkReal x241=((0.000107489037774219)*r20);
IkReal x242=((8.57261780773958e-5)*r22);
IkReal x243=((1.87944e-5)*r11);
IkReal x244=((0.0046897485939886)*rxp2_2);
IkReal x245=((0.000153964446340646)*r02);
IkReal x246=((0.00129927520578048)*pz);
IkReal x247=((1.87944e-5)*r01);
IkReal x248=((0.04584)*npy);
IkReal x249=((0.000153964446340646)*r12);
IkReal x250=((6.78386e-5)*r00);
IkReal x251=((0.16546)*npx);
IkReal x252=((0.0054320518)*r12);
IkReal x253=((0.00239342782049934)*r00);
IkReal x254=((1.61729061760841)*npy);
IkReal x255=((0.000663089153219448)*r01);
IkReal x256=((5.8376288304862)*npx);
IkReal x257=(pp*r21);
IkReal x258=((0.00239342782049934)*r10);
IkReal x259=((0.16546)*rxp2_2);
IkReal x260=((0.04584)*pz);
IkReal x261=((0.0037923432)*r20);
IkReal x262=((0.0030245232)*r22);
IkReal x263=((0.000663089153219448)*r11);
IkReal x264=((0.0054320518)*r02);
IkReal x265=((0.059455442)*r21);
IkReal x266=((0.0188884092517412)*rxp2_2);
IkReal x267=((0.00364462967573466)*r02);
IkReal x268=((0.00329778711068569)*r00);
IkReal x269=((0.16546)*rxp2_0);
IkReal x270=((0.00967118497087415)*r21);
IkReal x271=((0.00523295467242728)*pz);
IkReal x272=((0.04584)*px);
IkReal x273=((0.00476516914004991)*r20);
IkReal x274=((0.0613339508)*r01);
IkReal x275=((0.00508678145071325)*r22);
IkReal x276=((0.00364462967573466)*r12);
IkReal x277=((0.00329778711068569)*r10);
IkReal x278=((0.16546)*rxp2_1);
IkReal x279=((6.78386e-5)*r22);
IkReal x280=((0.04584)*py);
IkReal x281=((0.0613339508)*r11);
IkReal x282=((7.56962365308804e-5)*r01);
IkReal x283=((0.0030245232)*r12);
IkReal x284=((0.0037923432)*r10);
IkReal x285=((0.66640591327201)*npx);
IkReal x286=((0.000273226424441524)*r00);
IkReal x287=((0.0594551058)*r11);
IkReal x288=((0.184624967148489)*npy);
IkReal x289=((7.56962365308804e-5)*r11);
IkReal x290=((0.0594551058)*r01);
IkReal x291=((0.000273226424441524)*r10);
IkReal x292=((0.0030245232)*r02);
IkReal x293=((0.0054320518)*r22);
IkReal x294=((0.0037923432)*r00);
IkReal x295=((2.0)*pp);
IkReal x296=(npy*pz);
IkReal x297=((4.0)*npx);
IkReal x298=(pp*r20);
IkReal x299=(npy*px);
IkReal x300=(npx*pz);
IkReal x301=(npy*py);
IkReal x302=((0.0283436999515811)*x257);
IkReal x303=((0.0566873999031621)*x296);
IkReal x304=((2.0)*x296);
IkReal x305=((2.0)*x299);
IkReal x306=((0.228313903683564)*x296);
IkReal x307=((0.114156951841782)*x257);
IkReal x308=((2.0)*x301);
IkReal x309=(r01*x74);
IkReal x310=(r10*x295);
IkReal x311=(py*x297);
IkReal x312=(px*x297);
IkReal x313=(r00*x295);
IkReal x314=(r11*x74);
IkReal x315=((0.113374799806324)*x300);
IkReal x316=((0.0566873999031621)*x298);
IkReal x317=(r20*x295);
IkReal x318=(pz*x297);
IkReal x319=((0.228313903683564)*x298);
IkReal x320=((0.456627807367127)*x300);
IkReal x321=((8.0)*x301);
IkReal x322=((4.0)*x129);
IkReal x323=((4.0)*x146);
IkReal x324=((8.0)*x299);
IkReal x325=(r21*x74);
IkReal x326=((0.000108425281208936)+x146);
IkReal x327=((0.0614033262)+x64);
IkReal x328=((2.20292043405283)+x252);
IkReal x329=((-0.251012188901445)+x283);
IkReal x330=((0.0020767192)+x177);
IkReal x331=((-0.246841253127464)+x124);
IkReal x332=(x278+x280);
IkReal x333=(x117+x115);
IkReal x334=(x179+x178);
IkReal x335=(x172+x168);
IkReal x336=(x291+x294);
IkReal x337=(x79+x83);
IkReal x338=(x65+x66);
IkReal x339=(x255+x256);
IkReal x340=(x237+x204);
IkReal x341=(x147+x149);
IkReal x342=(x150+x148);
IkReal x343=(x265+x263);
IkReal x344=(x188+x189);
IkReal x345=(x167+x165);
IkReal x346=(x91+x94);
IkReal x347=(x156+x155);
IkReal x348=(x247+x248);
IkReal x349=(x213+x214);
IkReal x350=(x127+x128);
IkReal x351=(x124+x125);
IkReal x352=(x239+x240);
IkReal x353=(x61+x63);
IkReal x354=(x217+x218);
IkReal x355=(x100+x96);
IkReal x356=(x135+x136);
IkReal x357=(x211+x233);
IkReal x358=(x258+x261);
IkReal x359=(x84+x85);
IkReal x360=(x180+x181);
IkReal x361=(x210+x209);
IkReal x362=(x250+x251);
IkReal x363=(x211+x212);
IkReal x364=(x207+x206);
IkReal x365=(x223+x222);
IkReal x366=(x254+x253);
IkReal x367=(x75+x71);
IkReal x368=(x186+x187);
IkReal x369=((-0.000466493)+x276+x279);
IkReal x370=(x132+x311);
IkReal x371=(x304+x93);
IkReal x372=((2.69206e-5)+x50+x53);
IkReal x373=(x134+x313);
IkReal x374=(x119+x308);
IkReal x375=(x185+x318);
IkReal x376=(x321+x221);
IkReal x377=(x324+x225);
IkReal x378=(x162+x163+x161);
IkReal x379=(x112+x111+x114);
IkReal x380=(x101+x102+x103);
IkReal x381=(x113+x110+x116);
IkReal x382=(x288+x287+x286);
IkReal x383=(x229+x227+x226);
IkReal x384=(x77+x82+x86);
IkReal x385=(x197+x196+x195);
IkReal x386=(x89+x86+x87);
IkReal x387=(x141+x144+x145);
IkReal x388=(x137+x139+x138);
IkReal x389=(x268+x273+x270);
IkReal x390=(x232+x230+x231);
IkReal x391=(x193+x192+x194);
IkReal x392=(x141+x144+x279);
IkReal x393=(x131+x132+x310);
IkReal x394=(x133+x312+x219);
IkReal x395=(x302+x55+x57);
IkReal x396=(x302+x243+x241);
IkReal x397=(x160+x159+x316);
IkReal x398=(x157+x158+x315);
IkReal x399=(x133+x199+x319);
IkReal x400=((-0.00836418442575559)+x214+x217+x228);
IkReal x401=(x131+x130+x310);
IkReal x402=(x146+x109+x307);
IkReal x403=((-0.000949791313272011)+x90+x92+x95);
IkReal x404=(x320+x312+x200);
IkReal x405=(x54+x56+x51+x52);
IkReal x406=(x220+x236+x234+x235);
IkReal x407=(x292+x293+x269+x272);
IkReal x408=(x76+x73+x72+x70);
IkReal x409=(x242+x246+x245+x244);
IkReal x410=(x109+x309+x307);
IkReal x411=(x205+x204+x203+x208);
IkReal x412=(x257+x99+x98+x97);
IkReal x413=(x74+x67+x68+x69);
IkReal x414=(x393+x216);
IkReal x415=(x130+x311+x202+x201);
IkReal x416=(x325+x99+x98+x97);
IkReal x417=(x184+x182+x183+x317);
IkReal x418=(x77+x78+x82+x80+x81);
IkReal x419=(x173+x175+x174+x176+x164);
IkReal x420=(x78+x89+x80+x81+x87);
IkReal x421=(x140+x142+x143+x122+x118);
IkReal x422=(x267+x266+x269+x272+x271);
IkReal x423=(x122+x118+x285+x284+x282);
IkReal x424=(x249+x413);
IkReal x425=((-0.000949791313272011)+x259+x260+x262+x90+x92);
IkReal x426=(x303+x59+x58+x60+x62);
IkReal x427=(x108+x104+x106+x306+x305);
IkReal x428=(x122+x123+x120+x118+x374);
IkReal x429=(x171+x170+x169+x398);
IkReal x430=(x154+x153+x152+x151+x109+x104+x305);
IkReal x431=(x152+x151+x109+x104+x305+x290+x289);
op[0]=((((-1.0)*x395))+x353+x372+x405+x426);
op[1]=(x327+x367+x408+(((-1.0)*x338))+(((-1.0)*x413)));
op[2]=((((-1.0)*x397))+(((5.89088e-5)*r10))+x398+(((0.00339839218715036)*r20))+(((0.000138334)*r11))+(((0.000343508863942791)*r21)));
op[3]=((((-5.89088e-5)*r00))+(((-0.3374)*npy))+(((-1.0)*x164))+x378+(((-0.14368)*npx))+(((-0.000138334)*r01)));
op[4]=((((-1.0)*x426))+(((-1.0)*x353))+x372+x395+x405);
op[5]=((((-1.0)*x367))+x338+x327+(((-1.0)*x413))+(((-1.0)*x408)));
op[6]=((2.16638358100368)+(((-1.0)*x420))+x359+x384+(((-1.0)*x337))+(((-1.0)*x88)));
op[7]=((((-1.0)*x371))+x355+x403+x412+(((-1.0)*x380))+(((-1.0)*x346)));
op[8]=((((0.00207837368094612)*r00))+(((-11.9038798948752)*npy))+(((-1.0)*x360))+(((0.00488059075689882)*r01))+x334+(((-5.06920409986859)*npx)));
op[9]=((((0.00207837368094612)*r10))+(((-1.0)*x375))+(((0.00488059075689882)*r11))+x417+(((-0.012119408)*r21))+(((-0.1198993848)*r20)));
op[10]=((2.16638358100368)+(((-1.0)*x359))+x337+x418+(((-1.0)*x386))+(((-1.0)*x88)));
op[11]=((((-1.0)*x355))+x346+x371+x403+(((-1.0)*x380))+(((-1.0)*x416)));
op[12]=((((-1.0)*x427))+(((-1.0)*x379))+(((-1.0)*x107))+x105+x381+x402+(((-1.0)*x333)));
op[13]=((-0.000466493)+(((-1.0)*x428))+(((-1.0)*x350))+(((-1.0)*x351))+(((-1.0)*x121))+x126+x129);
op[14]=((((-0.1236564024)*r00))+(((-0.0111302958213714)*r01))+(((0.0192295257035271)*r20))+x373+x399+(((-1.0)*x404))+(((-0.0100480082754069)*r21)));
op[15]=((((-0.1236564024)*r10))+(((-0.0111302958213714)*r11))+x393+(((-1.0)*x415)));
op[16]=((((-1.0)*x379))+x105+x107+x427+(((-1.0)*x381))+(((-1.0)*x333))+(((-1.0)*x410)));
op[17]=((-0.000466493)+(((-1.0)*x350))+(((-1.0)*x351))+(((-1.0)*x126))+x121+(((-1.0)*x314))+x428);
op[18]=((((-1.0)*x350))+(((-1.0)*x374))+x129+x331+x356+x421+(((-1.0)*x387))+(((-1.0)*x388)));
op[19]=((0.000108425281208936)+x333+x341+x430+(((-1.0)*x342))+(((-1.0)*x347))+(((-1.0)*x309)));
op[20]=((((-0.000557153363994744)*r01))+(((-0.000237260804204993)*r00))+(((-1.0)*x370))+(((-0.1198987124)*r10))+(((0.578684888304862)*npx))+x401+(((1.35891064388962)*npy))+(((-0.012119408)*r11)));
op[21]=((((0.012119408)*r01))+(((-0.000237260804204993)*r10))+(((-0.000557153363994744)*r11))+(((-1.0)*x373))+x394+(((0.1198987124)*r00))+(((-1.0)*x220)));
op[22]=((((-1.0)*x421))+(((-1.0)*x350))+x331+x356+x388+x374+(((-1.0)*x314))+(((-1.0)*x387)));
op[23]=((((-1.0)*x430))+x333+x326+x342+x341+(((-1.0)*x347)));
op[24]=((((-1.0)*x397))+(((-1.0)*x166))+x345+x429+(((-1.0)*x335)));
op[25]=(x330+x378+(((-1.0)*x419)));
op[26]=((((-0.226749599612649)*x296))+(((-0.00815497651809751)*r21))+(((-2.132e-5)*r11))+(((0.113374799806324)*x257))+(((-0.00744418935528325)*rxp1_0))+(((-0.001865972)*r01))+(((2.6568e-6)*r10))+(((-0.000556099266207308)*r20))+(((-0.0149609385824425)*rxp0_2))+(((-0.000491167613661589)*r00)));
op[27]=((((-0.000491167613661589)*r10))+(((0.052)*npy))+(((-0.001865972)*r11))+(((-0.00744418935528325)*rxp1_1))+(((-2.6568e-6)*r00))+(((2.132e-5)*r01))+(((-3.05211763566613e-6)*r21))+(((-0.00648)*npx)));
op[28]=((((-1.0)*x429))+x166+x345+x397+(((-1.0)*x335)));
op[29]=((((-1.0)*x378))+x330+x419);
op[30]=((0.073269163995795)+(((-1.0)*x368))+(((-1.0)*x360))+(((-1.0)*x190))+x334+x344);
op[31]=((((-1.0)*x375))+(((-1.0)*x198))+(((-1.0)*x191))+x385+x391+x417);
op[32]=((((-0.22862223390276)*npx))+(((-0.000752195374507227)*r01))+(((0.065833748)*r11))+(((1.83462286465177)*npy))+(((0.0173289872)*r10))+(((-0.0001076824)*r21))+(((9.37351159001314e-5)*r00))+(((0.26264)*rxp1_1)));
op[33]=((((-4.0)*x257))+(((0.0196198544)*r20))+(((-0.000752195374507227)*r11))+(((9.37351159001314e-5)*r10))+(((-0.065833748)*r01))+(((-0.26264)*rxp1_0))+(((-0.0173289872)*r00))+(((0.52784)*rxp0_2))+(((8.0)*x296))+(((0.2877174304)*r21)));
op[34]=((0.073269163995795)+(((-1.0)*x190))+x368+x360+(((-1.0)*x334))+(((-1.0)*x344)));
op[35]=((((-1.0)*x198))+x191+x375+x391+(((-1.0)*x385))+(((-1.0)*x417)));
op[36]=((((-1.0)*x364))+(((-1.0)*x363))+x373+x361+x399+x411+(((-1.0)*x404)));
op[37]=((((-1.0)*x354))+x349+x414+(((-1.0)*x215))+(((-1.0)*x415)));
op[38]=((((-0.0150892444261164)*r20))+(((0.0602566054601661)*rxp0_2))+(((-1.0)*x323))+x377+(((-0.456627807367127)*x257))+(((-0.032988803153786)*r21))+(((0.2952314656)*r01))+(((0.0299821818317256)*rxp1_0))+(((-1.0)*x224))+(((0.0215980787572573)*r00))+(((0.913255614734255)*x296)));
op[39]=((((1.22926945510075e-5)*r21))+(((-1.0)*x322))+x376+x365+(((0.2952314656)*r11))+(((0.0299821818317256)*rxp1_1))+(((0.0215980787572573)*r10)));
op[40]=((((-1.0)*x399))+(((-1.0)*x363))+(((-1.0)*x361))+(((-1.0)*x373))+x364+x404+x411);
op[41]=((((-1.0)*x354))+x349+x215+x415+(((-1.0)*x414)));
op[42]=((((-1.0)*x370))+x390+x401+x400+(((-1.0)*x383))+(((-1.0)*x218)));
op[43]=((((-1.0)*x373))+x357+x394+x238+(((-1.0)*x340))+(((-1.0)*x406)));
op[44]=((((0.2877160856)*r11))+(((-1.0)*x365))+(((0.0260988173455979)*npx))+(((-1.0)*x322))+x376+(((8.58683311432326e-5)*r01))+(((0.0196198544)*r10))+(((-0.209434954007884)*npy))+(((-1.07005151116951e-5)*r00)));
op[45]=((((-0.065833748)*r21))+(((-0.0196198544)*r00))+(((-0.0173289872)*r20))+(((-1.0)*x377))+x323+(((8.58683311432326e-5)*r11))+(((-1.07005151116951e-5)*r10))+(((-0.2877160856)*r01))+(((-1.0)*x224)));
op[46]=((((-1.0)*x390))+x383+x370+x400+(((-1.0)*x218))+(((-1.0)*x401)));
op[47]=((((-1.0)*x394))+x357+x373+(((-1.0)*x238))+x406+(((-1.0)*x340)));
op[48]=((((-1.0)*x426))+(((-1.0)*x352))+x372+x396+(((-1.0)*x409)));
op[49]=((0.0624389158)+(((-1.0)*x424))+x362+(((-1.0)*x348))+(((-1.0)*x408)));
op[50]=((((3.75888e-5)*r10))+(((-1.0)*x398))+x397+(((-0.00337037441707326)*r20))+(((-0.000214978075548438)*r21))+(((0.0001356772)*r11)));
op[51]=((((-3.75888e-5)*r00))+(((-0.0001356772)*r01))+(((-0.33092)*npy))+(((-1.0)*x378))+x164+(((-0.09168)*npx)));
op[52]=((((-1.0)*x396))+x352+x372+x426+(((-1.0)*x409)));
op[53]=((0.0624389158)+(((-1.0)*x362))+(((-1.0)*x424))+x348+x408);
op[54]=((((-1.0)*x366))+x339+x328+x418+(((-1.0)*x386)));
op[55]=((((-1.0)*x358))+x343+x371+x425+(((-1.0)*x264))+(((-1.0)*x416)));
op[56]=((((0.0013261783064389)*r00))+(((-3.23458123521682)*npx))+x360+(((0.00478685564099869)*r01))+(((-1.0)*x334))+(((-11.6752576609724)*npy)));
op[57]=((((0.0013261783064389)*r10))+(((0.0075846864)*r21))+(((0.00478685564099869)*r11))+x375+(((0.118910884)*r20))+(((-1.0)*x417)));
op[58]=((((-1.0)*x420))+x328+x384+x366+(((-1.0)*x339)));
op[59]=((((-1.0)*x371))+x358+x412+x425+(((-1.0)*x264))+(((-1.0)*x343)));
op[60]=(x274+x427+x422+(((-1.0)*x389))+(((-1.0)*x275))+(((-1.0)*x410)));
op[61]=(x332+x369+x281+(((-1.0)*x314))+x428+(((-1.0)*x277)));
op[62]=((((0.00953033828009982)*r21))+(((0.1226679016)*r00))+(((-0.0193423699417483)*r20))+(((-1.0)*x399))+(((-1.0)*x373))+x404+(((0.00659557422137137)*r01)));
op[63]=((((0.1226679016)*r10))+(((-1.0)*x393))+x415+(((0.00659557422137137)*r11)));
op[64]=((((-1.0)*x427))+x389+x402+x422+(((-1.0)*x274))+(((-1.0)*x275)));
op[65]=((((-1.0)*x428))+x129+x332+x369+x277+(((-1.0)*x281)));
op[66]=((((-1.0)*x392))+(((-1.0)*x423))+x332+x329+x356+x382+x374+(((-1.0)*x314)));
op[67]=((((-1.0)*x431))+x336+x326+(((-1.0)*x347))+(((-1.0)*x407)));
op[68]=((((0.1189102116)*r10))+(((0.0075846864)*r11))+(((-0.000546452848883049)*r01))+x370+(((1.33281182654402)*npy))+(((-1.0)*x401))+(((-0.000151392473061761)*r00))+(((0.369249934296978)*npx)));
op[69]=((((-0.000151392473061761)*r10))+(((-1.0)*x394))+(((-0.000546452848883049)*r11))+x373+x220+(((-0.1189102116)*r00))+(((-0.0075846864)*r01)));
op[70]=((((-1.0)*x392))+(((-1.0)*x374))+x129+x332+x329+x356+x423+(((-1.0)*x382)));
op[71]=((0.000108425281208936)+x431+(((-1.0)*x336))+(((-1.0)*x347))+(((-1.0)*x309))+(((-1.0)*x407)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j4array[16], cj4array[16], sj4array[16], j5array[16], cj5array[16], sj5array[16], j0array[16], cj0array[16], sj0array[16];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ij4 += 3)
{
IkReal htj4 = zeror[ij4+0], htj5 = zeror[ij4+1], htj0 = zeror[ij4+2];
if(isnan(htj4)||isnan(htj5)||isnan(htj0)){
continue;
}
j4array[numsolutions]=((2.0)*(atan(htj4)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
j0array[numsolutions]=((2.0)*(atan(htj0)));
if(isinf(htj4)){
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
}
else{
IkReal x432=htj4*htj4;
CheckValue<IkReal> x433=IKPowWithIntegerCheck(((1.0)+x432),-1);
if(!x433.valid){
continue;
}
cj4array[numsolutions]=((x433.value)*(((1.0)+(((-1.0)*x432)))));
CheckValue<IkReal> x434=IKPowWithIntegerCheck(((1.0)+(htj4*htj4)),-1);
if(!x434.valid){
continue;
}
sj4array[numsolutions]=((2.0)*htj4*(x434.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x435=htj5*htj5;
CheckValue<IkReal> x436=IKPowWithIntegerCheck(((1.0)+x435),-1);
if(!x436.valid){
continue;
}
cj5array[numsolutions]=((x436.value)*(((1.0)+(((-1.0)*x435)))));
CheckValue<IkReal> x437=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x437.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x437.value));
}
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x438=htj0*htj0;
CheckValue<IkReal> x439=IKPowWithIntegerCheck(((1.0)+x438),-1);
if(!x439.valid){
continue;
}
cj0array[numsolutions]=((x439.value)*(((1.0)+(((-1.0)*x438)))));
CheckValue<IkReal> x440=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x440.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x440.value));
}
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j4valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj4 = 16;
_nj5 = 1;
_nj0 = 1;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij0[0] = 0; _ij0[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( !j4valid[iij4] ) { continue; }
if( IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij4]-cj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij4]-sj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj0array[ij4]-cj0array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij4]-sj0array[iij4]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j4valid[iij4]=false; _ij4[1] = iij4; _ij5[1] = 0; _ij0[1] = 0;  break; 
}
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

    j5 = j5array[ij4]; cj5 = cj5array[ij4]; sj5 = sj5array[ij4];

    j0 = j0array[ij4]; cj0 = cj0array[ij4]; sj0 = sj0array[ij4];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3eval[1];
IkReal x441=(r00*sj0);
IkReal x442=(r02*sj0);
IkReal x443=(cj0*r10);
IkReal x444=((4.0)*cj5);
IkReal x445=(r01*sj0);
IkReal x446=(cj0*r11);
IkReal x447=(cj0*r12);
IkReal x448=((4.0)*sj4*sj5);
IkReal x449=((4.0)*cj4*sj5);
IkReal x450=(((x446*x449))+((cj4*x441*x444))+((sj4*x444*x446))+((x443*x448)));
IkReal x451=(((x441*x448))+((x445*x449))+((sj4*x444*x445))+((cj4*x443*x444)));
j3eval[0]=((((0.5)*(IKabs(((((-1.0)*x451))+x450)))))+(((0.5)*(IKabs(((((16.0)*x447))+(((-16.0)*x442)))))))+(IKabs(((((-1.0)*x450))+x451)))+(IKabs(((((8.0)*x447))+(((-8.0)*x442))))));
if( IKabs(j3eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x452=(r00*sj0);
IkReal x453=(r02*sj0);
IkReal x454=(cj0*r10);
IkReal x455=((4.0)*cj5);
IkReal x456=(r01*sj0);
IkReal x457=(cj0*r11);
IkReal x458=(cj0*r12);
IkReal x459=((4.0)*sj4*sj5);
IkReal x460=((4.0)*cj4*sj5);
IkReal x461=((((-8.0)*x453))+(((8.0)*x458)));
IkReal x462=(((x454*x459))+((sj4*x455*x457))+((x457*x460))+((cj4*x452*x455)));
IkReal x463=(((x456*x460))+((x452*x459))+((cj4*x454*x455))+((sj4*x455*x456)));
IkReal x464=((((-1.0)*x462))+x463);
IkReal x465=((((-1.0)*x463))+x462);
op[0]=x464;
op[1]=x461;
op[2]=x464;
op[3]=((((-16.0)*x453))+(((16.0)*x458)));
op[4]=x465;
op[5]=x461;
op[6]=x465;
polyroots6(op,zeror,numroots);
IkReal j3array[6], cj3array[6], sj3array[6], tempj3array[1];
int numsolutions = 0;
for(int ij3 = 0; ij3 < numroots; ++ij3)
{
IkReal htj3 = zeror[ij3];
tempj3array[0]=((2.0)*(atan(htj3)));
for(int kj3 = 0; kj3 < 1; ++kj3)
{
j3array[numsolutions] = tempj3array[kj3];
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
numsolutions++;
}
}
bool j3valid[6]={true,true,true,true,true,true};
_nj3 = 6;
for(int ij3 = 0; ij3 < numsolutions; ++ij3)
    {
if( !j3valid[ij3] )
{
    continue;
}
    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
htj3 = IKtan(j3/2);

_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < numsolutions; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x466=(cj5*sj3);
IkReal x467=(cj4*r10);
IkReal x468=((1.0)*sj4);
IkReal x469=(sj3*sj5);
IkReal x470=(cj4*r11);
if( IKabs((((cj5*x470))+(((-1.0)*r11*sj5*x468))+((cj5*r10*sj4))+((sj5*x467)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x466*x467))+(((-1.0)*r11*x466*x468))+(((-1.0)*r10*x468*x469))+(((-1.0)*x469*x470))+((cj3*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*x470))+(((-1.0)*r11*sj5*x468))+((cj5*r10*sj4))+((sj5*x467))))+IKsqr((((x466*x467))+(((-1.0)*r11*x466*x468))+(((-1.0)*r10*x468*x469))+(((-1.0)*x469*x470))+((cj3*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj5*x470))+(((-1.0)*r11*sj5*x468))+((cj5*r10*sj4))+((sj5*x467))), (((x466*x467))+(((-1.0)*r11*x466*x468))+(((-1.0)*r10*x468*x469))+(((-1.0)*x469*x470))+((cj3*r12))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x471=IKsin(j2);
IkReal x472=IKcos(j2);
IkReal x473=(cj4*r10);
IkReal x474=(cj5*sj3);
IkReal x475=(cj5*r11);
IkReal x476=(cj5*r10);
IkReal x477=(r11*sj4);
IkReal x478=(r10*sj4*sj5);
IkReal x479=(cj4*r11*sj5);
evalcond[0]=(((cj4*x475))+((sj5*x473))+(((-1.0)*sj5*x477))+((sj4*x476))+(((-1.0)*x471)));
evalcond[1]=(x472+(((-1.0)*cj3*r12))+((x474*x477))+(((-1.0)*x473*x474))+((sj3*x479))+((sj3*x478)));
evalcond[2]=((-0.03283)+(((0.00081)*cj5*x473))+(((-0.08354)*r11*sj5))+(((-0.02942)*r10*sj5))+(((-0.00081)*x479))+(((-0.00081)*x478))+(((-0.00081)*sj4*x475))+(((-0.0065)*x471))+(((-0.06598)*r12))+(((0.08354)*x476))+(((-1.0)*py))+(((-0.02942)*x475))+(((-0.00761)*x472)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x480=((1.0)*r20);
IkReal x481=(cj4*sj5);
IkReal x482=(cj5*sj4);
IkReal x483=((1.0)*r00);
IkReal x484=(sj4*sj5);
IkReal x485=((1.0)*cj4*cj5);
j1eval[0]=cj2;
j1eval[1]=((IKabs((((r21*x484))+(((-1.0)*x480*x481))+(((-1.0)*x480*x482))+(((-1.0)*r21*x485)))))+(IKabs(((((-1.0)*x481*x483))+((r01*x484))+(((-1.0)*x482*x483))+(((-1.0)*r01*x485))))));
j1eval[2]=IKsign(cj2);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj0=0;
cj0=1.0;
j0=0;
j1eval[0]=cj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj0=0;
cj0=1.0;
j0=0;
j1eval[0]=sj2;
j1eval[1]=cj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x486=((1.0)*r20);
IkReal x487=(cj4*sj5);
IkReal x488=(cj5*sj4);
IkReal x489=((1.0)*r00);
IkReal x490=(sj4*sj5);
IkReal x491=((1.0)*cj4*cj5);
if( IKabs(((((-1.0)*r01*x491))+(((-1.0)*x488*x489))+(((-1.0)*x487*x489))+((r01*x490)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x486*x488))+(((-1.0)*x486*x487))+(((-1.0)*r21*x491))+((r21*x490)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x491))+(((-1.0)*x488*x489))+(((-1.0)*x487*x489))+((r01*x490))))+IKsqr(((((-1.0)*x486*x488))+(((-1.0)*x486*x487))+(((-1.0)*r21*x491))+((r21*x490))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r01*x491))+(((-1.0)*x488*x489))+(((-1.0)*x487*x489))+((r01*x490))), ((((-1.0)*x486*x488))+(((-1.0)*x486*x487))+(((-1.0)*r21*x491))+((r21*x490))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x492=IKcos(j1);
IkReal x493=IKsin(j1);
IkReal x494=(cj4*sj5);
IkReal x495=(cj5*r21);
IkReal x496=(cj5*r00);
IkReal x497=(sj4*sj5);
IkReal x498=(cj5*r01);
IkReal x499=(cj5*r20);
IkReal x500=((0.02942)*sj5);
IkReal x501=((0.00081)*sj4);
IkReal x502=((0.00081)*cj4);
IkReal x503=(cj3*sj4);
IkReal x504=((0.08354)*sj5);
IkReal x505=((1.0)*cj3*cj4);
evalcond[0]=(((sj4*x499))+(((-1.0)*r21*x497))+((cj4*x495))+x492+((r20*x494)));
evalcond[1]=(((sj4*x496))+(((-1.0)*r01*x497))+((cj4*x498))+x493+((r00*x494)));
evalcond[2]=(((cj3*r01*x494))+(((-1.0)*x496*x505))+((r02*sj3))+x492+((cj3*r00*x497))+((x498*x503)));
evalcond[3]=((((-1.0)*x499*x505))+((r22*sj3))+((x495*x503))+(((-1.0)*x493))+((cj3*r20*x497))+((cj3*r21*x494)));
evalcond[4]=((((-1.0)*r20*x500))+(((-0.02942)*x495))+(((-0.06598)*r22))+(((-1.0)*x495*x501))+(((0.08354)*x499))+(((-1.0)*pz))+(((-0.00081)*r20*x497))+(((0.03715)*x492))+(((-0.00081)*r21*x494))+((x499*x502))+(((-0.26849)*x493))+(((-1.0)*r21*x504)));
evalcond[5]=((0.00041)+(((-0.02942)*x498))+(((-0.00081)*r00*x497))+(((-0.00081)*r01*x494))+(((-0.06598)*r02))+(((0.08354)*x496))+(((-1.0)*px))+(((-1.0)*r01*x504))+((x496*x502))+(((-1.0)*r00*x500))+(((0.03715)*x493))+(((0.26849)*x492))+(((-1.0)*x498*x501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x506=(cj4*sj5);
IkReal x507=(cj4*cj5);
IkReal x508=(cj5*sj4);
IkReal x509=((1.0)*sj4*sj5);
if( IKabs((((r01*x507))+(((-1.0)*r01*x509))+((r00*x506))+((r00*x508)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x508))+((r20*x506))+((r21*x507))+(((-1.0)*r21*x509)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x507))+(((-1.0)*r01*x509))+((r00*x506))+((r00*x508))))+IKsqr((((r20*x508))+((r20*x506))+((r21*x507))+(((-1.0)*r21*x509))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r01*x507))+(((-1.0)*r01*x509))+((r00*x506))+((r00*x508))), (((r20*x508))+((r20*x506))+((r21*x507))+(((-1.0)*r21*x509))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x510=IKcos(j1);
IkReal x511=IKsin(j1);
IkReal x512=(cj4*sj5);
IkReal x513=(cj5*r21);
IkReal x514=(cj5*r00);
IkReal x515=(r01*sj5);
IkReal x516=((1.0)*sj4);
IkReal x517=(cj5*r01);
IkReal x518=(cj5*r20);
IkReal x519=((0.02942)*sj5);
IkReal x520=((0.00081)*sj4);
IkReal x521=(r00*sj5);
IkReal x522=((0.00081)*cj4);
IkReal x523=(cj3*sj4);
IkReal x524=(r21*sj5);
IkReal x525=(r20*sj5);
IkReal x526=((1.0)*x511);
IkReal x527=((1.0)*cj3*cj4);
evalcond[0]=(((cj4*x513))+((sj4*x518))+(((-1.0)*x510))+((r20*x512))+(((-1.0)*x516*x524)));
evalcond[1]=(((cj4*x517))+((sj4*x514))+(((-1.0)*x526))+(((-1.0)*x515*x516))+((r00*x512)));
evalcond[2]=(((cj3*r01*x512))+((r02*sj3))+((x517*x523))+((x521*x523))+x510+(((-1.0)*x514*x527)));
evalcond[3]=(((r22*sj3))+(((-1.0)*x526))+((cj3*r21*x512))+((x513*x523))+(((-1.0)*x518*x527))+((x523*x525)));
evalcond[4]=((((-0.06598)*r22))+(((-1.0)*x520*x525))+(((0.08354)*x518))+((x518*x522))+(((-1.0)*pz))+(((-1.0)*r20*x519))+(((-0.02942)*x513))+(((-0.26849)*x511))+(((-1.0)*x513*x520))+(((-0.08354)*x524))+(((-0.00081)*r21*x512))+(((0.02415)*x510)));
evalcond[5]=((0.00041)+(((-0.00081)*r01*x512))+(((-1.0)*r00*x519))+(((-1.0)*x520*x521))+(((0.08354)*x514))+(((-0.06598)*r02))+(((-1.0)*px))+(((-1.0)*x517*x520))+(((-0.02942)*x517))+((x514*x522))+(((0.02415)*x511))+(((-0.08354)*x515))+(((0.26849)*x510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x528=(cj3*cj5);
IkReal x529=((1.0)*sj4);
IkReal x530=(cj3*sj5);
IkReal x531=((1.0)*cj4);
if( IKabs((((r20*sj4*x530))+((r22*sj3))+(((-1.0)*r20*x528*x531))+((cj4*r21*x530))+((r21*sj4*x528)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x529*x530))+(((-1.0)*r01*x530*x531))+((cj4*r00*x528))+(((-1.0)*r02*sj3))+(((-1.0)*r01*x528*x529)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*sj4*x530))+((r22*sj3))+(((-1.0)*r20*x528*x531))+((cj4*r21*x530))+((r21*sj4*x528))))+IKsqr(((((-1.0)*r00*x529*x530))+(((-1.0)*r01*x530*x531))+((cj4*r00*x528))+(((-1.0)*r02*sj3))+(((-1.0)*r01*x528*x529))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r20*sj4*x530))+((r22*sj3))+(((-1.0)*r20*x528*x531))+((cj4*r21*x530))+((r21*sj4*x528))), ((((-1.0)*r00*x529*x530))+(((-1.0)*r01*x530*x531))+((cj4*r00*x528))+(((-1.0)*r02*sj3))+(((-1.0)*r01*x528*x529))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x532=IKcos(j1);
IkReal x533=IKsin(j1);
IkReal x534=(cj5*r21);
IkReal x535=(cj3*cj4);
IkReal x536=(r21*sj5);
IkReal x537=(cj5*r00);
IkReal x538=((0.00081)*cj4);
IkReal x539=(cj5*r20);
IkReal x540=(cj4*sj3);
IkReal x541=(r01*sj5);
IkReal x542=((0.00081)*sj4);
IkReal x543=(r20*sj5);
IkReal x544=(cj5*r01);
IkReal x545=(sj3*sj4);
IkReal x546=((1.0)*cj3);
IkReal x547=(r00*sj5);
IkReal x548=(cj3*sj4);
evalcond[0]=((((-1.0)*x535*x537))+((x544*x548))+((x547*x548))+((r02*sj3))+x532+((x535*x541)));
evalcond[1]=((((-1.0)*r22*x546))+(((-1.0)*x539*x540))+((x543*x545))+((x536*x540))+x532+((x534*x545)));
evalcond[2]=(((x544*x545))+((x540*x541))+(((-1.0)*r02*x546))+x533+((x545*x547))+(((-1.0)*x537*x540)));
evalcond[3]=((((-1.0)*x535*x539))+(((-1.0)*x533))+((r22*sj3))+((x543*x548))+((x534*x548))+((x535*x536)));
evalcond[4]=((((-1.0)*x542*x543))+(((-1.0)*x534*x542))+(((-0.06598)*r22))+(((-0.02942)*x543))+(((-0.02942)*x534))+(((-0.26849)*x533))+(((-1.0)*pz))+(((0.02304)*x532))+(((-0.08354)*x536))+(((0.08354)*x539))+((x538*x539))+(((-1.0)*x536*x538)));
evalcond[5]=((0.00041)+(((-1.0)*x542*x544))+(((-1.0)*x542*x547))+(((-0.02942)*x547))+(((-0.02942)*x544))+(((-1.0)*x538*x541))+(((-0.06598)*r02))+((x537*x538))+(((-1.0)*px))+(((0.02304)*x533))+(((0.08354)*x537))+(((0.26849)*x532))+(((-0.08354)*x541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x549=(cj3*cj5);
IkReal x550=((1.0)*sj4);
IkReal x551=(cj3*sj5);
IkReal x552=((1.0)*cj4);
if( IKabs((((r20*sj4*x551))+((r22*sj3))+((cj4*r21*x551))+(((-1.0)*r20*x549*x552))+((r21*sj4*x549)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x551*x552))+(((-1.0)*r01*x549*x550))+(((-1.0)*r02*sj3))+((cj4*r00*x549))+(((-1.0)*r00*x550*x551)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*sj4*x551))+((r22*sj3))+((cj4*r21*x551))+(((-1.0)*r20*x549*x552))+((r21*sj4*x549))))+IKsqr(((((-1.0)*r01*x551*x552))+(((-1.0)*r01*x549*x550))+(((-1.0)*r02*sj3))+((cj4*r00*x549))+(((-1.0)*r00*x550*x551))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r20*sj4*x551))+((r22*sj3))+((cj4*r21*x551))+(((-1.0)*r20*x549*x552))+((r21*sj4*x549))), ((((-1.0)*r01*x551*x552))+(((-1.0)*r01*x549*x550))+(((-1.0)*r02*sj3))+((cj4*r00*x549))+(((-1.0)*r00*x550*x551))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x553=IKcos(j1);
IkReal x554=IKsin(j1);
IkReal x555=((0.02942)*cj5);
IkReal x556=(cj3*cj4);
IkReal x557=(r21*sj5);
IkReal x558=(cj5*r00);
IkReal x559=((0.00081)*cj4);
IkReal x560=(cj5*r20);
IkReal x561=(cj4*sj3);
IkReal x562=(r01*sj5);
IkReal x563=((0.00081)*sj4);
IkReal x564=(r20*sj5);
IkReal x565=(cj5*r01);
IkReal x566=((1.0)*cj3);
IkReal x567=(r00*sj5);
IkReal x568=(cj3*sj4);
IkReal x569=(sj3*sj4);
IkReal x570=(cj5*r21);
IkReal x571=((1.0)*x554);
evalcond[0]=(((x565*x568))+((x556*x562))+((r02*sj3))+((x567*x568))+x553+(((-1.0)*x556*x558)));
evalcond[1]=(((x564*x568))+((r22*sj3))+(((-1.0)*x556*x560))+(((-1.0)*x571))+((x568*x570))+((x556*x557)));
evalcond[2]=((((-1.0)*x553))+((x564*x569))+(((-1.0)*x560*x561))+((x569*x570))+(((-1.0)*r22*x566))+((x557*x561)));
evalcond[3]=(((x565*x569))+(((-1.0)*x558*x561))+((x561*x562))+((x567*x569))+(((-1.0)*x571))+(((-1.0)*r02*x566)));
evalcond[4]=((((-0.06598)*r22))+(((-1.0)*r21*x555))+(((0.08354)*x560))+(((-1.0)*pz))+(((-1.0)*x563*x570))+(((-0.26849)*x554))+(((-0.08354)*x557))+(((-1.0)*x563*x564))+(((-1.0)*x557*x559))+(((0.03826)*x553))+((x559*x560))+(((-0.02942)*x564)));
evalcond[5]=((0.00041)+(((-0.08354)*x562))+(((-1.0)*r01*x555))+(((-0.06598)*r02))+(((-1.0)*px))+(((-1.0)*x559*x562))+((x558*x559))+(((0.26849)*x553))+(((-1.0)*x563*x565))+(((-1.0)*x563*x567))+(((0.08354)*x558))+(((0.03826)*x554))+(((-0.02942)*x567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x572=((1.0)*r20);
IkReal x573=(cj4*sj5);
IkReal x574=(cj4*cj5);
IkReal x575=(r00*sj3);
IkReal x576=(cj5*sj4);
IkReal x577=(sj4*sj5);
IkReal x578=((1.0)*r01*sj3);
CheckValue<IkReal> x579=IKPowWithIntegerCheck(sj2,-1);
if(!x579.valid){
continue;
}
CheckValue<IkReal> x580=IKPowWithIntegerCheck(cj2,-1);
if(!x580.valid){
continue;
}
if( IKabs(((x579.value)*(((((-1.0)*x573*x578))+((x574*x575))+(((-1.0)*x576*x578))+((cj3*r02))+(((-1.0)*x575*x577)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x580.value)*(((((-1.0)*r21*x574))+((r21*x577))+(((-1.0)*x572*x576))+(((-1.0)*x572*x573)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x579.value)*(((((-1.0)*x573*x578))+((x574*x575))+(((-1.0)*x576*x578))+((cj3*r02))+(((-1.0)*x575*x577))))))+IKsqr(((x580.value)*(((((-1.0)*r21*x574))+((r21*x577))+(((-1.0)*x572*x576))+(((-1.0)*x572*x573))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x579.value)*(((((-1.0)*x573*x578))+((x574*x575))+(((-1.0)*x576*x578))+((cj3*r02))+(((-1.0)*x575*x577))))), ((x580.value)*(((((-1.0)*r21*x574))+((r21*x577))+(((-1.0)*x572*x576))+(((-1.0)*x572*x573))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x581=IKcos(j1);
IkReal x582=IKsin(j1);
IkReal x583=(cj4*sj5);
IkReal x584=(cj5*r21);
IkReal x585=(cj5*r00);
IkReal x586=((0.00081)*cj4);
IkReal x587=(sj4*sj5);
IkReal x588=(cj4*cj5);
IkReal x589=(cj5*r20);
IkReal x590=((0.00081)*r01);
IkReal x591=(r01*sj3);
IkReal x592=((1.0)*sj3);
IkReal x593=(cj5*sj4);
IkReal x594=(cj3*r01);
IkReal x595=((1.0)*cj3);
IkReal x596=((0.08354)*sj5);
IkReal x597=((0.02942)*sj5);
IkReal x598=(cj4*x595);
IkReal x599=(cj2*x581);
IkReal x600=(sj2*x581);
IkReal x601=(sj2*x582);
IkReal x602=(cj2*x582);
evalcond[0]=(((r20*x583))+(((-1.0)*r21*x587))+((cj4*x584))+x599+((sj4*x589)));
evalcond[1]=(((r01*x588))+x602+((r00*x583))+((sj4*x585))+(((-1.0)*r01*x587)));
evalcond[2]=(((cj3*r00*x587))+(((-1.0)*x585*x598))+((r02*sj3))+((x583*x594))+x581+((x593*x594)));
evalcond[3]=(((cj3*r21*x583))+(((-1.0)*x582))+((cj3*r20*x587))+(((-1.0)*r20*x588*x595))+((r22*sj3))+((cj3*sj4*x584)));
evalcond[4]=((((-1.0)*r20*x588*x592))+((r21*sj3*x583))+((r20*sj3*x587))+(((-1.0)*r22*x595))+x600+((sj3*sj4*x584)));
evalcond[5]=(((r00*sj3*x587))+((x583*x591))+(((-1.0)*r02*x595))+x601+((x591*x593))+(((-1.0)*cj4*x585*x592)));
evalcond[6]=((((0.0065)*x599))+(((-0.00081)*sj4*x584))+(((-1.0)*r21*x596))+(((-0.06598)*r22))+(((-1.0)*r20*x597))+(((-0.02942)*x584))+((x586*x589))+(((-1.0)*pz))+(((0.08354)*x589))+(((-0.00081)*r20*x587))+(((0.03065)*x581))+(((-0.00081)*r21*x583))+(((-0.00761)*x600))+(((-0.26849)*x582)));
evalcond[7]=((0.00041)+(((-1.0)*r01*x596))+(((0.0065)*x602))+(((-1.0)*r00*x597))+(((-0.06598)*r02))+(((-1.0)*x590*x593))+((x585*x586))+(((-0.02942)*cj5*r01))+(((-1.0)*px))+(((0.26849)*x581))+(((0.08354)*x585))+(((-1.0)*x583*x590))+(((0.03065)*x582))+(((-0.00081)*r00*x587))+(((-0.00761)*x601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x603=(cj4*sj5);
IkReal x604=((1.0)*r20);
IkReal x605=(r21*sj4);
IkReal x606=(cj4*cj5);
CheckValue<IkReal> x607=IKPowWithIntegerCheck(cj2,-1);
if(!x607.valid){
continue;
}
if( IKabs(((((-1.0)*cj3*x604*x606))+((r22*sj3))+((cj3*cj5*x605))+((cj3*r21*x603))+((cj3*r20*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x607.value)*(((((-1.0)*x603*x604))+(((-1.0)*r21*x606))+(((-1.0)*cj5*sj4*x604))+((sj5*x605)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*x604*x606))+((r22*sj3))+((cj3*cj5*x605))+((cj3*r21*x603))+((cj3*r20*sj4*sj5))))+IKsqr(((x607.value)*(((((-1.0)*x603*x604))+(((-1.0)*r21*x606))+(((-1.0)*cj5*sj4*x604))+((sj5*x605))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*cj3*x604*x606))+((r22*sj3))+((cj3*cj5*x605))+((cj3*r21*x603))+((cj3*r20*sj4*sj5))), ((x607.value)*(((((-1.0)*x603*x604))+(((-1.0)*r21*x606))+(((-1.0)*cj5*sj4*x604))+((sj5*x605))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x608=IKcos(j1);
IkReal x609=IKsin(j1);
IkReal x610=(cj4*sj5);
IkReal x611=(cj5*r21);
IkReal x612=(cj5*r00);
IkReal x613=((0.00081)*cj4);
IkReal x614=(sj4*sj5);
IkReal x615=(cj4*cj5);
IkReal x616=(cj5*r20);
IkReal x617=((0.00081)*r01);
IkReal x618=(r01*sj3);
IkReal x619=((1.0)*sj3);
IkReal x620=(cj5*sj4);
IkReal x621=(cj3*r01);
IkReal x622=((1.0)*cj3);
IkReal x623=((0.08354)*sj5);
IkReal x624=((0.02942)*sj5);
IkReal x625=(cj4*x622);
IkReal x626=(cj2*x608);
IkReal x627=(sj2*x608);
IkReal x628=(sj2*x609);
IkReal x629=(cj2*x609);
evalcond[0]=(((r20*x610))+((sj4*x616))+x626+((cj4*x611))+(((-1.0)*r21*x614)));
evalcond[1]=(((r00*x610))+((r01*x615))+((sj4*x612))+x629+(((-1.0)*r01*x614)));
evalcond[2]=(((r02*sj3))+((cj3*r00*x614))+(((-1.0)*x612*x625))+x608+((x610*x621))+((x620*x621)));
evalcond[3]=(((r22*sj3))+((cj3*sj4*x611))+(((-1.0)*x609))+((cj3*r20*x614))+(((-1.0)*r20*x615*x622))+((cj3*r21*x610)));
evalcond[4]=((((-1.0)*r20*x615*x619))+((sj3*sj4*x611))+((r21*sj3*x610))+((r20*sj3*x614))+x627+(((-1.0)*r22*x622)));
evalcond[5]=((((-1.0)*r02*x622))+((x618*x620))+(((-1.0)*cj4*x612*x619))+x628+((r00*sj3*x614))+((x610*x618)));
evalcond[6]=((((0.03065)*x608))+(((-0.06598)*r22))+(((-0.00081)*r21*x610))+(((-0.00081)*sj4*x611))+(((-1.0)*pz))+(((-1.0)*r21*x623))+(((-0.00081)*r20*x614))+(((-1.0)*r20*x624))+(((-0.00761)*x627))+(((0.0065)*x626))+((x613*x616))+(((-0.26849)*x609))+(((0.08354)*x616))+(((-0.02942)*x611)));
evalcond[7]=((0.00041)+(((0.03065)*x609))+(((-1.0)*x610*x617))+(((-1.0)*r01*x623))+(((-0.00081)*r00*x614))+(((-1.0)*r00*x624))+(((-0.06598)*r02))+((x612*x613))+(((-0.02942)*cj5*r01))+(((-1.0)*x617*x620))+(((-1.0)*px))+(((-0.00761)*x628))+(((0.0065)*x629))+(((0.26849)*x608))+(((0.08354)*x612)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x630=((1.0)*r20);
IkReal x631=(cj4*sj5);
IkReal x632=(cj5*sj4);
IkReal x633=((1.0)*r00);
IkReal x634=(sj4*sj5);
IkReal x635=((1.0)*cj4*cj5);
CheckValue<IkReal> x636 = IKatan2WithCheck(IkReal(((((-1.0)*x631*x633))+(((-1.0)*r01*x635))+((r01*x634))+(((-1.0)*x632*x633)))),IkReal((((r21*x634))+(((-1.0)*x630*x632))+(((-1.0)*x630*x631))+(((-1.0)*r21*x635)))),IKFAST_ATAN2_MAGTHRESH);
if(!x636.valid){
continue;
}
CheckValue<IkReal> x637=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x637.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x636.value)+(((1.5707963267949)*(x637.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x638=IKcos(j1);
IkReal x639=IKsin(j1);
IkReal x640=(cj4*sj5);
IkReal x641=(cj5*r21);
IkReal x642=(cj5*r00);
IkReal x643=((0.00081)*cj4);
IkReal x644=(sj4*sj5);
IkReal x645=(cj4*cj5);
IkReal x646=(cj5*r20);
IkReal x647=((0.00081)*r01);
IkReal x648=(r01*sj3);
IkReal x649=((1.0)*sj3);
IkReal x650=(cj5*sj4);
IkReal x651=(cj3*r01);
IkReal x652=((1.0)*cj3);
IkReal x653=((0.08354)*sj5);
IkReal x654=((0.02942)*sj5);
IkReal x655=(cj4*x652);
IkReal x656=(cj2*x638);
IkReal x657=(sj2*x638);
IkReal x658=(sj2*x639);
IkReal x659=(cj2*x639);
evalcond[0]=(((r20*x640))+((cj4*x641))+((sj4*x646))+x656+(((-1.0)*r21*x644)));
evalcond[1]=(((sj4*x642))+x659+((r01*x645))+((r00*x640))+(((-1.0)*r01*x644)));
evalcond[2]=((((-1.0)*x642*x655))+((cj3*r00*x644))+((r02*sj3))+((x640*x651))+x638+((x650*x651)));
evalcond[3]=((((-1.0)*r20*x645*x652))+((r22*sj3))+((cj3*sj4*x641))+((cj3*r21*x640))+((cj3*r20*x644))+(((-1.0)*x639)));
evalcond[4]=(((sj3*sj4*x641))+(((-1.0)*r22*x652))+x657+(((-1.0)*r20*x645*x649))+((r20*sj3*x644))+((r21*sj3*x640)));
evalcond[5]=((((-1.0)*cj4*x642*x649))+((r00*sj3*x644))+((x640*x648))+((x648*x650))+(((-1.0)*r02*x652))+x658);
evalcond[6]=((((-0.06598)*r22))+((x643*x646))+(((-0.00081)*r20*x644))+(((-0.26849)*x639))+(((-1.0)*pz))+(((-0.00081)*r21*x640))+(((0.0065)*x656))+(((0.03065)*x638))+(((-0.00081)*sj4*x641))+(((0.08354)*x646))+(((-1.0)*r20*x654))+(((-0.02942)*x641))+(((-1.0)*r21*x653))+(((-0.00761)*x657)));
evalcond[7]=((0.00041)+(((-0.00081)*r00*x644))+(((-1.0)*x640*x647))+(((0.26849)*x638))+(((-1.0)*r00*x654))+(((-1.0)*r01*x653))+(((-1.0)*x647*x650))+(((-0.06598)*r02))+(((-0.02942)*cj5*r01))+(((-1.0)*px))+(((0.0065)*x659))+(((0.03065)*x639))+(((0.08354)*x642))+(((-0.00761)*x658))+((x642*x643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x660=(cj4*sj3);
IkReal x661=(r11*sj5);
IkReal x662=(sj3*sj4);
IkReal x663=(cj5*r11);
IkReal x664=(r10*sj5);
IkReal x665=((1.0)*cj4);
IkReal x666=((1.0)*cj5*r10);
if( IKabs(((((-1.0)*x663*x665))+((sj4*x661))+(((-1.0)*sj4*x666))+(((-1.0)*x664*x665)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x662*x663))+((x662*x664))+(((-1.0)*x660*x666))+((x660*x661))+(((-1.0)*cj3*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x663*x665))+((sj4*x661))+(((-1.0)*sj4*x666))+(((-1.0)*x664*x665))))+IKsqr((((x662*x663))+((x662*x664))+(((-1.0)*x660*x666))+((x660*x661))+(((-1.0)*cj3*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x663*x665))+((sj4*x661))+(((-1.0)*sj4*x666))+(((-1.0)*x664*x665))), (((x662*x663))+((x662*x664))+(((-1.0)*x660*x666))+((x660*x661))+(((-1.0)*cj3*r12))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x667=IKsin(j2);
IkReal x668=IKcos(j2);
IkReal x669=(cj4*r10);
IkReal x670=(cj5*sj3);
IkReal x671=(cj5*sj4);
IkReal x672=(r11*sj4);
IkReal x673=(cj5*r11);
IkReal x674=(r10*sj4*sj5);
IkReal x675=(cj4*r11*sj5);
evalcond[0]=(((r10*x671))+(((-1.0)*sj5*x672))+x667+((cj4*x673))+((sj5*x669)));
evalcond[1]=(((sj3*x674))+((sj3*x675))+((x670*x672))+(((-1.0)*x668))+(((-1.0)*cj3*r12))+(((-1.0)*x669*x670)));
evalcond[2]=((0.03283)+(((-0.00081)*x675))+(((-0.00081)*x674))+(((-0.08354)*r11*sj5))+(((-0.00081)*r11*x671))+(((-0.02942)*r10*sj5))+(((0.08354)*cj5*r10))+(((-0.06598)*r12))+(((-0.02942)*x673))+(((-1.0)*py))+(((0.00081)*cj5*x669))+(((0.00761)*x668))+(((0.0065)*x667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x676=(cj4*sj5);
IkReal x677=((1.0)*r20);
IkReal x678=(cj5*sj4);
IkReal x679=(cj4*cj5);
IkReal x680=(sj4*sj5);
j1eval[0]=cj2;
j1eval[1]=((IKabs((((r21*x680))+(((-1.0)*r21*x679))+(((-1.0)*x676*x677))+(((-1.0)*x677*x678)))))+(IKabs((((r01*x679))+((r00*x676))+((r00*x678))+(((-1.0)*r01*x680))))));
j1eval[2]=IKsign(cj2);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
j1eval[0]=cj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
j1eval[0]=sj2;
j1eval[1]=cj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x681=(cj4*sj5);
IkReal x682=((1.0)*r20);
IkReal x683=(cj5*sj4);
IkReal x684=(cj4*cj5);
IkReal x685=(sj4*sj5);
if( IKabs(((((-1.0)*r01*x685))+((r01*x684))+((r00*x683))+((r00*x681)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x681*x682))+((r21*x685))+(((-1.0)*r21*x684))+(((-1.0)*x682*x683)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x685))+((r01*x684))+((r00*x683))+((r00*x681))))+IKsqr(((((-1.0)*x681*x682))+((r21*x685))+(((-1.0)*r21*x684))+(((-1.0)*x682*x683))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r01*x685))+((r01*x684))+((r00*x683))+((r00*x681))), ((((-1.0)*x681*x682))+((r21*x685))+(((-1.0)*r21*x684))+(((-1.0)*x682*x683))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x686=IKcos(j1);
IkReal x687=IKsin(j1);
IkReal x688=(cj4*sj5);
IkReal x689=(cj5*r21);
IkReal x690=(cj5*r00);
IkReal x691=(sj4*sj5);
IkReal x692=(cj5*r01);
IkReal x693=(cj5*r20);
IkReal x694=((0.02942)*sj5);
IkReal x695=((0.00081)*sj4);
IkReal x696=((0.00081)*cj4);
IkReal x697=(cj3*sj4);
IkReal x698=((0.08354)*sj5);
IkReal x699=((1.0)*x687);
IkReal x700=((1.0)*cj3*cj4);
evalcond[0]=(((cj4*x689))+((sj4*x693))+(((-1.0)*r21*x691))+x686+((r20*x688)));
evalcond[1]=(((cj4*x692))+((sj4*x690))+(((-1.0)*x699))+((r00*x688))+(((-1.0)*r01*x691)));
evalcond[2]=((((-1.0)*x693*x700))+((r22*sj3))+((x689*x697))+((cj3*r21*x688))+((cj3*r20*x691))+(((-1.0)*x699)));
evalcond[3]=((((-1.0)*x690*x700))+((r02*sj3))+((x692*x697))+((cj3*r01*x688))+((cj3*r00*x691))+(((-1.0)*x686)));
evalcond[4]=((((-0.00081)*r20*x691))+(((-0.06598)*r22))+(((0.03715)*x686))+(((-0.26849)*x687))+(((-1.0)*pz))+((x693*x696))+(((-0.00081)*r21*x688))+(((-0.02942)*x689))+(((0.08354)*x693))+(((-1.0)*x689*x695))+(((-1.0)*r20*x694))+(((-1.0)*r21*x698)));
evalcond[5]=((-0.00041)+(((-0.03715)*x687))+(((-1.0)*r00*x694))+(((-1.0)*r01*x698))+((x690*x696))+(((-0.26849)*x686))+(((-0.06598)*r02))+(((-1.0)*px))+(((-0.00081)*r01*x688))+(((-1.0)*x692*x695))+(((0.08354)*x690))+(((-0.00081)*r00*x691))+(((-0.02942)*x692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x701=(cj5*sj4);
IkReal x702=((1.0)*r00);
IkReal x703=(cj4*cj5);
IkReal x704=(cj4*sj5);
IkReal x705=(sj4*sj5);
if( IKabs(((((-1.0)*x702*x704))+((r01*x705))+(((-1.0)*r01*x703))+(((-1.0)*x701*x702)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x705))+((r20*x701))+((r20*x704))+((r21*x703)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x702*x704))+((r01*x705))+(((-1.0)*r01*x703))+(((-1.0)*x701*x702))))+IKsqr(((((-1.0)*r21*x705))+((r20*x701))+((r20*x704))+((r21*x703))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*x702*x704))+((r01*x705))+(((-1.0)*r01*x703))+(((-1.0)*x701*x702))), ((((-1.0)*r21*x705))+((r20*x701))+((r20*x704))+((r21*x703))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x706=IKsin(j1);
IkReal x707=IKcos(j1);
IkReal x708=(cj4*sj5);
IkReal x709=(cj5*r21);
IkReal x710=(cj5*r00);
IkReal x711=(sj4*sj5);
IkReal x712=(cj5*r01);
IkReal x713=(cj5*r20);
IkReal x714=((0.02942)*sj5);
IkReal x715=((0.00081)*sj4);
IkReal x716=((0.00081)*cj4);
IkReal x717=(cj3*sj4);
IkReal x718=((0.08354)*sj5);
IkReal x719=((1.0)*x707);
IkReal x720=((1.0)*cj3*cj4);
evalcond[0]=(((sj4*x710))+((cj4*x712))+((r00*x708))+(((-1.0)*r01*x711))+x706);
evalcond[1]=(((sj4*x713))+((cj4*x709))+(((-1.0)*r21*x711))+((r20*x708))+(((-1.0)*x719)));
evalcond[2]=((((-1.0)*x713*x720))+((r22*sj3))+(((-1.0)*x706))+((x709*x717))+((cj3*r21*x708))+((cj3*r20*x711)));
evalcond[3]=((((-1.0)*x710*x720))+((cj3*r00*x711))+((r02*sj3))+(((-1.0)*x719))+((cj3*r01*x708))+((x712*x717)));
evalcond[4]=((((0.08354)*x713))+(((-0.06598)*r22))+(((-0.00081)*r21*x708))+(((0.02415)*x707))+(((-1.0)*x709*x715))+(((-0.00081)*r20*x711))+(((-0.02942)*x709))+(((-1.0)*r21*x718))+(((-1.0)*pz))+(((-1.0)*r20*x714))+(((-0.26849)*x706))+((x713*x716)));
evalcond[5]=((-0.00041)+(((-0.00081)*r01*x708))+(((-0.00081)*r00*x711))+(((0.08354)*x710))+(((-0.02942)*x712))+(((-0.06598)*r02))+((x710*x716))+(((-1.0)*px))+(((-0.26849)*x707))+(((-0.02415)*x706))+(((-1.0)*x712*x715))+(((-1.0)*r01*x718))+(((-1.0)*r00*x714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x721=((1.0)*sj3);
IkReal x722=(cj4*r21*sj5);
IkReal x723=(r20*sj4*sj5);
IkReal x724=(cj5*r21*sj4);
IkReal x725=(cj4*cj5*r20);
if( IKabs((((r22*sj3))+(((-1.0)*cj3*x725))+((cj3*x723))+((cj3*x722))+((cj3*x724)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj3*x725))+((cj3*r22))+(((-1.0)*x721*x724))+(((-1.0)*x721*x723))+(((-1.0)*x721*x722)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*sj3))+(((-1.0)*cj3*x725))+((cj3*x723))+((cj3*x722))+((cj3*x724))))+IKsqr((((sj3*x725))+((cj3*r22))+(((-1.0)*x721*x724))+(((-1.0)*x721*x723))+(((-1.0)*x721*x722))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r22*sj3))+(((-1.0)*cj3*x725))+((cj3*x723))+((cj3*x722))+((cj3*x724))), (((sj3*x725))+((cj3*r22))+(((-1.0)*x721*x724))+(((-1.0)*x721*x723))+(((-1.0)*x721*x722))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x726=IKcos(j1);
IkReal x727=IKsin(j1);
IkReal x728=(cj5*r21);
IkReal x729=(cj3*cj4);
IkReal x730=(r21*sj5);
IkReal x731=(cj5*r00);
IkReal x732=((0.00081)*cj4);
IkReal x733=(cj5*r20);
IkReal x734=(cj4*sj3);
IkReal x735=(r01*sj5);
IkReal x736=((0.00081)*sj4);
IkReal x737=(r20*sj5);
IkReal x738=(cj5*r01);
IkReal x739=(sj3*sj4);
IkReal x740=((1.0)*cj3);
IkReal x741=(r00*sj5);
IkReal x742=(cj3*sj4);
IkReal x743=((1.0)*x727);
evalcond[0]=(((x728*x739))+(((-1.0)*x733*x734))+(((-1.0)*r22*x740))+x726+((x737*x739))+((x730*x734)));
evalcond[1]=(((r22*sj3))+((x729*x730))+((x737*x742))+(((-1.0)*x743))+(((-1.0)*x729*x733))+((x728*x742)));
evalcond[2]=(((x738*x742))+((x729*x735))+((r02*sj3))+(((-1.0)*x726))+((x741*x742))+(((-1.0)*x729*x731)));
evalcond[3]=(((x734*x735))+((x739*x741))+(((-1.0)*x731*x734))+(((-1.0)*r02*x740))+((x738*x739))+(((-1.0)*x743)));
evalcond[4]=((((0.08354)*x733))+(((-0.06598)*r22))+(((-1.0)*x736*x737))+(((-0.02942)*x737))+(((-0.02942)*x728))+(((0.02304)*x726))+(((-1.0)*pz))+(((-0.26849)*x727))+(((-0.08354)*x730))+(((-1.0)*x730*x732))+(((-1.0)*x728*x736))+((x732*x733)));
evalcond[5]=((-0.00041)+(((0.08354)*x731))+((x731*x732))+(((-1.0)*x732*x735))+(((-1.0)*x736*x738))+(((-0.02942)*x738))+(((-0.02304)*x727))+(((-0.06598)*r02))+(((-1.0)*px))+(((-0.02942)*x741))+(((-0.26849)*x726))+(((-0.08354)*x735))+(((-1.0)*x736*x741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x744=(cj3*cj5);
IkReal x745=(r01*sj4);
IkReal x746=(cj4*r00);
IkReal x747=(cj5*sj3);
IkReal x748=((1.0)*sj3);
IkReal x749=(cj4*r01*sj5);
IkReal x750=(r00*sj4*sj5);
if( IKabs(((((-1.0)*x745*x747))+((x746*x747))+((cj3*r02))+(((-1.0)*x748*x750))+(((-1.0)*x748*x749)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x744*x746))+((x744*x745))+((cj3*x749))+((r02*sj3))+((cj3*x750)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x745*x747))+((x746*x747))+((cj3*r02))+(((-1.0)*x748*x750))+(((-1.0)*x748*x749))))+IKsqr(((((-1.0)*x744*x746))+((x744*x745))+((cj3*x749))+((r02*sj3))+((cj3*x750))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*x745*x747))+((x746*x747))+((cj3*r02))+(((-1.0)*x748*x750))+(((-1.0)*x748*x749))), ((((-1.0)*x744*x746))+((x744*x745))+((cj3*x749))+((r02*sj3))+((cj3*x750))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x751=IKsin(j1);
IkReal x752=IKcos(j1);
IkReal x753=((0.02942)*cj5);
IkReal x754=(cj3*cj4);
IkReal x755=(r21*sj5);
IkReal x756=(cj5*r00);
IkReal x757=((0.00081)*cj4);
IkReal x758=(cj5*r20);
IkReal x759=(cj4*sj3);
IkReal x760=(r01*sj5);
IkReal x761=((0.00081)*sj4);
IkReal x762=(r20*sj5);
IkReal x763=(cj5*r01);
IkReal x764=((1.0)*cj3);
IkReal x765=(r00*sj5);
IkReal x766=(cj3*sj4);
IkReal x767=(sj3*sj4);
IkReal x768=(cj5*r21);
IkReal x769=((1.0)*x752);
evalcond[0]=((((-1.0)*x756*x759))+((x759*x760))+((x763*x767))+((x765*x767))+x751+(((-1.0)*r02*x764)));
evalcond[1]=(((r22*sj3))+((x762*x766))+(((-1.0)*x754*x758))+(((-1.0)*x751))+((x766*x768))+((x754*x755)));
evalcond[2]=((((-1.0)*x769))+((r02*sj3))+((x763*x766))+(((-1.0)*x754*x756))+((x765*x766))+((x754*x760)));
evalcond[3]=((((-1.0)*x769))+((x762*x767))+((x755*x759))+(((-1.0)*x758*x759))+((x767*x768))+(((-1.0)*r22*x764)));
evalcond[4]=((((-0.06598)*r22))+(((-1.0)*x755*x757))+(((0.08354)*x758))+(((-0.02942)*x762))+(((-1.0)*pz))+(((0.03826)*x752))+(((-0.08354)*x755))+(((-1.0)*r21*x753))+((x757*x758))+(((-1.0)*x761*x762))+(((-1.0)*x761*x768))+(((-0.26849)*x751)));
evalcond[5]=((-0.00041)+((x756*x757))+(((-0.08354)*x760))+(((0.08354)*x756))+(((-0.06598)*r02))+(((-1.0)*r01*x753))+(((-0.02942)*x765))+(((-1.0)*px))+(((-1.0)*x757*x760))+(((-0.03826)*x751))+(((-1.0)*x761*x765))+(((-1.0)*x761*x763))+(((-0.26849)*x752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x770=(cj4*sj5);
IkReal x771=((1.0)*r20);
IkReal x772=(r01*sj3);
IkReal x773=(r00*sj3);
IkReal x774=(cj5*sj4);
IkReal x775=(sj4*sj5);
IkReal x776=((1.0)*cj4*cj5);
CheckValue<IkReal> x777=IKPowWithIntegerCheck(sj2,-1);
if(!x777.valid){
continue;
}
CheckValue<IkReal> x778=IKPowWithIntegerCheck(cj2,-1);
if(!x778.valid){
continue;
}
if( IKabs(((x777.value)*((((x770*x772))+((x772*x774))+((x773*x775))+(((-1.0)*cj3*r02))+(((-1.0)*x773*x776)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x778.value)*((((r21*x775))+(((-1.0)*x771*x774))+(((-1.0)*x770*x771))+(((-1.0)*r21*x776)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x777.value)*((((x770*x772))+((x772*x774))+((x773*x775))+(((-1.0)*cj3*r02))+(((-1.0)*x773*x776))))))+IKsqr(((x778.value)*((((r21*x775))+(((-1.0)*x771*x774))+(((-1.0)*x770*x771))+(((-1.0)*r21*x776))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x777.value)*((((x770*x772))+((x772*x774))+((x773*x775))+(((-1.0)*cj3*r02))+(((-1.0)*x773*x776))))), ((x778.value)*((((r21*x775))+(((-1.0)*x771*x774))+(((-1.0)*x770*x771))+(((-1.0)*r21*x776))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x779=IKsin(j1);
IkReal x780=IKcos(j1);
IkReal x781=(cj4*sj5);
IkReal x782=(cj5*r21);
IkReal x783=(cj5*r00);
IkReal x784=((0.00081)*cj4);
IkReal x785=(sj4*sj5);
IkReal x786=(cj5*r01);
IkReal x787=(cj5*r20);
IkReal x788=((0.00081)*sj4);
IkReal x789=(sj3*sj4);
IkReal x790=((1.0)*cj3);
IkReal x791=((0.08354)*sj5);
IkReal x792=(cj3*sj4);
IkReal x793=((0.02942)*sj5);
IkReal x794=(cj4*x790);
IkReal x795=(sj2*x780);
IkReal x796=(cj2*x780);
IkReal x797=((1.0)*cj4*sj3);
IkReal x798=((1.0)*x779);
evalcond[0]=(((r20*x781))+(((-1.0)*r21*x785))+((sj4*x787))+((cj4*x782))+x796);
evalcond[1]=(((r00*x781))+(((-1.0)*r01*x785))+(((-1.0)*cj2*x798))+((sj4*x783))+((cj4*x786)));
evalcond[2]=(((cj3*r20*x785))+(((-1.0)*x798))+((cj3*r21*x781))+((r22*sj3))+((x782*x792))+(((-1.0)*x787*x794)));
evalcond[3]=((((-1.0)*x783*x794))+((x786*x792))+((cj3*r00*x785))+((r02*sj3))+((cj3*r01*x781))+(((-1.0)*x780)));
evalcond[4]=(((r20*sj3*x785))+((x782*x789))+(((-1.0)*x787*x797))+(((-1.0)*r22*x790))+x795+((r21*sj3*x781)));
evalcond[5]=(((r01*sj3*x781))+(((-1.0)*x783*x797))+((x786*x789))+((r00*sj3*x785))+(((-1.0)*sj2*x798))+(((-1.0)*r02*x790)));
evalcond[6]=((((-0.06598)*r22))+(((0.0065)*x796))+(((-0.00081)*r21*x781))+(((0.03065)*x780))+(((-0.02942)*x782))+(((0.08354)*x787))+((x784*x787))+(((-1.0)*r20*x793))+(((-1.0)*pz))+(((-0.00761)*x795))+(((-0.00081)*r20*x785))+(((-1.0)*r21*x791))+(((-1.0)*x782*x788))+(((-0.26849)*x779)));
evalcond[7]=((-0.00041)+(((-0.0065)*cj2*x779))+(((-0.00081)*r00*x785))+(((-1.0)*r00*x793))+(((-1.0)*r01*x791))+(((-0.02942)*x786))+((x783*x784))+(((0.08354)*x783))+(((-0.06598)*r02))+(((-1.0)*px))+(((-0.03065)*x779))+(((-1.0)*x786*x788))+(((-0.26849)*x780))+(((-0.00081)*r01*x781))+(((0.00761)*sj2*x779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x799=(cj4*sj5);
IkReal x800=(cj3*r01);
IkReal x801=(cj5*sj4);
IkReal x802=(cj4*cj5);
IkReal x803=(cj3*r00);
IkReal x804=(sj4*sj5);
CheckValue<IkReal> x805=IKPowWithIntegerCheck(cj2,-1);
if(!x805.valid){
continue;
}
if( IKabs(((x805.value)*((((r00*x799))+((r01*x802))+((r00*x801))+(((-1.0)*r01*x804)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x802*x803))+((x800*x801))+((x803*x804))+((r02*sj3))+((x799*x800)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x805.value)*((((r00*x799))+((r01*x802))+((r00*x801))+(((-1.0)*r01*x804))))))+IKsqr(((((-1.0)*x802*x803))+((x800*x801))+((x803*x804))+((r02*sj3))+((x799*x800))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x805.value)*((((r00*x799))+((r01*x802))+((r00*x801))+(((-1.0)*r01*x804))))), ((((-1.0)*x802*x803))+((x800*x801))+((x803*x804))+((r02*sj3))+((x799*x800))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x806=IKsin(j1);
IkReal x807=IKcos(j1);
IkReal x808=(cj4*sj5);
IkReal x809=(cj5*r21);
IkReal x810=(cj5*r00);
IkReal x811=((0.00081)*cj4);
IkReal x812=(sj4*sj5);
IkReal x813=(cj5*r01);
IkReal x814=(cj5*r20);
IkReal x815=((0.00081)*sj4);
IkReal x816=(sj3*sj4);
IkReal x817=((1.0)*cj3);
IkReal x818=((0.08354)*sj5);
IkReal x819=(cj3*sj4);
IkReal x820=((0.02942)*sj5);
IkReal x821=(cj4*x817);
IkReal x822=(sj2*x807);
IkReal x823=(cj2*x807);
IkReal x824=((1.0)*cj4*sj3);
IkReal x825=((1.0)*x806);
evalcond[0]=(((sj4*x814))+((cj4*x809))+(((-1.0)*r21*x812))+((r20*x808))+x823);
evalcond[1]=(((sj4*x810))+(((-1.0)*r01*x812))+((cj4*x813))+((r00*x808))+(((-1.0)*cj2*x825)));
evalcond[2]=(((cj3*r21*x808))+((x809*x819))+((r22*sj3))+(((-1.0)*x814*x821))+(((-1.0)*x825))+((cj3*r20*x812)));
evalcond[3]=((((-1.0)*x807))+((x813*x819))+(((-1.0)*x810*x821))+((r02*sj3))+((cj3*r00*x812))+((cj3*r01*x808)));
evalcond[4]=(((x809*x816))+((r20*sj3*x812))+(((-1.0)*x814*x824))+((r21*sj3*x808))+(((-1.0)*r22*x817))+x822);
evalcond[5]=(((x813*x816))+(((-1.0)*x810*x824))+(((-1.0)*sj2*x825))+((r00*sj3*x812))+(((-1.0)*r02*x817))+((r01*sj3*x808)));
evalcond[6]=((((-1.0)*r20*x820))+(((-0.06598)*r22))+(((-0.00081)*r21*x808))+(((-1.0)*x809*x815))+(((-0.00081)*r20*x812))+(((-0.00761)*x822))+(((-0.02942)*x809))+(((-1.0)*pz))+((x811*x814))+(((0.0065)*x823))+(((0.03065)*x807))+(((-0.26849)*x806))+(((0.08354)*x814))+(((-1.0)*r21*x818)));
evalcond[7]=((-0.00041)+(((-0.02942)*x813))+(((0.00761)*sj2*x806))+(((-0.00081)*r00*x812))+((x810*x811))+(((-0.06598)*r02))+(((-1.0)*px))+(((-0.0065)*cj2*x806))+(((-1.0)*x813*x815))+(((-1.0)*r01*x818))+(((-0.26849)*x807))+(((0.08354)*x810))+(((-0.03065)*x806))+(((-1.0)*r00*x820))+(((-0.00081)*r01*x808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x826=(cj4*sj5);
IkReal x827=((1.0)*r20);
IkReal x828=(cj5*sj4);
IkReal x829=(cj4*cj5);
IkReal x830=(sj4*sj5);
CheckValue<IkReal> x831 = IKatan2WithCheck(IkReal((((r00*x826))+((r00*x828))+((r01*x829))+(((-1.0)*r01*x830)))),IkReal(((((-1.0)*r21*x829))+(((-1.0)*x827*x828))+(((-1.0)*x826*x827))+((r21*x830)))),IKFAST_ATAN2_MAGTHRESH);
if(!x831.valid){
continue;
}
CheckValue<IkReal> x832=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x832.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x831.value)+(((1.5707963267949)*(x832.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x833=IKsin(j1);
IkReal x834=IKcos(j1);
IkReal x835=(cj4*sj5);
IkReal x836=(cj5*r21);
IkReal x837=(cj5*r00);
IkReal x838=((0.00081)*cj4);
IkReal x839=(sj4*sj5);
IkReal x840=(cj5*r01);
IkReal x841=(cj5*r20);
IkReal x842=((0.00081)*sj4);
IkReal x843=(sj3*sj4);
IkReal x844=((1.0)*cj3);
IkReal x845=((0.08354)*sj5);
IkReal x846=(cj3*sj4);
IkReal x847=((0.02942)*sj5);
IkReal x848=(cj4*x844);
IkReal x849=(sj2*x834);
IkReal x850=(cj2*x834);
IkReal x851=((1.0)*cj4*sj3);
IkReal x852=((1.0)*x833);
evalcond[0]=(((sj4*x841))+((r20*x835))+((cj4*x836))+x850+(((-1.0)*r21*x839)));
evalcond[1]=(((sj4*x837))+(((-1.0)*cj2*x852))+((cj4*x840))+((r00*x835))+(((-1.0)*r01*x839)));
evalcond[2]=((((-1.0)*x852))+(((-1.0)*x841*x848))+((r22*sj3))+((x836*x846))+((cj3*r20*x839))+((cj3*r21*x835)));
evalcond[3]=(((cj3*r01*x835))+((x840*x846))+(((-1.0)*x837*x848))+((r02*sj3))+(((-1.0)*x834))+((cj3*r00*x839)));
evalcond[4]=(((r21*sj3*x835))+((x836*x843))+(((-1.0)*x841*x851))+(((-1.0)*r22*x844))+((r20*sj3*x839))+x849);
evalcond[5]=((((-1.0)*r02*x844))+((x840*x843))+((r00*sj3*x839))+((r01*sj3*x835))+(((-1.0)*sj2*x852))+(((-1.0)*x837*x851)));
evalcond[6]=(((x838*x841))+(((-0.06598)*r22))+(((-1.0)*r21*x845))+(((-0.02942)*x836))+(((0.08354)*x841))+(((-1.0)*x836*x842))+(((-1.0)*r20*x847))+(((-0.26849)*x833))+(((-0.00761)*x849))+(((-0.00081)*r20*x839))+(((0.03065)*x834))+(((-1.0)*pz))+(((0.0065)*x850))+(((-0.00081)*r21*x835)));
evalcond[7]=((-0.00041)+(((0.08354)*x837))+(((-0.02942)*x840))+(((-0.0065)*cj2*x833))+(((-0.00081)*r01*x835))+(((-1.0)*x840*x842))+(((0.00761)*sj2*x833))+(((-0.06598)*r02))+(((-0.26849)*x834))+(((-1.0)*px))+((x837*x838))+(((-0.00081)*r00*x839))+(((-0.03065)*x833))+(((-1.0)*r01*x845))+(((-1.0)*r00*x847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x853=(cj4*sj3);
IkReal x854=(r01*sj5);
IkReal x855=(cj5*r01);
IkReal x856=(sj3*sj4);
IkReal x857=((1.0)*cj4);
IkReal x858=(r00*sj5);
IkReal x859=((1.0)*cj5*r00);
if( IKabs(((((-1.0)*sj4*x859))+(((-1.0)*x855*x857))+((sj4*x854))+(((-1.0)*x857*x858)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x853*x859))+((x855*x856))+((x856*x858))+(((-1.0)*cj3*r02))+((x853*x854)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x859))+(((-1.0)*x855*x857))+((sj4*x854))+(((-1.0)*x857*x858))))+IKsqr(((((-1.0)*x853*x859))+((x855*x856))+((x856*x858))+(((-1.0)*cj3*r02))+((x853*x854))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj4*x859))+(((-1.0)*x855*x857))+((sj4*x854))+(((-1.0)*x857*x858))), ((((-1.0)*x853*x859))+((x855*x856))+((x856*x858))+(((-1.0)*cj3*r02))+((x853*x854))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x860=IKsin(j2);
IkReal x861=IKcos(j2);
IkReal x862=(cj4*sj5);
IkReal x863=(cj5*r00);
IkReal x864=(sj4*sj5);
IkReal x865=(cj5*r01);
evalcond[0]=((((-1.0)*r01*x864))+((r00*x862))+((sj4*x863))+((cj4*x865))+x860);
evalcond[1]=((((-1.0)*cj4*sj3*x863))+(((-1.0)*x861))+(((-1.0)*cj3*r02))+((r01*sj3*x862))+((r00*sj3*x864))+((sj3*sj4*x865)));
evalcond[2]=((0.03283)+(((-0.02942)*r00*sj5))+(((-0.00081)*r00*x864))+(((-0.08354)*r01*sj5))+(((0.0065)*x860))+(((-0.06598)*r02))+(((0.08354)*x863))+(((-1.0)*px))+(((-0.02942)*x865))+(((-0.00081)*sj4*x865))+(((0.00081)*cj4*x863))+(((-0.00081)*r01*x862))+(((0.00761)*x861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x866=((1.0)*r20);
IkReal x867=(cj4*sj5);
IkReal x868=(cj5*sj4);
IkReal x869=((1.0)*r10);
IkReal x870=(sj4*sj5);
IkReal x871=((1.0)*cj4*cj5);
j1eval[0]=cj2;
j1eval[1]=((IKabs((((r11*x870))+(((-1.0)*x868*x869))+(((-1.0)*x867*x869))+(((-1.0)*r11*x871)))))+(IKabs((((r21*x870))+(((-1.0)*x866*x867))+(((-1.0)*x866*x868))+(((-1.0)*r21*x871))))));
j1eval[2]=IKsign(cj2);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
j1eval[0]=cj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
j1eval[0]=sj2;
j1eval[1]=cj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x872=((1.0)*r20);
IkReal x873=(cj4*sj5);
IkReal x874=(cj5*sj4);
IkReal x875=((1.0)*r10);
IkReal x876=(sj4*sj5);
IkReal x877=((1.0)*cj4*cj5);
if( IKabs((((r11*x876))+(((-1.0)*x873*x875))+(((-1.0)*x874*x875))+(((-1.0)*r11*x877)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x872*x874))+(((-1.0)*x872*x873))+((r21*x876))+(((-1.0)*r21*x877)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x876))+(((-1.0)*x873*x875))+(((-1.0)*x874*x875))+(((-1.0)*r11*x877))))+IKsqr(((((-1.0)*x872*x874))+(((-1.0)*x872*x873))+((r21*x876))+(((-1.0)*r21*x877))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r11*x876))+(((-1.0)*x873*x875))+(((-1.0)*x874*x875))+(((-1.0)*r11*x877))), ((((-1.0)*x872*x874))+(((-1.0)*x872*x873))+((r21*x876))+(((-1.0)*r21*x877))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x878=IKcos(j1);
IkReal x879=IKsin(j1);
IkReal x880=((0.02942)*cj5);
IkReal x881=((0.00081)*r10);
IkReal x882=(sj4*sj5);
IkReal x883=(cj3*cj4);
IkReal x884=(r21*sj5);
IkReal x885=(cj4*cj5);
IkReal x886=((1.0)*cj5);
IkReal x887=(cj4*sj5);
IkReal x888=(cj5*sj4);
IkReal x889=((0.08354)*cj5);
IkReal x890=((0.00081)*r11);
IkReal x891=((0.02942)*sj5);
IkReal x892=((0.00081)*r20);
IkReal x893=(r11*sj5);
evalcond[0]=(((r20*x888))+((r20*x887))+(((-1.0)*r21*x882))+x878+((r21*x885)));
evalcond[1]=((((-1.0)*r11*x882))+((r11*x885))+((r10*x888))+((r10*x887))+x879);
evalcond[2]=(((x883*x893))+(((-1.0)*r10*x883*x886))+((r12*sj3))+((cj3*r10*x882))+x878+((cj3*r11*x888)));
evalcond[3]=(((r22*sj3))+((x883*x884))+(((-1.0)*x879))+((cj3*r20*x882))+(((-1.0)*r20*x883*x886))+((cj3*r21*x888)));
evalcond[4]=((((-1.0)*x882*x892))+(((-0.06598)*r22))+((r20*x889))+(((0.03715)*x878))+(((-0.00081)*cj4*x884))+(((-1.0)*pz))+(((-0.08354)*x884))+(((-0.00081)*r21*x888))+((x885*x892))+(((-1.0)*r20*x891))+(((-1.0)*r21*x880))+(((-0.26849)*x879)));
evalcond[5]=((0.00041)+((x881*x885))+((r10*x889))+(((0.03715)*x879))+(((-0.06598)*r12))+(((-1.0)*r11*x880))+(((-0.08354)*x893))+(((-1.0)*x881*x882))+(((-1.0)*py))+(((0.26849)*x878))+(((-1.0)*r10*x891))+(((-1.0)*x888*x890))+(((-1.0)*x887*x890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x894=(cj4*cj5);
IkReal x895=(cj4*sj5);
IkReal x896=(cj5*sj4);
IkReal x897=((1.0)*sj4*sj5);
if( IKabs((((r11*x894))+((r10*x896))+((r10*x895))+(((-1.0)*r11*x897)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x896))+((r20*x895))+((r21*x894))+(((-1.0)*r21*x897)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x894))+((r10*x896))+((r10*x895))+(((-1.0)*r11*x897))))+IKsqr((((r20*x896))+((r20*x895))+((r21*x894))+(((-1.0)*r21*x897))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r11*x894))+((r10*x896))+((r10*x895))+(((-1.0)*r11*x897))), (((r20*x896))+((r20*x895))+((r21*x894))+(((-1.0)*r21*x897))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x898=IKcos(j1);
IkReal x899=IKsin(j1);
IkReal x900=((0.02942)*cj5);
IkReal x901=((0.00081)*r10);
IkReal x902=(sj4*sj5);
IkReal x903=(cj3*cj4);
IkReal x904=(r21*sj5);
IkReal x905=(cj4*cj5);
IkReal x906=((1.0)*cj5);
IkReal x907=(cj4*sj5);
IkReal x908=(cj5*sj4);
IkReal x909=((0.08354)*cj5);
IkReal x910=((0.00081)*r11);
IkReal x911=((0.02942)*sj5);
IkReal x912=((0.00081)*r20);
IkReal x913=(r11*sj5);
IkReal x914=((1.0)*x899);
evalcond[0]=(((r21*x905))+((r20*x908))+((r20*x907))+(((-1.0)*r21*x902))+(((-1.0)*x898)));
evalcond[1]=((((-1.0)*r11*x902))+((r11*x905))+(((-1.0)*x914))+((r10*x908))+((r10*x907)));
evalcond[2]=(((x903*x913))+(((-1.0)*r10*x903*x906))+((r12*sj3))+((cj3*r10*x902))+x898+((cj3*r11*x908)));
evalcond[3]=(((x903*x904))+((r22*sj3))+(((-1.0)*x914))+(((-1.0)*r20*x903*x906))+((cj3*r20*x902))+((cj3*r21*x908)));
evalcond[4]=((((-0.00081)*cj4*x904))+(((-0.06598)*r22))+((r20*x909))+(((-1.0)*r20*x911))+(((-0.26849)*x899))+(((-1.0)*x902*x912))+(((-1.0)*r21*x900))+(((-1.0)*pz))+(((0.02415)*x898))+(((-0.00081)*r21*x908))+((x905*x912))+(((-0.08354)*x904)));
evalcond[5]=((0.00041)+(((-1.0)*x908*x910))+((x901*x905))+(((-0.06598)*r12))+(((-1.0)*r11*x900))+(((-1.0)*py))+((r10*x909))+(((0.26849)*x898))+(((-0.08354)*x913))+(((0.02415)*x899))+(((-1.0)*r10*x911))+(((-1.0)*x901*x902))+(((-1.0)*x907*x910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x915=(cj5*sj4);
IkReal x916=(cj4*sj5);
IkReal x917=(cj3*r10);
IkReal x918=(sj4*sj5);
IkReal x919=(cj3*r21);
IkReal x920=(cj4*cj5);
IkReal x921=(cj3*r20);
IkReal x922=((1.0)*cj3*r11);
if( IKabs((((x918*x921))+(((-1.0)*x920*x921))+((r22*sj3))+((x916*x919))+((x915*x919)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x917*x918))+((x917*x920))+(((-1.0)*x915*x922))+(((-1.0)*x916*x922))+(((-1.0)*r12*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x918*x921))+(((-1.0)*x920*x921))+((r22*sj3))+((x916*x919))+((x915*x919))))+IKsqr(((((-1.0)*x917*x918))+((x917*x920))+(((-1.0)*x915*x922))+(((-1.0)*x916*x922))+(((-1.0)*r12*sj3))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((x918*x921))+(((-1.0)*x920*x921))+((r22*sj3))+((x916*x919))+((x915*x919))), ((((-1.0)*x917*x918))+((x917*x920))+(((-1.0)*x915*x922))+(((-1.0)*x916*x922))+(((-1.0)*r12*sj3))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x923=IKcos(j1);
IkReal x924=IKsin(j1);
IkReal x925=((0.02942)*cj5);
IkReal x926=((0.00081)*r10);
IkReal x927=(sj4*sj5);
IkReal x928=(cj4*cj5);
IkReal x929=((1.0)*r10);
IkReal x930=((1.0)*cj3);
IkReal x931=(r21*sj3);
IkReal x932=(cj5*sj4);
IkReal x933=(cj4*sj5);
IkReal x934=(cj3*r21);
IkReal x935=((0.00081)*r11);
IkReal x936=(cj3*r11);
IkReal x937=((0.08354)*cj5);
IkReal x938=(r11*sj3);
IkReal x939=((0.02942)*sj5);
IkReal x940=((0.00081)*r20);
IkReal x941=((0.08354)*sj5);
IkReal x942=(r20*sj3);
IkReal x943=((0.00081)*r21);
evalcond[0]=(((cj3*r10*x927))+(((-1.0)*cj3*x928*x929))+((r12*sj3))+x923+((x933*x936))+((x932*x936)));
evalcond[1]=((((-1.0)*r22*x930))+((x931*x933))+((x931*x932))+(((-1.0)*x928*x942))+x923+((x927*x942)));
evalcond[2]=((((-1.0)*r12*x930))+((r10*sj3*x927))+(((-1.0)*sj3*x928*x929))+x924+((x933*x938))+((x932*x938)));
evalcond[3]=(((r22*sj3))+(((-1.0)*x924))+((cj3*r20*x927))+(((-1.0)*r20*x928*x930))+((x933*x934))+((x932*x934)));
evalcond[4]=(((x928*x940))+(((-1.0)*r21*x925))+(((-0.26849)*x924))+(((-0.06598)*r22))+(((-1.0)*r20*x939))+(((-1.0)*x927*x940))+(((-1.0)*r21*x941))+(((-1.0)*x933*x943))+(((-1.0)*x932*x943))+(((-1.0)*pz))+(((0.02304)*x923))+((r20*x937)));
evalcond[5]=((0.00041)+(((-1.0)*r11*x925))+(((-1.0)*r11*x941))+(((-1.0)*r10*x939))+(((-0.06598)*r12))+((r10*x937))+(((-1.0)*py))+(((-1.0)*x926*x927))+(((0.26849)*x923))+(((-1.0)*x932*x935))+(((-1.0)*x933*x935))+(((0.02304)*x924))+((x926*x928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x944=(cj5*sj4);
IkReal x945=(cj4*sj5);
IkReal x946=(cj3*r10);
IkReal x947=(sj4*sj5);
IkReal x948=(cj3*r21);
IkReal x949=(cj4*cj5);
IkReal x950=(cj3*r20);
IkReal x951=((1.0)*cj3*r11);
if( IKabs((((x945*x948))+((r22*sj3))+((x947*x950))+(((-1.0)*x949*x950))+((x944*x948)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x946*x949))+(((-1.0)*x944*x951))+(((-1.0)*x946*x947))+(((-1.0)*x945*x951))+(((-1.0)*r12*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x945*x948))+((r22*sj3))+((x947*x950))+(((-1.0)*x949*x950))+((x944*x948))))+IKsqr((((x946*x949))+(((-1.0)*x944*x951))+(((-1.0)*x946*x947))+(((-1.0)*x945*x951))+(((-1.0)*r12*sj3))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((x945*x948))+((r22*sj3))+((x947*x950))+(((-1.0)*x949*x950))+((x944*x948))), (((x946*x949))+(((-1.0)*x944*x951))+(((-1.0)*x946*x947))+(((-1.0)*x945*x951))+(((-1.0)*r12*sj3))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x952=IKcos(j1);
IkReal x953=IKsin(j1);
IkReal x954=((0.02942)*cj5);
IkReal x955=((0.00081)*r10);
IkReal x956=(sj4*sj5);
IkReal x957=(cj3*cj4);
IkReal x958=(r21*sj5);
IkReal x959=(cj4*cj5);
IkReal x960=((1.0)*cj5);
IkReal x961=(r10*sj3);
IkReal x962=(cj5*sj4);
IkReal x963=(cj4*sj3);
IkReal x964=((0.08354)*cj5);
IkReal x965=((1.0)*cj3);
IkReal x966=((0.00081)*r11);
IkReal x967=(r11*sj5);
IkReal x968=((0.02942)*sj5);
IkReal x969=((0.00081)*r20);
IkReal x970=(r20*sj3);
IkReal x971=((1.0)*x953);
evalcond[0]=(((cj3*r11*x962))+((cj3*r10*x956))+(((-1.0)*r10*x957*x960))+((x957*x967))+((r12*sj3))+x952);
evalcond[1]=(((cj3*r20*x956))+((cj3*r21*x962))+((r22*sj3))+(((-1.0)*r20*x957*x960))+((x957*x958))+(((-1.0)*x971)));
evalcond[2]=(((r21*sj3*x962))+(((-1.0)*x952))+(((-1.0)*x959*x970))+((x956*x970))+(((-1.0)*r22*x965))+((x958*x963)));
evalcond[3]=((((-1.0)*x959*x961))+((r11*sj3*x962))+((x963*x967))+((x956*x961))+(((-1.0)*r12*x965))+(((-1.0)*x971)));
evalcond[4]=((((-0.00081)*r21*x962))+(((-0.06598)*r22))+(((-1.0)*r20*x968))+(((-1.0)*r21*x954))+(((-0.08354)*x958))+(((-1.0)*x956*x969))+(((0.03826)*x952))+(((-1.0)*pz))+((x959*x969))+((r20*x964))+(((-0.00081)*cj4*x958))+(((-0.26849)*x953)));
evalcond[5]=((0.00041)+((x955*x959))+(((-1.0)*r10*x968))+(((-1.0)*x962*x966))+(((-0.06598)*r12))+(((0.26849)*x952))+(((-0.08354)*x967))+(((0.03826)*x953))+(((-1.0)*py))+(((-1.0)*cj4*sj5*x966))+(((-1.0)*r11*x954))+(((-1.0)*x955*x956))+((r10*x964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x972=(cj4*cj5);
IkReal x973=(r10*sj3);
IkReal x974=((1.0)*sj5);
IkReal x975=(r11*sj3);
IkReal x976=((1.0)*cj5*sj4);
CheckValue<IkReal> x977=IKPowWithIntegerCheck(sj2,-1);
if(!x977.valid){
continue;
}
CheckValue<IkReal> x978=IKPowWithIntegerCheck(cj2,-1);
if(!x978.valid){
continue;
}
if( IKabs(((x977.value)*(((((-1.0)*cj4*x974*x975))+(((-1.0)*sj4*x973*x974))+((cj3*r12))+(((-1.0)*x975*x976))+((x972*x973)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x978.value)*((((r21*sj4*sj5))+(((-1.0)*r20*x976))+(((-1.0)*cj4*r20*x974))+(((-1.0)*r21*x972)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x977.value)*(((((-1.0)*cj4*x974*x975))+(((-1.0)*sj4*x973*x974))+((cj3*r12))+(((-1.0)*x975*x976))+((x972*x973))))))+IKsqr(((x978.value)*((((r21*sj4*sj5))+(((-1.0)*r20*x976))+(((-1.0)*cj4*r20*x974))+(((-1.0)*r21*x972))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x977.value)*(((((-1.0)*cj4*x974*x975))+(((-1.0)*sj4*x973*x974))+((cj3*r12))+(((-1.0)*x975*x976))+((x972*x973))))), ((x978.value)*((((r21*sj4*sj5))+(((-1.0)*r20*x976))+(((-1.0)*cj4*r20*x974))+(((-1.0)*r21*x972))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x979=IKcos(j1);
IkReal x980=IKsin(j1);
IkReal x981=((0.02942)*cj5);
IkReal x982=((0.00081)*r10);
IkReal x983=(sj4*sj5);
IkReal x984=(cj3*cj4);
IkReal x985=(r21*sj5);
IkReal x986=((0.02942)*sj5);
IkReal x987=(cj4*cj5);
IkReal x988=(cj5*r10);
IkReal x989=(cj4*sj5);
IkReal x990=((0.00081)*r11);
IkReal x991=(r10*sj3);
IkReal x992=((1.0)*r20);
IkReal x993=(cj5*r20);
IkReal x994=(cj5*sj4);
IkReal x995=((1.0)*cj3);
IkReal x996=(r11*sj3);
IkReal x997=((0.00081)*r20);
IkReal x998=(r11*sj5);
IkReal x999=(cj2*x979);
IkReal x1000=(sj2*x979);
IkReal x1001=(sj2*x980);
IkReal x1002=(cj2*x980);
evalcond[0]=(((sj4*x993))+((r21*x987))+(((-1.0)*r21*x983))+((r20*x989))+x999);
evalcond[1]=(x1002+((sj4*x988))+(((-1.0)*r11*x983))+((r11*x987))+((r10*x989)));
evalcond[2]=((((-1.0)*x984*x988))+((cj3*r10*x983))+((r12*sj3))+x979+((cj3*r11*x994))+((x984*x998)));
evalcond[3]=((((-1.0)*cj5*x984*x992))+(((-1.0)*x980))+((r22*sj3))+((cj3*r21*x994))+((x984*x985))+((cj3*r20*x983)));
evalcond[4]=((((-1.0)*r22*x995))+x1000+(((-1.0)*sj3*x987*x992))+((r20*sj3*x983))+((r21*sj3*x994))+((cj4*sj3*x985)));
evalcond[5]=(((x994*x996))+((x989*x996))+x1001+((x983*x991))+(((-1.0)*r12*x995))+(((-1.0)*x987*x991)));
evalcond[6]=((((-1.0)*r20*x986))+(((-0.26849)*x980))+(((-1.0)*r21*x981))+(((-0.06598)*r22))+(((0.03065)*x979))+(((0.0065)*x999))+(((-0.00081)*r21*x994))+(((-0.08354)*x985))+(((-0.00761)*x1000))+(((-1.0)*pz))+(((0.08354)*x993))+((x987*x997))+(((-1.0)*x983*x997))+(((-0.00081)*cj4*x985)));
evalcond[7]=((0.00041)+(((-1.0)*r10*x986))+(((0.08354)*x988))+(((-0.08354)*x998))+(((0.26849)*x979))+(((0.03065)*x980))+(((-0.06598)*r12))+(((-1.0)*x990*x994))+(((-1.0)*x982*x983))+(((-0.00761)*x1001))+(((-1.0)*py))+((x982*x987))+(((0.0065)*x1002))+(((-1.0)*x989*x990))+(((-1.0)*r11*x981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1003=(cj4*sj5);
IkReal x1004=((1.0)*r20);
IkReal x1005=(r21*sj4);
IkReal x1006=(cj4*cj5);
CheckValue<IkReal> x1007=IKPowWithIntegerCheck(cj2,-1);
if(!x1007.valid){
continue;
}
if( IKabs((((r22*sj3))+(((-1.0)*cj3*x1004*x1006))+((cj3*cj5*x1005))+((cj3*r20*sj4*sj5))+((cj3*r21*x1003)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1007.value)*(((((-1.0)*cj5*sj4*x1004))+((sj5*x1005))+(((-1.0)*r21*x1006))+(((-1.0)*x1003*x1004)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*sj3))+(((-1.0)*cj3*x1004*x1006))+((cj3*cj5*x1005))+((cj3*r20*sj4*sj5))+((cj3*r21*x1003))))+IKsqr(((x1007.value)*(((((-1.0)*cj5*sj4*x1004))+((sj5*x1005))+(((-1.0)*r21*x1006))+(((-1.0)*x1003*x1004))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r22*sj3))+(((-1.0)*cj3*x1004*x1006))+((cj3*cj5*x1005))+((cj3*r20*sj4*sj5))+((cj3*r21*x1003))), ((x1007.value)*(((((-1.0)*cj5*sj4*x1004))+((sj5*x1005))+(((-1.0)*r21*x1006))+(((-1.0)*x1003*x1004))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1008=IKcos(j1);
IkReal x1009=IKsin(j1);
IkReal x1010=((0.02942)*cj5);
IkReal x1011=((0.00081)*r10);
IkReal x1012=(sj4*sj5);
IkReal x1013=(cj3*cj4);
IkReal x1014=(r21*sj5);
IkReal x1015=((0.02942)*sj5);
IkReal x1016=(cj4*cj5);
IkReal x1017=(cj5*r10);
IkReal x1018=(cj4*sj5);
IkReal x1019=((0.00081)*r11);
IkReal x1020=(r10*sj3);
IkReal x1021=((1.0)*r20);
IkReal x1022=(cj5*r20);
IkReal x1023=(cj5*sj4);
IkReal x1024=((1.0)*cj3);
IkReal x1025=(r11*sj3);
IkReal x1026=((0.00081)*r20);
IkReal x1027=(r11*sj5);
IkReal x1028=(cj2*x1008);
IkReal x1029=(sj2*x1008);
IkReal x1030=(sj2*x1009);
IkReal x1031=(cj2*x1009);
evalcond[0]=((((-1.0)*r21*x1012))+x1028+((r21*x1016))+((sj4*x1022))+((r20*x1018)));
evalcond[1]=(x1031+((sj4*x1017))+((r10*x1018))+((r11*x1016))+(((-1.0)*r11*x1012)));
evalcond[2]=(x1008+(((-1.0)*x1013*x1017))+((r12*sj3))+((cj3*r10*x1012))+((x1013*x1027))+((cj3*r11*x1023)));
evalcond[3]=((((-1.0)*x1009))+((r22*sj3))+((x1013*x1014))+(((-1.0)*cj5*x1013*x1021))+((cj3*r20*x1012))+((cj3*r21*x1023)));
evalcond[4]=((((-1.0)*r22*x1024))+x1029+((r21*sj3*x1023))+(((-1.0)*sj3*x1016*x1021))+((r20*sj3*x1012))+((cj4*sj3*x1014)));
evalcond[5]=((((-1.0)*r12*x1024))+x1030+((x1023*x1025))+((x1018*x1025))+((x1012*x1020))+(((-1.0)*x1016*x1020)));
evalcond[6]=((((0.08354)*x1022))+(((0.0065)*x1028))+(((-0.06598)*r22))+(((-1.0)*r21*x1010))+(((-0.00081)*r21*x1023))+(((-1.0)*r20*x1015))+(((-1.0)*pz))+(((-0.00761)*x1029))+(((0.03065)*x1008))+(((-0.00081)*cj4*x1014))+(((-0.26849)*x1009))+(((-0.08354)*x1014))+((x1016*x1026))+(((-1.0)*x1012*x1026)));
evalcond[7]=((0.00041)+(((-1.0)*x1018*x1019))+(((-1.0)*x1011*x1012))+(((-0.08354)*x1027))+(((-1.0)*x1019*x1023))+(((-0.06598)*r12))+(((-0.00761)*x1030))+(((-1.0)*py))+(((0.03065)*x1009))+(((0.26849)*x1008))+(((0.08354)*x1017))+(((-1.0)*r11*x1010))+(((0.0065)*x1031))+(((-1.0)*r10*x1015))+((x1011*x1016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1032=((1.0)*r20);
IkReal x1033=(cj4*sj5);
IkReal x1034=(cj5*sj4);
IkReal x1035=((1.0)*r10);
IkReal x1036=(sj4*sj5);
IkReal x1037=((1.0)*cj4*cj5);
CheckValue<IkReal> x1038=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x1038.valid){
continue;
}
CheckValue<IkReal> x1039 = IKatan2WithCheck(IkReal(((((-1.0)*x1033*x1035))+(((-1.0)*x1034*x1035))+(((-1.0)*r11*x1037))+((r11*x1036)))),IkReal(((((-1.0)*x1032*x1034))+(((-1.0)*x1032*x1033))+(((-1.0)*r21*x1037))+((r21*x1036)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1039.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1038.value)))+(x1039.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1040=IKcos(j1);
IkReal x1041=IKsin(j1);
IkReal x1042=((0.02942)*cj5);
IkReal x1043=((0.00081)*r10);
IkReal x1044=(sj4*sj5);
IkReal x1045=(cj3*cj4);
IkReal x1046=(r21*sj5);
IkReal x1047=((0.02942)*sj5);
IkReal x1048=(cj4*cj5);
IkReal x1049=(cj5*r10);
IkReal x1050=(cj4*sj5);
IkReal x1051=((0.00081)*r11);
IkReal x1052=(r10*sj3);
IkReal x1053=((1.0)*r20);
IkReal x1054=(cj5*r20);
IkReal x1055=(cj5*sj4);
IkReal x1056=((1.0)*cj3);
IkReal x1057=(r11*sj3);
IkReal x1058=((0.00081)*r20);
IkReal x1059=(r11*sj5);
IkReal x1060=(cj2*x1040);
IkReal x1061=(sj2*x1040);
IkReal x1062=(sj2*x1041);
IkReal x1063=(cj2*x1041);
evalcond[0]=(x1060+((r20*x1050))+((r21*x1048))+(((-1.0)*r21*x1044))+((sj4*x1054)));
evalcond[1]=(x1063+((r11*x1048))+(((-1.0)*r11*x1044))+((r10*x1050))+((sj4*x1049)));
evalcond[2]=(x1040+((cj3*r11*x1055))+((cj3*r10*x1044))+((r12*sj3))+(((-1.0)*x1045*x1049))+((x1045*x1059)));
evalcond[3]=(((r22*sj3))+(((-1.0)*cj5*x1045*x1053))+((cj3*r21*x1055))+((cj3*r20*x1044))+(((-1.0)*x1041))+((x1045*x1046)));
evalcond[4]=(((cj4*sj3*x1046))+x1061+(((-1.0)*r22*x1056))+(((-1.0)*sj3*x1048*x1053))+((r21*sj3*x1055))+((r20*sj3*x1044)));
evalcond[5]=(((x1044*x1052))+x1062+((x1055*x1057))+(((-1.0)*r12*x1056))+((x1050*x1057))+(((-1.0)*x1048*x1052)));
evalcond[6]=((((-0.00761)*x1061))+(((-0.06598)*r22))+(((0.03065)*x1040))+(((-1.0)*x1044*x1058))+((x1048*x1058))+(((-0.00081)*cj4*x1046))+(((0.0065)*x1060))+(((-1.0)*pz))+(((0.08354)*x1054))+(((-0.08354)*x1046))+(((-0.00081)*r21*x1055))+(((-0.26849)*x1041))+(((-1.0)*r21*x1042))+(((-1.0)*r20*x1047)));
evalcond[7]=((0.00041)+(((-0.00761)*x1062))+((x1043*x1048))+(((-1.0)*r10*x1047))+(((0.26849)*x1040))+(((0.03065)*x1041))+(((-0.06598)*r12))+(((-1.0)*x1043*x1044))+(((-1.0)*r11*x1042))+(((0.08354)*x1049))+(((0.0065)*x1063))+(((-1.0)*py))+(((-0.08354)*x1059))+(((-1.0)*x1050*x1051))+(((-1.0)*x1051*x1055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1064=(cj4*r00);
IkReal x1065=(cj5*sj4);
IkReal x1066=((1.0)*r01);
IkReal x1067=(sj4*sj5);
if( IKabs((((sj5*x1064))+((cj4*cj5*r01))+(((-1.0)*x1066*x1067))+((r00*x1065)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj3*x1067))+(((-1.0)*cj4*sj3*sj5*x1066))+((cj3*r02))+((cj5*sj3*x1064))+(((-1.0)*sj3*x1065*x1066)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj5*x1064))+((cj4*cj5*r01))+(((-1.0)*x1066*x1067))+((r00*x1065))))+IKsqr(((((-1.0)*r00*sj3*x1067))+(((-1.0)*cj4*sj3*sj5*x1066))+((cj3*r02))+((cj5*sj3*x1064))+(((-1.0)*sj3*x1065*x1066))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj5*x1064))+((cj4*cj5*r01))+(((-1.0)*x1066*x1067))+((r00*x1065))), ((((-1.0)*r00*sj3*x1067))+(((-1.0)*cj4*sj3*sj5*x1066))+((cj3*r02))+((cj5*sj3*x1064))+(((-1.0)*sj3*x1065*x1066))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[3];
IkReal x1068=IKsin(j2);
IkReal x1069=IKcos(j2);
IkReal x1070=(cj4*sj5);
IkReal x1071=(cj5*r00);
IkReal x1072=(sj4*sj5);
IkReal x1073=(cj5*r01);
evalcond[0]=(((r00*x1070))+((cj4*x1073))+((sj4*x1071))+(((-1.0)*x1068))+(((-1.0)*r01*x1072)));
evalcond[1]=(((r01*sj3*x1070))+x1069+((sj3*sj4*x1073))+(((-1.0)*cj4*sj3*x1071))+(((-1.0)*cj3*r02))+((r00*sj3*x1072)));
evalcond[2]=((-0.03283)+(((-0.02942)*r00*sj5))+(((-0.00081)*sj4*x1073))+(((-0.00761)*x1069))+(((-0.08354)*r01*sj5))+(((-0.0065)*x1068))+(((0.08354)*x1071))+(((-0.06598)*r02))+(((-1.0)*px))+(((0.00081)*cj4*x1071))+(((-0.00081)*r00*x1072))+(((-0.00081)*r01*x1070))+(((-0.02942)*x1073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1074=((1.0)*cj4);
IkReal x1075=(cj5*sj4);
IkReal x1076=(sj4*sj5);
j1eval[0]=cj2;
j1eval[1]=((IKabs(((((-1.0)*r11*x1076))+((cj4*cj5*r11))+((r10*x1075))+((cj4*r10*sj5)))))+(IKabs(((((-1.0)*cj5*r21*x1074))+(((-1.0)*r20*sj5*x1074))+(((-1.0)*r20*x1075))+((r21*x1076))))));
j1eval[2]=IKsign(cj2);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
j1eval[0]=cj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
j1eval[0]=sj2;
j1eval[1]=cj2;
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1077=((1.0)*cj4);
IkReal x1078=(cj5*sj4);
IkReal x1079=(sj4*sj5);
if( IKabs(((((-1.0)*r11*x1079))+((cj4*cj5*r11))+((r10*x1078))+((cj4*r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r21*x1077))+(((-1.0)*r20*sj5*x1077))+(((-1.0)*r20*x1078))+((r21*x1079)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x1079))+((cj4*cj5*r11))+((r10*x1078))+((cj4*r10*sj5))))+IKsqr(((((-1.0)*cj5*r21*x1077))+(((-1.0)*r20*sj5*x1077))+(((-1.0)*r20*x1078))+((r21*x1079))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r11*x1079))+((cj4*cj5*r11))+((r10*x1078))+((cj4*r10*sj5))), ((((-1.0)*cj5*r21*x1077))+(((-1.0)*r20*sj5*x1077))+(((-1.0)*r20*x1078))+((r21*x1079))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1080=IKcos(j1);
IkReal x1081=IKsin(j1);
IkReal x1082=((0.02942)*cj5);
IkReal x1083=((0.00081)*r10);
IkReal x1084=(sj4*sj5);
IkReal x1085=(cj3*cj4);
IkReal x1086=(r21*sj5);
IkReal x1087=(cj4*cj5);
IkReal x1088=((1.0)*cj5);
IkReal x1089=(cj4*sj5);
IkReal x1090=(cj5*sj4);
IkReal x1091=((0.08354)*cj5);
IkReal x1092=((0.00081)*r11);
IkReal x1093=((0.02942)*sj5);
IkReal x1094=((0.00081)*r20);
IkReal x1095=(r11*sj5);
IkReal x1096=((1.0)*x1081);
evalcond[0]=(x1080+(((-1.0)*r21*x1084))+((r20*x1089))+((r20*x1090))+((r21*x1087)));
evalcond[1]=((((-1.0)*r11*x1084))+((r10*x1090))+(((-1.0)*x1096))+((r10*x1089))+((r11*x1087)));
evalcond[2]=((((-1.0)*r20*x1085*x1088))+((r22*sj3))+(((-1.0)*x1096))+((cj3*r21*x1090))+((x1085*x1086))+((cj3*r20*x1084)));
evalcond[3]=(((x1085*x1095))+(((-1.0)*x1080))+((cj3*r10*x1084))+((r12*sj3))+(((-1.0)*r10*x1085*x1088))+((cj3*r11*x1090)));
evalcond[4]=((((-1.0)*r21*x1082))+((x1087*x1094))+(((-0.06598)*r22))+(((0.03715)*x1080))+(((-1.0)*x1084*x1094))+(((-0.00081)*cj4*x1086))+(((-1.0)*pz))+(((-0.08354)*x1086))+(((-0.26849)*x1081))+(((-0.00081)*r21*x1090))+(((-1.0)*r20*x1093))+((r20*x1091)));
evalcond[5]=((-0.00041)+(((-1.0)*r11*x1082))+(((-1.0)*x1090*x1092))+((r10*x1091))+(((-0.08354)*x1095))+(((-0.06598)*r12))+(((-1.0)*x1089*x1092))+(((-0.03715)*x1081))+(((-1.0)*py))+(((-0.26849)*x1080))+(((-1.0)*r10*x1093))+(((-1.0)*x1083*x1084))+((x1083*x1087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1097=((1.0)*r10);
IkReal x1098=(cj5*sj4);
IkReal x1099=(cj4*sj5);
IkReal x1100=(sj4*sj5);
IkReal x1101=(cj4*cj5);
if( IKabs(((((-1.0)*x1097*x1098))+(((-1.0)*x1097*x1099))+(((-1.0)*r11*x1101))+((r11*x1100)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x1100))+((r21*x1101))+((r20*x1099))+((r20*x1098)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1097*x1098))+(((-1.0)*x1097*x1099))+(((-1.0)*r11*x1101))+((r11*x1100))))+IKsqr(((((-1.0)*r21*x1100))+((r21*x1101))+((r20*x1099))+((r20*x1098))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*x1097*x1098))+(((-1.0)*x1097*x1099))+(((-1.0)*r11*x1101))+((r11*x1100))), ((((-1.0)*r21*x1100))+((r21*x1101))+((r20*x1099))+((r20*x1098))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1102=IKsin(j1);
IkReal x1103=IKcos(j1);
IkReal x1104=((0.02942)*cj5);
IkReal x1105=((0.00081)*r10);
IkReal x1106=(sj4*sj5);
IkReal x1107=(cj3*cj4);
IkReal x1108=(r21*sj5);
IkReal x1109=(cj4*cj5);
IkReal x1110=((1.0)*cj5);
IkReal x1111=(cj4*sj5);
IkReal x1112=(cj5*sj4);
IkReal x1113=((0.08354)*cj5);
IkReal x1114=((0.00081)*r11);
IkReal x1115=((0.02942)*sj5);
IkReal x1116=((0.00081)*r20);
IkReal x1117=(r11*sj5);
IkReal x1118=((1.0)*x1103);
evalcond[0]=(x1102+(((-1.0)*r11*x1106))+((r11*x1109))+((r10*x1111))+((r10*x1112)));
evalcond[1]=(((r20*x1111))+((r20*x1112))+(((-1.0)*r21*x1106))+((r21*x1109))+(((-1.0)*x1118)));
evalcond[2]=(((cj3*r21*x1112))+((cj3*r20*x1106))+(((-1.0)*r20*x1107*x1110))+((r22*sj3))+(((-1.0)*x1102))+((x1107*x1108)));
evalcond[3]=((((-1.0)*r10*x1107*x1110))+((r12*sj3))+((cj3*r11*x1112))+((cj3*r10*x1106))+(((-1.0)*x1118))+((x1107*x1117)));
evalcond[4]=(((x1109*x1116))+((r20*x1113))+(((-0.06598)*r22))+(((-1.0)*r21*x1104))+(((-0.00081)*cj4*x1108))+(((-1.0)*r20*x1115))+(((-0.08354)*x1108))+(((-1.0)*pz))+(((-0.00081)*r21*x1112))+(((-0.26849)*x1102))+(((-1.0)*x1106*x1116))+(((0.02415)*x1103)));
evalcond[5]=((-0.00041)+(((-1.0)*r11*x1104))+((x1105*x1109))+(((-0.06598)*r12))+(((-1.0)*x1112*x1114))+(((-1.0)*py))+(((-0.08354)*x1117))+(((-0.26849)*x1103))+(((-0.02415)*x1102))+(((-1.0)*x1111*x1114))+(((-1.0)*r10*x1115))+((r10*x1113))+(((-1.0)*x1105*x1106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1119=((1.0)*sj3);
IkReal x1120=(cj4*r21*sj5);
IkReal x1121=(r20*sj4*sj5);
IkReal x1122=(cj5*r21*sj4);
IkReal x1123=(cj4*cj5*r20);
if( IKabs((((r22*sj3))+(((-1.0)*cj3*x1123))+((cj3*x1121))+((cj3*x1122))+((cj3*x1120)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj3*r22))+(((-1.0)*x1119*x1120))+(((-1.0)*x1119*x1122))+(((-1.0)*x1119*x1121))+((sj3*x1123)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*sj3))+(((-1.0)*cj3*x1123))+((cj3*x1121))+((cj3*x1122))+((cj3*x1120))))+IKsqr((((cj3*r22))+(((-1.0)*x1119*x1120))+(((-1.0)*x1119*x1122))+(((-1.0)*x1119*x1121))+((sj3*x1123))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r22*sj3))+(((-1.0)*cj3*x1123))+((cj3*x1121))+((cj3*x1122))+((cj3*x1120))), (((cj3*r22))+(((-1.0)*x1119*x1120))+(((-1.0)*x1119*x1122))+(((-1.0)*x1119*x1121))+((sj3*x1123))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1124=IKcos(j1);
IkReal x1125=IKsin(j1);
IkReal x1126=((0.02942)*cj5);
IkReal x1127=((0.00081)*r10);
IkReal x1128=(sj4*sj5);
IkReal x1129=(cj3*cj4);
IkReal x1130=(r21*sj5);
IkReal x1131=(cj4*cj5);
IkReal x1132=((1.0)*cj5);
IkReal x1133=(r10*sj3);
IkReal x1134=(cj5*sj4);
IkReal x1135=(cj4*sj3);
IkReal x1136=((1.0)*cj3);
IkReal x1137=((0.00081)*r11);
IkReal x1138=((0.08354)*cj5);
IkReal x1139=(r11*sj5);
IkReal x1140=((0.02942)*sj5);
IkReal x1141=((0.00081)*r20);
IkReal x1142=(r20*sj3);
IkReal x1143=((1.0)*x1125);
evalcond[0]=(((x1128*x1142))+x1124+((x1130*x1135))+(((-1.0)*x1131*x1142))+((r21*sj3*x1134))+(((-1.0)*r22*x1136)));
evalcond[1]=(((cj3*r21*x1134))+((cj3*r20*x1128))+((x1129*x1130))+((r22*sj3))+(((-1.0)*x1143))+(((-1.0)*r20*x1129*x1132)));
evalcond[2]=(((x1129*x1139))+(((-1.0)*r10*x1129*x1132))+((r12*sj3))+(((-1.0)*x1124))+((cj3*r10*x1128))+((cj3*r11*x1134)));
evalcond[3]=((((-1.0)*r12*x1136))+(((-1.0)*x1131*x1133))+((x1135*x1139))+((r11*sj3*x1134))+(((-1.0)*x1143))+((x1128*x1133)));
evalcond[4]=((((-1.0)*x1128*x1141))+(((-0.00081)*r21*x1134))+(((-0.06598)*r22))+((x1131*x1141))+(((-1.0)*pz))+(((-0.08354)*x1130))+(((-1.0)*r20*x1140))+(((-0.00081)*cj4*x1130))+(((0.02304)*x1124))+(((-0.26849)*x1125))+(((-1.0)*r21*x1126))+((r20*x1138)));
evalcond[5]=((-0.00041)+((r10*x1138))+(((-1.0)*r11*x1126))+(((-0.06598)*r12))+(((-1.0)*cj4*sj5*x1137))+(((-1.0)*x1127*x1128))+(((-1.0)*r10*x1140))+(((-1.0)*py))+(((-0.08354)*x1139))+(((-1.0)*x1134*x1137))+(((-0.02304)*x1125))+(((-0.26849)*x1124))+((x1127*x1131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1144=(r10*sj3);
IkReal x1145=(cj4*cj5);
IkReal x1146=(cj3*sj4);
IkReal x1147=(cj5*r11);
IkReal x1148=((1.0)*sj4);
IkReal x1149=(cj4*r11*sj5);
if( IKabs(((((-1.0)*sj5*x1144*x1148))+((cj3*r12))+(((-1.0)*sj3*x1149))+(((-1.0)*sj3*x1147*x1148))+((x1144*x1145)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj3*r10*x1145))+((x1146*x1147))+((r10*sj5*x1146))+((cj3*x1149))+((r12*sj3)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj5*x1144*x1148))+((cj3*r12))+(((-1.0)*sj3*x1149))+(((-1.0)*sj3*x1147*x1148))+((x1144*x1145))))+IKsqr(((((-1.0)*cj3*r10*x1145))+((x1146*x1147))+((r10*sj5*x1146))+((cj3*x1149))+((r12*sj3))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*sj5*x1144*x1148))+((cj3*r12))+(((-1.0)*sj3*x1149))+(((-1.0)*sj3*x1147*x1148))+((x1144*x1145))), ((((-1.0)*cj3*r10*x1145))+((x1146*x1147))+((r10*sj5*x1146))+((cj3*x1149))+((r12*sj3))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1150=IKsin(j1);
IkReal x1151=IKcos(j1);
IkReal x1152=((0.02942)*cj5);
IkReal x1153=((0.00081)*r10);
IkReal x1154=(sj4*sj5);
IkReal x1155=(cj4*cj5);
IkReal x1156=((1.0)*r10);
IkReal x1157=((1.0)*cj3);
IkReal x1158=((0.08354)*cj5);
IkReal x1159=((0.02942)*sj5);
IkReal x1160=((0.00081)*r20);
IkReal x1161=((0.08354)*sj5);
IkReal x1162=(r20*sj3);
IkReal x1163=((1.0)*x1151);
IkReal x1164=(cj4*r21*sj5);
IkReal x1165=(cj5*r11*sj4);
IkReal x1166=(cj4*r11*sj5);
IkReal x1167=(cj5*r21*sj4);
evalcond[0]=(x1150+((r10*sj3*x1154))+(((-1.0)*sj3*x1155*x1156))+(((-1.0)*r12*x1157))+((sj3*x1166))+((sj3*x1165)));
evalcond[1]=(((r22*sj3))+(((-1.0)*x1150))+(((-1.0)*r20*x1155*x1157))+((cj3*x1164))+((cj3*x1167))+((cj3*r20*x1154)));
evalcond[2]=((((-1.0)*cj3*x1155*x1156))+((cj3*r10*x1154))+((r12*sj3))+((cj3*x1166))+((cj3*x1165))+(((-1.0)*x1163)));
evalcond[3]=((((-1.0)*x1155*x1162))+((x1154*x1162))+(((-1.0)*r22*x1157))+(((-1.0)*x1163))+((sj3*x1164))+((sj3*x1167)));
evalcond[4]=((((-1.0)*r21*x1161))+(((-0.00081)*x1164))+(((-0.00081)*x1167))+(((-0.06598)*r22))+((x1155*x1160))+(((0.03826)*x1151))+(((-0.26849)*x1150))+((r20*x1158))+(((-1.0)*pz))+(((-1.0)*r21*x1152))+(((-1.0)*r20*x1159))+(((-1.0)*x1154*x1160)));
evalcond[5]=((-0.00041)+(((-0.00081)*x1165))+(((-0.00081)*x1166))+(((-0.06598)*r12))+(((-0.03826)*x1150))+(((-0.26849)*x1151))+((x1153*x1155))+(((-1.0)*r11*x1161))+(((-1.0)*py))+(((-1.0)*r11*x1152))+(((-1.0)*r10*x1159))+(((-1.0)*x1153*x1154))+((r10*x1158)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1168=(cj4*sj5);
IkReal x1169=((1.0)*r20);
IkReal x1170=(r11*sj3);
IkReal x1171=(r10*sj3);
IkReal x1172=(cj5*sj4);
IkReal x1173=(sj4*sj5);
IkReal x1174=((1.0)*cj4*cj5);
CheckValue<IkReal> x1175=IKPowWithIntegerCheck(sj2,-1);
if(!x1175.valid){
continue;
}
CheckValue<IkReal> x1176=IKPowWithIntegerCheck(cj2,-1);
if(!x1176.valid){
continue;
}
if( IKabs(((x1175.value)*((((x1168*x1170))+(((-1.0)*x1171*x1174))+(((-1.0)*cj3*r12))+((x1170*x1172))+((x1171*x1173)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1176.value)*(((((-1.0)*r21*x1174))+(((-1.0)*x1168*x1169))+((r21*x1173))+(((-1.0)*x1169*x1172)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1175.value)*((((x1168*x1170))+(((-1.0)*x1171*x1174))+(((-1.0)*cj3*r12))+((x1170*x1172))+((x1171*x1173))))))+IKsqr(((x1176.value)*(((((-1.0)*r21*x1174))+(((-1.0)*x1168*x1169))+((r21*x1173))+(((-1.0)*x1169*x1172))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x1175.value)*((((x1168*x1170))+(((-1.0)*x1171*x1174))+(((-1.0)*cj3*r12))+((x1170*x1172))+((x1171*x1173))))), ((x1176.value)*(((((-1.0)*r21*x1174))+(((-1.0)*x1168*x1169))+((r21*x1173))+(((-1.0)*x1169*x1172))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1177=IKsin(j1);
IkReal x1178=IKcos(j1);
IkReal x1179=((0.02942)*cj5);
IkReal x1180=((0.00081)*r10);
IkReal x1181=(sj4*sj5);
IkReal x1182=(cj3*cj4);
IkReal x1183=(r21*sj5);
IkReal x1184=((0.02942)*sj5);
IkReal x1185=(cj4*cj5);
IkReal x1186=(r11*sj5);
IkReal x1187=(cj5*r10);
IkReal x1188=(r10*sj3);
IkReal x1189=(cj4*sj5);
IkReal x1190=(cj5*r20);
IkReal x1191=(cj4*sj3);
IkReal x1192=((1.0)*cj3);
IkReal x1193=((0.00081)*cj4);
IkReal x1194=((0.00081)*r20);
IkReal x1195=(r20*sj3);
IkReal x1196=(sj2*x1178);
IkReal x1197=(cj2*x1178);
IkReal x1198=((1.0)*x1177);
IkReal x1199=(cj5*r11*sj4);
IkReal x1200=(cj5*r21*sj4);
evalcond[0]=(x1197+((sj4*x1190))+(((-1.0)*r21*x1181))+((r21*x1185))+((r20*x1189)));
evalcond[1]=(((sj4*x1187))+((r10*x1189))+(((-1.0)*cj2*x1198))+((r11*x1185))+(((-1.0)*r11*x1181)));
evalcond[2]=(((x1182*x1183))+((cj3*r20*x1181))+((r22*sj3))+(((-1.0)*x1182*x1190))+(((-1.0)*x1198))+((cj3*x1200)));
evalcond[3]=(((x1182*x1186))+(((-1.0)*x1182*x1187))+((r12*sj3))+((cj3*x1199))+((cj3*r10*x1181))+(((-1.0)*x1178)));
evalcond[4]=(x1196+((x1183*x1191))+(((-1.0)*r22*x1192))+(((-1.0)*x1185*x1195))+((sj3*x1200))+((x1181*x1195)));
evalcond[5]=((((-1.0)*sj2*x1198))+((x1186*x1191))+(((-1.0)*x1185*x1188))+((x1181*x1188))+((sj3*x1199))+(((-1.0)*r12*x1192)));
evalcond[6]=((((-0.00081)*x1200))+(((-1.0)*r21*x1179))+(((-0.26849)*x1177))+(((-1.0)*x1181*x1194))+(((-0.06598)*r22))+(((0.0065)*x1197))+((x1185*x1194))+(((-1.0)*pz))+(((-1.0)*x1183*x1193))+(((-0.08354)*x1183))+(((0.08354)*x1190))+(((-1.0)*r20*x1184))+(((0.03065)*x1178))+(((-0.00761)*x1196)));
evalcond[7]=((-0.00041)+(((-0.26849)*x1178))+(((0.00761)*sj2*x1177))+((x1180*x1185))+(((-0.03065)*x1177))+(((-0.06598)*r12))+(((-1.0)*r11*x1179))+(((-1.0)*x1186*x1193))+(((-1.0)*r10*x1184))+(((-1.0)*py))+(((-0.0065)*cj2*x1177))+(((-1.0)*x1180*x1181))+(((-0.08354)*x1186))+(((-0.00081)*x1199))+(((0.08354)*x1187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1201=(cj3*sj4);
IkReal x1202=(cj5*r11);
IkReal x1203=(r10*sj5);
IkReal x1204=(cj3*cj4);
IkReal x1205=(r11*sj5);
IkReal x1206=(cj5*r10);
CheckValue<IkReal> x1207=IKPowWithIntegerCheck(cj2,-1);
if(!x1207.valid){
continue;
}
if( IKabs(((x1207.value)*((((sj4*x1206))+(((-1.0)*sj4*x1205))+((cj4*x1202))+((cj4*x1203)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1204*x1205))+(((-1.0)*x1204*x1206))+((r12*sj3))+((x1201*x1202))+((x1201*x1203)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1207.value)*((((sj4*x1206))+(((-1.0)*sj4*x1205))+((cj4*x1202))+((cj4*x1203))))))+IKsqr((((x1204*x1205))+(((-1.0)*x1204*x1206))+((r12*sj3))+((x1201*x1202))+((x1201*x1203))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x1207.value)*((((sj4*x1206))+(((-1.0)*sj4*x1205))+((cj4*x1202))+((cj4*x1203))))), (((x1204*x1205))+(((-1.0)*x1204*x1206))+((r12*sj3))+((x1201*x1202))+((x1201*x1203))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1208=IKsin(j1);
IkReal x1209=IKcos(j1);
IkReal x1210=((0.02942)*cj5);
IkReal x1211=((0.00081)*r10);
IkReal x1212=(sj4*sj5);
IkReal x1213=(cj3*cj4);
IkReal x1214=(r21*sj5);
IkReal x1215=((0.02942)*sj5);
IkReal x1216=(cj4*cj5);
IkReal x1217=(r11*sj5);
IkReal x1218=(cj5*r10);
IkReal x1219=(r10*sj3);
IkReal x1220=(cj4*sj5);
IkReal x1221=(cj5*r20);
IkReal x1222=(cj4*sj3);
IkReal x1223=((1.0)*cj3);
IkReal x1224=((0.00081)*cj4);
IkReal x1225=((0.00081)*r20);
IkReal x1226=(r20*sj3);
IkReal x1227=(sj2*x1209);
IkReal x1228=(cj2*x1209);
IkReal x1229=((1.0)*x1208);
IkReal x1230=(cj5*r11*sj4);
IkReal x1231=(cj5*r21*sj4);
evalcond[0]=(((r20*x1220))+x1228+((sj4*x1221))+((r21*x1216))+(((-1.0)*r21*x1212)));
evalcond[1]=(((r11*x1216))+((sj4*x1218))+(((-1.0)*r11*x1212))+((r10*x1220))+(((-1.0)*cj2*x1229)));
evalcond[2]=(((cj3*x1231))+((x1213*x1214))+(((-1.0)*x1229))+((r22*sj3))+(((-1.0)*x1213*x1221))+((cj3*r20*x1212)));
evalcond[3]=(((cj3*x1230))+((x1213*x1217))+(((-1.0)*x1213*x1218))+((cj3*r10*x1212))+(((-1.0)*x1209))+((r12*sj3)));
evalcond[4]=(((x1214*x1222))+x1227+((sj3*x1231))+(((-1.0)*x1216*x1226))+(((-1.0)*r22*x1223))+((x1212*x1226)));
evalcond[5]=(((x1212*x1219))+((x1217*x1222))+((sj3*x1230))+(((-1.0)*x1216*x1219))+(((-1.0)*r12*x1223))+(((-1.0)*sj2*x1229)));
evalcond[6]=((((-0.00761)*x1227))+(((-1.0)*x1212*x1225))+(((-0.06598)*r22))+(((0.03065)*x1209))+((x1216*x1225))+(((-0.08354)*x1214))+(((-1.0)*x1214*x1224))+(((-0.00081)*x1231))+(((-1.0)*pz))+(((0.0065)*x1228))+(((0.08354)*x1221))+(((-1.0)*r20*x1215))+(((-1.0)*r21*x1210))+(((-0.26849)*x1208)));
evalcond[7]=((-0.00041)+(((-0.03065)*x1208))+(((-0.08354)*x1217))+(((-0.00081)*x1230))+(((-0.06598)*r12))+(((-1.0)*py))+(((-1.0)*r10*x1215))+(((-1.0)*x1211*x1212))+(((-0.0065)*cj2*x1208))+(((-1.0)*x1217*x1224))+((x1211*x1216))+(((-0.26849)*x1209))+(((0.08354)*x1218))+(((-1.0)*r11*x1210))+(((0.00761)*sj2*x1208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1232=((1.0)*r20);
IkReal x1233=(cj4*sj5);
IkReal x1234=(cj5*sj4);
IkReal x1235=(cj4*cj5);
IkReal x1236=(sj4*sj5);
CheckValue<IkReal> x1237 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1236))+((r10*x1233))+((r10*x1234))+((r11*x1235)))),IkReal(((((-1.0)*r21*x1235))+((r21*x1236))+(((-1.0)*x1232*x1233))+(((-1.0)*x1232*x1234)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1237.valid){
continue;
}
CheckValue<IkReal> x1238=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x1238.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1237.value)+(((1.5707963267949)*(x1238.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[8];
IkReal x1239=IKsin(j1);
IkReal x1240=IKcos(j1);
IkReal x1241=((0.02942)*cj5);
IkReal x1242=((0.00081)*r10);
IkReal x1243=(sj4*sj5);
IkReal x1244=(cj3*cj4);
IkReal x1245=(r21*sj5);
IkReal x1246=((0.02942)*sj5);
IkReal x1247=(cj4*cj5);
IkReal x1248=(r11*sj5);
IkReal x1249=(cj5*r10);
IkReal x1250=(r10*sj3);
IkReal x1251=(cj4*sj5);
IkReal x1252=(cj5*r20);
IkReal x1253=(cj4*sj3);
IkReal x1254=((1.0)*cj3);
IkReal x1255=((0.00081)*cj4);
IkReal x1256=((0.00081)*r20);
IkReal x1257=(r20*sj3);
IkReal x1258=(sj2*x1240);
IkReal x1259=(cj2*x1240);
IkReal x1260=((1.0)*x1239);
IkReal x1261=(cj5*r11*sj4);
IkReal x1262=(cj5*r21*sj4);
evalcond[0]=(x1259+((sj4*x1252))+((r21*x1247))+((r20*x1251))+(((-1.0)*r21*x1243)));
evalcond[1]=((((-1.0)*r11*x1243))+((r10*x1251))+(((-1.0)*cj2*x1260))+((r11*x1247))+((sj4*x1249)));
evalcond[2]=(((r22*sj3))+((cj3*x1262))+(((-1.0)*x1244*x1252))+((x1244*x1245))+((cj3*r20*x1243))+(((-1.0)*x1260)));
evalcond[3]=((((-1.0)*x1240))+((cj3*x1261))+((x1244*x1248))+((r12*sj3))+((cj3*r10*x1243))+(((-1.0)*x1244*x1249)));
evalcond[4]=(x1258+(((-1.0)*x1247*x1257))+((x1243*x1257))+((x1245*x1253))+(((-1.0)*r22*x1254))+((sj3*x1262)));
evalcond[5]=((((-1.0)*r12*x1254))+(((-1.0)*x1247*x1250))+((x1243*x1250))+(((-1.0)*sj2*x1260))+((x1248*x1253))+((sj3*x1261)));
evalcond[6]=(((x1247*x1256))+(((-0.00081)*x1262))+(((-0.26849)*x1239))+(((-0.06598)*r22))+(((0.0065)*x1259))+(((0.08354)*x1252))+(((-1.0)*r21*x1241))+(((-1.0)*r20*x1246))+(((-1.0)*x1245*x1255))+(((-1.0)*pz))+(((-0.00761)*x1258))+(((-1.0)*x1243*x1256))+(((0.03065)*x1240))+(((-0.08354)*x1245)));
evalcond[7]=((-0.00041)+(((-0.00081)*x1261))+(((-0.0065)*cj2*x1239))+(((-0.06598)*r12))+(((-1.0)*x1248*x1255))+(((0.00761)*sj2*x1239))+(((-1.0)*x1242*x1243))+(((-1.0)*r11*x1241))+(((-1.0)*py))+(((-0.26849)*x1240))+(((-1.0)*r10*x1246))+((x1242*x1247))+(((-0.03065)*x1239))+(((0.08354)*x1249))+(((-0.08354)*x1248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1263=(cj3*cj5);
IkReal x1264=((1.0)*cj3*sj4);
IkReal x1265=(cj3*cj4*sj5);
CheckValue<IkReal> x1266=IKPowWithIntegerCheck(sj0,-1);
if(!x1266.valid){
continue;
}
if( IKabs((((r21*x1265))+((r22*sj3))+((r21*sj4*x1263))+(((-1.0)*cj4*r20*x1263))+((cj3*r20*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1266.value)*(((((-1.0)*r11*sj4*x1263))+(((-1.0)*r10*sj5*x1264))+((cj4*r10*x1263))+(((-1.0)*r11*x1265))+(((-1.0)*r12*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r21*x1265))+((r22*sj3))+((r21*sj4*x1263))+(((-1.0)*cj4*r20*x1263))+((cj3*r20*sj4*sj5))))+IKsqr(((x1266.value)*(((((-1.0)*r11*sj4*x1263))+(((-1.0)*r10*sj5*x1264))+((cj4*r10*x1263))+(((-1.0)*r11*x1265))+(((-1.0)*r12*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r21*x1265))+((r22*sj3))+((r21*sj4*x1263))+(((-1.0)*cj4*r20*x1263))+((cj3*r20*sj4*sj5))), ((x1266.value)*(((((-1.0)*r11*sj4*x1263))+(((-1.0)*r10*sj5*x1264))+((cj4*r10*x1263))+(((-1.0)*r11*x1265))+(((-1.0)*r12*sj3))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x1267=IKcos(j1);
IkReal x1268=(cj3*sj4);
IkReal x1269=(cj3*cj4);
IkReal x1270=((1.0)*cj5);
evalcond[0]=(((r21*sj5*x1269))+(((-1.0)*(IKsin(j1))))+((r20*sj5*x1268))+((r22*sj3))+((cj5*r21*x1268))+(((-1.0)*r20*x1269*x1270)));
evalcond[1]=((((-1.0)*r00*x1269*x1270))+((cj0*x1267))+((r02*sj3))+((r00*sj5*x1268))+((r01*sj5*x1269))+((cj5*r01*x1268)));
evalcond[2]=(((cj5*r11*x1268))+(((-1.0)*r10*x1269*x1270))+((sj0*x1267))+((r12*sj3))+((r10*sj5*x1268))+((r11*sj5*x1269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
IkReal x1271=(r21*sj3);
IkReal x1272=((1.0)*cj5);
IkReal x1273=((1.0)*cj4*sj5);
IkReal x1274=((1.0)*r20*sj4);
j2eval[0]=cj1;
j2eval[1]=IKsign(cj1);
j2eval[2]=((IKabs(((((-1.0)*sj4*x1271*x1272))+((cj4*cj5*r20*sj3))+(((-1.0)*sj3*sj5*x1274))+(((-1.0)*x1271*x1273))+((cj3*r22)))))+(IKabs((((r21*sj4*sj5))+(((-1.0)*r20*sj4*x1272))+(((-1.0)*r20*x1273))+(((-1.0)*cj4*r21*x1272))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
j2eval[0]=sj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj1;
j2eval[1]=sj0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1275=(cj0*cj4);
IkReal x1276=((1.0)*cj5);
IkReal x1277=(r10*sj5);
IkReal x1278=(cj0*sj4);
IkReal x1279=(r01*sj5);
IkReal x1280=(sj0*sj4);
IkReal x1281=(cj4*sj0);
IkReal x1282=((1.0)*sj5);
if( IKabs((((x1279*x1280))+((x1275*x1277))+((cj5*r10*x1278))+(((-1.0)*r01*x1276*x1281))+(((-1.0)*r00*x1281*x1282))+(((-1.0)*r00*x1276*x1280))+(((-1.0)*r11*x1278*x1282))+((cj5*r11*x1275)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x1275*x1282))+(((-1.0)*x1277*x1281))+(((-1.0)*r10*x1276*x1280))+((x1278*x1279))+(((-1.0)*r01*x1275*x1276))+(((-1.0)*r00*x1276*x1278))+((r11*sj5*x1280))+(((-1.0)*r11*x1276*x1281)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1279*x1280))+((x1275*x1277))+((cj5*r10*x1278))+(((-1.0)*r01*x1276*x1281))+(((-1.0)*r00*x1281*x1282))+(((-1.0)*r00*x1276*x1280))+(((-1.0)*r11*x1278*x1282))+((cj5*r11*x1275))))+IKsqr(((((-1.0)*r00*x1275*x1282))+(((-1.0)*x1277*x1281))+(((-1.0)*r10*x1276*x1280))+((x1278*x1279))+(((-1.0)*r01*x1275*x1276))+(((-1.0)*r00*x1276*x1278))+((r11*sj5*x1280))+(((-1.0)*r11*x1276*x1281))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1279*x1280))+((x1275*x1277))+((cj5*r10*x1278))+(((-1.0)*r01*x1276*x1281))+(((-1.0)*r00*x1281*x1282))+(((-1.0)*r00*x1276*x1280))+(((-1.0)*r11*x1278*x1282))+((cj5*r11*x1275))), ((((-1.0)*r00*x1275*x1282))+(((-1.0)*x1277*x1281))+(((-1.0)*r10*x1276*x1280))+((x1278*x1279))+(((-1.0)*r01*x1275*x1276))+(((-1.0)*r00*x1276*x1278))+((r11*sj5*x1280))+(((-1.0)*r11*x1276*x1281))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1283=IKcos(j2);
IkReal x1284=IKsin(j2);
IkReal x1285=(cj4*r00);
IkReal x1286=((0.00081)*sj4);
IkReal x1287=(r10*sj5);
IkReal x1288=(cj4*cj5);
IkReal x1289=((1.0)*sj3);
IkReal x1290=(cj5*r01);
IkReal x1291=(cj5*sj4);
IkReal x1292=(r01*sj5);
IkReal x1293=((1.0)*sj4);
IkReal x1294=(sj3*sj4);
IkReal x1295=(r00*sj5);
IkReal x1296=(cj5*r11);
IkReal x1297=((0.08354)*cj5);
IkReal x1298=(r11*sj5);
IkReal x1299=((1.0)*cj3);
IkReal x1300=(sj0*x1284);
IkReal x1301=(cj0*x1283);
IkReal x1302=(sj0*x1283);
IkReal x1303=(cj4*x1298);
IkReal x1304=(cj0*x1284);
IkReal x1305=(x1300+x1301);
evalcond[0]=(x1305+((r01*x1288))+((sj5*x1285))+(((-1.0)*x1292*x1293))+((r00*x1291)));
evalcond[1]=(x1302+((r11*x1288))+((cj4*x1287))+(((-1.0)*x1304))+(((-1.0)*x1293*x1298))+((r10*x1291)));
evalcond[2]=(x1305+((x1287*x1294))+((sj3*x1303))+((r11*sj3*x1291))+(((-1.0)*r10*x1288*x1289))+(((-1.0)*r12*x1299)));
evalcond[3]=(x1304+(((-1.0)*x1302))+((cj4*sj3*x1292))+((x1294*x1295))+(((-1.0)*cj5*x1285*x1289))+((x1290*x1294))+(((-1.0)*r02*x1299)));
evalcond[4]=((((-0.00761)*x1304))+(((-1.0)*x1286*x1295))+(((-1.0)*x1286*x1290))+(((0.03106)*cj0))+(((-0.00081)*cj4*x1292))+(((0.00081)*cj5*x1285))+(((-0.02942)*x1295))+(((-0.02942)*x1290))+(((-0.06598)*r02))+(((-1.0)*px))+(((0.03283)*sj0))+(((0.0065)*x1300))+(((0.0065)*x1301))+(((-0.08354)*x1292))+(((0.00761)*x1302))+((r00*x1297)));
evalcond[5]=((((-0.00761)*x1301))+(((-0.00761)*x1300))+(((-0.00081)*x1303))+(((-1.0)*x1286*x1296))+(((-0.03283)*cj0))+(((-0.06598)*r12))+(((-0.02942)*x1296))+(((-1.0)*py))+(((0.0065)*x1302))+(((0.00081)*r10*x1288))+(((-0.08354)*x1298))+(((-1.0)*x1286*x1287))+(((0.03106)*sj0))+((r10*x1297))+(((-0.02942)*x1287))+(((-0.0065)*x1304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1306=(cj0*r00);
IkReal x1307=(cj5*sj4);
IkReal x1308=(cj4*sj5);
IkReal x1309=(cj0*r10);
IkReal x1310=(cj4*cj5);
IkReal x1311=(cj0*r11);
IkReal x1312=((1.0)*r01);
IkReal x1313=(r11*sj0);
IkReal x1314=(sj4*sj5);
IkReal x1315=(r10*sj0);
IkReal x1316=((1.0)*r00*sj0);
if( IKabs((((x1310*x1311))+(((-1.0)*x1308*x1316))+((x1308*x1309))+(((-1.0)*x1307*x1316))+((r01*sj0*x1314))+((x1307*x1309))+(((-1.0)*sj0*x1310*x1312))+(((-1.0)*x1311*x1314)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1310*x1313))+((x1306*x1308))+((x1306*x1307))+((x1307*x1315))+(((-1.0)*x1313*x1314))+((x1308*x1315))+((cj0*r01*x1310))+(((-1.0)*cj0*x1312*x1314)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1310*x1311))+(((-1.0)*x1308*x1316))+((x1308*x1309))+(((-1.0)*x1307*x1316))+((r01*sj0*x1314))+((x1307*x1309))+(((-1.0)*sj0*x1310*x1312))+(((-1.0)*x1311*x1314))))+IKsqr((((x1310*x1313))+((x1306*x1308))+((x1306*x1307))+((x1307*x1315))+(((-1.0)*x1313*x1314))+((x1308*x1315))+((cj0*r01*x1310))+(((-1.0)*cj0*x1312*x1314))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1310*x1311))+(((-1.0)*x1308*x1316))+((x1308*x1309))+(((-1.0)*x1307*x1316))+((r01*sj0*x1314))+((x1307*x1309))+(((-1.0)*sj0*x1310*x1312))+(((-1.0)*x1311*x1314))), (((x1310*x1313))+((x1306*x1308))+((x1306*x1307))+((x1307*x1315))+(((-1.0)*x1313*x1314))+((x1308*x1315))+((cj0*r01*x1310))+(((-1.0)*cj0*x1312*x1314))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1317=IKcos(j2);
IkReal x1318=IKsin(j2);
IkReal x1319=(cj4*r00);
IkReal x1320=((0.00081)*sj4);
IkReal x1321=(r10*sj5);
IkReal x1322=(cj4*cj5);
IkReal x1323=((1.0)*sj3);
IkReal x1324=(cj5*r01);
IkReal x1325=(cj5*sj4);
IkReal x1326=(r01*sj5);
IkReal x1327=((1.0)*sj4);
IkReal x1328=(sj3*sj4);
IkReal x1329=(r00*sj5);
IkReal x1330=(cj5*r11);
IkReal x1331=((0.08354)*cj5);
IkReal x1332=(r11*sj5);
IkReal x1333=((1.0)*cj3);
IkReal x1334=(sj0*x1318);
IkReal x1335=(cj0*x1317);
IkReal x1336=(cj4*x1332);
IkReal x1337=(cj0*x1318);
IkReal x1338=(sj0*x1317);
IkReal x1339=((1.0)*x1338);
IkReal x1340=((1.0)*x1337);
IkReal x1341=(x1340+x1339);
evalcond[0]=(x1334+((r01*x1322))+((r00*x1325))+(((-1.0)*x1335))+((sj5*x1319))+(((-1.0)*x1326*x1327)));
evalcond[1]=((((-1.0)*x1327*x1332))+((cj4*x1321))+(((-1.0)*x1341))+((r11*x1322))+((r10*x1325)));
evalcond[2]=(x1335+((r11*sj3*x1325))+(((-1.0)*x1334))+((sj3*x1336))+(((-1.0)*r10*x1322*x1323))+((x1321*x1328))+(((-1.0)*r12*x1333)));
evalcond[3]=((((-1.0)*x1341))+(((-1.0)*cj5*x1319*x1323))+((x1324*x1328))+((x1328*x1329))+((cj4*sj3*x1326))+(((-1.0)*r02*x1333)));
evalcond[4]=((((-0.02942)*x1329))+(((-0.02942)*x1324))+(((-0.0065)*x1335))+(((0.00761)*x1337))+(((0.00761)*x1338))+((r00*x1331))+(((-0.06598)*r02))+(((0.00081)*cj5*x1319))+(((-1.0)*px))+(((0.03283)*sj0))+(((-0.03024)*cj0))+(((0.0065)*x1334))+(((-0.00081)*cj4*x1326))+(((-0.08354)*x1326))+(((-1.0)*x1320*x1329))+(((-1.0)*x1320*x1324)));
evalcond[5]=((((-0.02942)*x1321))+(((-0.08354)*x1332))+(((-0.0065)*x1337))+(((-0.0065)*x1338))+(((0.00761)*x1334))+(((-0.03283)*cj0))+(((-0.03024)*sj0))+(((-0.02942)*x1330))+(((-0.06598)*r12))+(((-0.00081)*x1336))+(((-1.0)*x1320*x1330))+(((-0.00761)*x1335))+(((0.00081)*r10*x1322))+(((-1.0)*py))+((r10*x1331))+(((-1.0)*x1320*x1321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1342=(cj5*sj3);
IkReal x1343=(cj4*r10);
IkReal x1344=((1.0)*sj4);
IkReal x1345=(sj3*sj5);
IkReal x1346=(cj4*r11);
if( IKabs((((cj5*r10*sj4))+((cj5*x1346))+((sj5*x1343))+(((-1.0)*r11*sj5*x1344)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1342*x1344))+((x1342*x1343))+((cj3*r12))+(((-1.0)*x1345*x1346))+(((-1.0)*r10*x1344*x1345)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r10*sj4))+((cj5*x1346))+((sj5*x1343))+(((-1.0)*r11*sj5*x1344))))+IKsqr(((((-1.0)*r11*x1342*x1344))+((x1342*x1343))+((cj3*r12))+(((-1.0)*x1345*x1346))+(((-1.0)*r10*x1344*x1345))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj5*r10*sj4))+((cj5*x1346))+((sj5*x1343))+(((-1.0)*r11*sj5*x1344))), ((((-1.0)*r11*x1342*x1344))+((x1342*x1343))+((cj3*r12))+(((-1.0)*x1345*x1346))+(((-1.0)*r10*x1344*x1345))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1347=IKcos(j2);
IkReal x1348=IKsin(j2);
IkReal x1349=(cj4*sj5);
IkReal x1350=((0.00081)*r10);
IkReal x1351=(sj4*sj5);
IkReal x1352=((0.02942)*cj5);
IkReal x1353=(cj4*cj5);
IkReal x1354=(r10*sj3);
IkReal x1355=(cj5*sj4);
IkReal x1356=((0.00081)*r20);
IkReal x1357=((0.08354)*sj5);
IkReal x1358=((0.00081)*r01);
IkReal x1359=(r01*sj3);
IkReal x1360=((0.02942)*sj5);
IkReal x1361=((1.0)*sj3);
IkReal x1362=(r21*sj3);
IkReal x1363=((0.08354)*cj5);
IkReal x1364=((0.00081)*r00);
IkReal x1365=((1.0)*cj3);
IkReal x1366=((0.00081)*r11);
IkReal x1367=((0.00081)*r21);
IkReal x1368=(r11*sj3);
IkReal x1369=(cj1*x1347);
IkReal x1370=(cj1*x1348);
IkReal x1371=(sj1*x1347);
IkReal x1372=(sj1*x1348);
evalcond[0]=(x1369+(((-1.0)*r21*x1351))+((r20*x1355))+((r20*x1349))+((r21*x1353)));
evalcond[1]=(x1371+((r00*x1349))+((r00*x1355))+(((-1.0)*r01*x1351))+((r01*x1353)));
evalcond[2]=(((r10*x1355))+(((-1.0)*r11*x1351))+((r11*x1353))+(((-1.0)*x1348))+((r10*x1349)));
evalcond[3]=(((x1355*x1368))+x1347+(((-1.0)*r12*x1365))+(((-1.0)*x1353*x1354))+((x1349*x1368))+((x1351*x1354)));
evalcond[4]=(((x1355*x1362))+x1370+((r20*sj3*x1351))+(((-1.0)*r20*x1353*x1361))+(((-1.0)*r22*x1365))+((x1349*x1362)));
evalcond[5]=(x1372+(((-1.0)*r00*x1353*x1361))+((r00*sj3*x1351))+((x1355*x1359))+(((-1.0)*r02*x1365))+((x1349*x1359)));
evalcond[6]=((-0.03283)+((r10*x1363))+(((-1.0)*r11*x1352))+(((-1.0)*r11*x1357))+(((-1.0)*x1350*x1351))+(((-0.06598)*r12))+(((-1.0)*x1355*x1366))+(((-1.0)*py))+((x1350*x1353))+(((-1.0)*x1349*x1366))+(((-0.0065)*x1348))+(((-0.00761)*x1347))+(((-1.0)*r10*x1360)));
evalcond[7]=((((-0.00761)*x1370))+(((0.0065)*x1369))+(((-0.06598)*r22))+(((-1.0)*r21*x1352))+(((-1.0)*r21*x1357))+(((-1.0)*r20*x1360))+(((-0.26849)*sj1))+(((-1.0)*x1355*x1367))+((r20*x1363))+(((-1.0)*pz))+(((0.03065)*cj1))+(((-1.0)*x1349*x1367))+(((-1.0)*x1351*x1356))+((x1353*x1356)));
evalcond[8]=((0.00041)+(((-0.00761)*x1372))+(((0.26849)*cj1))+(((-1.0)*x1355*x1358))+(((-0.06598)*r02))+(((0.0065)*x1371))+(((-1.0)*px))+(((-1.0)*r01*x1357))+(((-1.0)*r01*x1352))+(((-1.0)*r00*x1360))+(((-1.0)*x1349*x1358))+((r00*x1363))+(((-1.0)*x1351*x1364))+((x1353*x1364))+(((0.03065)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1373=(cj4*sj3);
IkReal x1374=(r11*sj5);
IkReal x1375=(sj3*sj4);
IkReal x1376=(cj5*r11);
IkReal x1377=(r10*sj5);
IkReal x1378=((1.0)*cj4);
IkReal x1379=((1.0)*cj5*r10);
if( IKabs((((sj4*x1374))+(((-1.0)*x1377*x1378))+(((-1.0)*x1376*x1378))+(((-1.0)*sj4*x1379)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1375*x1377))+((x1375*x1376))+(((-1.0)*cj3*r12))+(((-1.0)*x1373*x1379))+((x1373*x1374)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x1374))+(((-1.0)*x1377*x1378))+(((-1.0)*x1376*x1378))+(((-1.0)*sj4*x1379))))+IKsqr((((x1375*x1377))+((x1375*x1376))+(((-1.0)*cj3*r12))+(((-1.0)*x1373*x1379))+((x1373*x1374))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj4*x1374))+(((-1.0)*x1377*x1378))+(((-1.0)*x1376*x1378))+(((-1.0)*sj4*x1379))), (((x1375*x1377))+((x1375*x1376))+(((-1.0)*cj3*r12))+(((-1.0)*x1373*x1379))+((x1373*x1374))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1380=IKcos(j2);
IkReal x1381=IKsin(j2);
IkReal x1382=(cj4*sj5);
IkReal x1383=(sj4*sj5);
IkReal x1384=((0.00081)*r10);
IkReal x1385=((0.02942)*cj5);
IkReal x1386=(cj4*cj5);
IkReal x1387=(r10*sj3);
IkReal x1388=(cj5*sj4);
IkReal x1389=((0.00081)*r20);
IkReal x1390=((0.08354)*sj5);
IkReal x1391=((0.00081)*r01);
IkReal x1392=(r01*sj3);
IkReal x1393=((1.0)*sj1);
IkReal x1394=((1.0)*sj3);
IkReal x1395=(r21*sj3);
IkReal x1396=((0.08354)*cj5);
IkReal x1397=((0.00081)*r00);
IkReal x1398=((1.0)*cj3);
IkReal x1399=((0.00081)*r11);
IkReal x1400=((0.00081)*r21);
IkReal x1401=(r11*sj3);
IkReal x1402=((0.02942)*sj5);
IkReal x1403=(cj1*x1380);
IkReal x1404=((0.00761)*x1381);
evalcond[0]=(x1381+((r10*x1382))+((r10*x1388))+((r11*x1386))+(((-1.0)*r11*x1383)));
evalcond[1]=(((r21*x1386))+((r20*x1382))+((r20*x1388))+(((-1.0)*r21*x1383))+x1403);
evalcond[2]=((((-1.0)*x1380*x1393))+((r00*x1382))+((r00*x1388))+((r01*x1386))+(((-1.0)*r01*x1383)));
evalcond[3]=(((x1382*x1395))+((x1388*x1395))+((r20*sj3*x1383))+(((-1.0)*r20*x1386*x1394))+(((-1.0)*r22*x1398))+((cj1*x1381)));
evalcond[4]=((((-1.0)*r12*x1398))+(((-1.0)*x1386*x1387))+((x1388*x1401))+(((-1.0)*x1380))+((x1382*x1401))+((x1383*x1387)));
evalcond[5]=(((x1382*x1392))+((x1388*x1392))+(((-1.0)*r02*x1398))+((r00*sj3*x1383))+(((-1.0)*r00*x1386*x1394))+(((-1.0)*x1381*x1393)));
evalcond[6]=((0.03283)+(((-1.0)*r11*x1385))+((r10*x1396))+(((-1.0)*x1383*x1384))+(((0.00761)*x1380))+(((-1.0)*x1382*x1399))+(((-0.06598)*r12))+(((-1.0)*py))+(((-1.0)*r10*x1402))+(((-1.0)*x1388*x1399))+((x1384*x1386))+(((0.0065)*x1381))+(((-1.0)*r11*x1390)));
evalcond[7]=((((-1.0)*x1383*x1389))+(((-0.06598)*r22))+(((-1.0)*r21*x1390))+(((-1.0)*cj1*x1404))+(((0.0065)*x1403))+(((-1.0)*r21*x1385))+((r20*x1396))+(((-1.0)*x1388*x1400))+(((-0.26849)*sj1))+(((-1.0)*x1382*x1400))+(((-1.0)*pz))+(((0.03065)*cj1))+((x1386*x1389))+(((-1.0)*r20*x1402)));
evalcond[8]=((-0.00041)+(((-0.26849)*cj1))+(((-0.03065)*sj1))+(((-1.0)*x1383*x1397))+(((-1.0)*x1382*x1391))+(((-1.0)*r00*x1402))+(((-1.0)*r01*x1390))+(((-0.06598)*r02))+((sj1*x1404))+(((-1.0)*px))+(((-0.0065)*sj1*x1380))+(((-1.0)*r01*x1385))+((x1386*x1397))+(((-1.0)*x1388*x1391))+((r00*x1396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1405=(r21*sj3);
IkReal x1406=((1.0)*cj5);
IkReal x1407=((1.0)*cj4*sj5);
IkReal x1408=((1.0)*r20*sj4);
if( IKabs((((cj4*cj5*r20*sj3))+(((-1.0)*sj3*sj5*x1408))+(((-1.0)*x1405*x1407))+((cj3*r22))+(((-1.0)*sj4*x1405*x1406)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*sj4*sj5))+(((-1.0)*cj4*r21*x1406))+(((-1.0)*r20*sj4*x1406))+(((-1.0)*r20*x1407)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*cj5*r20*sj3))+(((-1.0)*sj3*sj5*x1408))+(((-1.0)*x1405*x1407))+((cj3*r22))+(((-1.0)*sj4*x1405*x1406))))+IKsqr((((r21*sj4*sj5))+(((-1.0)*cj4*r21*x1406))+(((-1.0)*r20*sj4*x1406))+(((-1.0)*r20*x1407))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj4*cj5*r20*sj3))+(((-1.0)*sj3*sj5*x1408))+(((-1.0)*x1405*x1407))+((cj3*r22))+(((-1.0)*sj4*x1405*x1406))), (((r21*sj4*sj5))+(((-1.0)*cj4*r21*x1406))+(((-1.0)*r20*sj4*x1406))+(((-1.0)*r20*x1407))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1409=IKsin(j2);
IkReal x1410=IKcos(j2);
IkReal x1411=(cj4*r00);
IkReal x1412=((0.02942)*cj5);
IkReal x1413=((0.00081)*sj4);
IkReal x1414=(r10*sj5);
IkReal x1415=(cj4*cj5);
IkReal x1416=((1.0)*sj3);
IkReal x1417=(cj5*r01);
IkReal x1418=(cj5*sj4);
IkReal x1419=(r01*sj5);
IkReal x1420=((1.0)*sj4);
IkReal x1421=(r20*sj5);
IkReal x1422=((0.00081)*cj4);
IkReal x1423=(r11*sj5);
IkReal x1424=(sj3*sj4);
IkReal x1425=(cj4*sj3);
IkReal x1426=(r00*sj5);
IkReal x1427=(r21*sj5);
IkReal x1428=((0.08354)*cj5);
IkReal x1429=((1.0)*cj3);
IkReal x1430=(cj0*x1410);
IkReal x1431=(cj0*x1409);
IkReal x1432=(sj0*x1410);
IkReal x1433=(sj0*x1409);
evalcond[0]=(((r21*x1415))+((r20*x1418))+(((-1.0)*x1420*x1427))+x1410+((cj4*x1421)));
evalcond[1]=(((sj5*x1411))+((r00*x1418))+((r01*x1415))+(((-1.0)*x1419*x1420))+x1433);
evalcond[2]=((((-1.0)*x1431))+((cj4*x1414))+(((-1.0)*x1420*x1423))+((r11*x1415))+((r10*x1418)));
evalcond[3]=(((x1425*x1427))+(((-1.0)*r20*x1415*x1416))+x1409+(((-1.0)*r22*x1429))+((r21*sj3*x1418))+((x1421*x1424)));
evalcond[4]=(((r11*sj3*x1418))+((x1414*x1424))+((x1423*x1425))+(((-1.0)*r12*x1429))+(((-1.0)*r10*x1415*x1416))+x1430);
evalcond[5]=(((x1424*x1426))+(((-1.0)*x1432))+(((-1.0)*cj5*x1411*x1416))+((x1419*x1425))+(((-1.0)*r02*x1429))+((x1417*x1424)));
evalcond[6]=((0.03065)+(((0.00081)*r20*x1415))+(((-0.06598)*r22))+(((-1.0)*cj5*r21*x1413))+(((-0.00761)*x1409))+(((-1.0)*pz))+(((-1.0)*x1422*x1427))+(((-0.08354)*x1427))+(((-1.0)*r21*x1412))+(((-1.0)*x1413*x1421))+(((0.0065)*x1410))+(((-0.02942)*x1421))+((r20*x1428)));
evalcond[7]=(((r00*x1428))+(((-1.0)*x1413*x1417))+(((-0.08354)*x1419))+(((0.0065)*x1433))+(((0.00081)*cj5*x1411))+(((-0.06598)*r02))+(((-1.0)*px))+(((0.03283)*sj0))+(((-1.0)*x1419*x1422))+(((-1.0)*r01*x1412))+(((-1.0)*x1413*x1426))+(((0.00761)*x1432))+(((0.2689)*cj0))+(((-0.02942)*x1426)));
evalcond[8]=((((-1.0)*cj5*r11*x1413))+(((-0.02942)*x1414))+(((-0.03283)*cj0))+(((-0.00761)*x1430))+(((-1.0)*x1413*x1414))+(((-0.06598)*r12))+((r10*x1428))+(((-1.0)*py))+(((-1.0)*x1422*x1423))+(((-0.0065)*x1431))+(((-1.0)*r11*x1412))+(((0.2689)*sj0))+(((0.00081)*r10*x1415))+(((-0.08354)*x1423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1434=(r20*sj5);
IkReal x1435=(sj3*sj4);
IkReal x1436=(cj4*r21);
IkReal x1437=(cj5*r20);
if( IKabs(((((-1.0)*cj3*r22))+((sj3*sj5*x1436))+((x1434*x1435))+(((-1.0)*cj4*sj3*x1437))+((cj5*r21*x1435)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*x1434))+((cj5*x1436))+(((-1.0)*r21*sj4*sj5))+((sj4*x1437)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj3*r22))+((sj3*sj5*x1436))+((x1434*x1435))+(((-1.0)*cj4*sj3*x1437))+((cj5*r21*x1435))))+IKsqr((((cj4*x1434))+((cj5*x1436))+(((-1.0)*r21*sj4*sj5))+((sj4*x1437))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj3*r22))+((sj3*sj5*x1436))+((x1434*x1435))+(((-1.0)*cj4*sj3*x1437))+((cj5*r21*x1435))), (((cj4*x1434))+((cj5*x1436))+(((-1.0)*r21*sj4*sj5))+((sj4*x1437))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1438=IKsin(j2);
IkReal x1439=IKcos(j2);
IkReal x1440=(cj4*r00);
IkReal x1441=((0.02942)*cj5);
IkReal x1442=((0.00081)*sj4);
IkReal x1443=(r10*sj5);
IkReal x1444=(cj4*cj5);
IkReal x1445=((1.0)*sj3);
IkReal x1446=(cj5*r01);
IkReal x1447=(cj5*sj4);
IkReal x1448=(r01*sj5);
IkReal x1449=((1.0)*sj4);
IkReal x1450=(r20*sj5);
IkReal x1451=((0.00081)*cj4);
IkReal x1452=(r11*sj5);
IkReal x1453=(sj3*sj4);
IkReal x1454=(cj4*sj3);
IkReal x1455=(r00*sj5);
IkReal x1456=(r21*sj5);
IkReal x1457=((0.08354)*cj5);
IkReal x1458=((1.0)*cj3);
IkReal x1459=(cj0*x1439);
IkReal x1460=(cj0*x1438);
IkReal x1461=(sj0*x1439);
IkReal x1462=(sj0*x1438);
evalcond[0]=((((-1.0)*x1439))+((cj4*x1450))+((r21*x1444))+((r20*x1447))+(((-1.0)*x1449*x1456)));
evalcond[1]=(((sj5*x1440))+x1462+((r00*x1447))+((r01*x1444))+(((-1.0)*x1448*x1449)));
evalcond[2]=(((cj4*x1443))+((r10*x1447))+((r11*x1444))+(((-1.0)*x1449*x1452))+(((-1.0)*x1460)));
evalcond[3]=((((-1.0)*x1438))+(((-1.0)*r22*x1458))+((x1454*x1456))+((r21*sj3*x1447))+((x1450*x1453))+(((-1.0)*r20*x1444*x1445)));
evalcond[4]=(((r11*sj3*x1447))+x1459+(((-1.0)*r10*x1444*x1445))+((x1452*x1454))+((x1443*x1453))+(((-1.0)*r12*x1458)));
evalcond[5]=(((x1446*x1453))+((x1448*x1454))+(((-1.0)*r02*x1458))+(((-1.0)*cj5*x1440*x1445))+(((-1.0)*x1461))+((x1453*x1455)));
evalcond[6]=((-0.03065)+(((-0.06598)*r22))+(((-1.0)*r21*x1441))+((r20*x1457))+(((-1.0)*cj5*r21*x1442))+(((-0.08354)*x1456))+(((-0.02942)*x1450))+(((-1.0)*pz))+(((-0.0065)*x1439))+(((0.00081)*r20*x1444))+(((-1.0)*x1451*x1456))+(((0.00761)*x1438))+(((-1.0)*x1442*x1450)));
evalcond[7]=((((0.0065)*x1462))+(((-1.0)*r01*x1441))+(((-1.0)*x1448*x1451))+(((-0.26808)*cj0))+(((-0.02942)*x1455))+(((-0.06598)*r02))+(((-1.0)*px))+(((0.03283)*sj0))+(((0.00761)*x1461))+(((-0.08354)*x1448))+((r00*x1457))+(((-1.0)*x1442*x1446))+(((0.00081)*cj5*x1440))+(((-1.0)*x1442*x1455)));
evalcond[8]=(((r10*x1457))+(((-0.03283)*cj0))+(((-0.00761)*x1459))+(((-0.06598)*r12))+(((-0.08354)*x1452))+(((-0.26808)*sj0))+(((-1.0)*r11*x1441))+(((0.00081)*r10*x1444))+(((-0.0065)*x1460))+(((-1.0)*py))+(((-1.0)*cj5*r11*x1442))+(((-0.02942)*x1443))+(((-1.0)*x1451*x1452))+(((-1.0)*x1442*x1443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1472=IKPowWithIntegerCheck(cj1,-1);
if(!x1472.valid){
continue;
}
IkReal x1463=x1472.value;
IkReal x1464=(cj4*cj5);
IkReal x1465=((1.0)*sj5);
IkReal x1466=(cj4*r20);
IkReal x1467=(cj1*sj4);
IkReal x1468=((1.0)*cj5);
IkReal x1469=(r20*sj4);
IkReal x1470=(cj0*sj1);
IkReal x1471=(r21*x1470);
CheckValue<IkReal> x1473=IKPowWithIntegerCheck(sj0,-1);
if(!x1473.valid){
continue;
}
if( IKabs((x1463*(x1473.value)*((((cj5*x1469*x1470))+((r01*sj5*x1467))+(((-1.0)*cj1*r01*x1464))+(((-1.0)*sj4*x1465*x1471))+(((-1.0)*r00*x1467*x1468))+((x1464*x1471))+((sj5*x1466*x1470))+(((-1.0)*cj1*cj4*r00*x1465)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1463*((((r21*sj4*sj5))+(((-1.0)*x1465*x1466))+(((-1.0)*r21*x1464))+(((-1.0)*x1468*x1469)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1463*(x1473.value)*((((cj5*x1469*x1470))+((r01*sj5*x1467))+(((-1.0)*cj1*r01*x1464))+(((-1.0)*sj4*x1465*x1471))+(((-1.0)*r00*x1467*x1468))+((x1464*x1471))+((sj5*x1466*x1470))+(((-1.0)*cj1*cj4*r00*x1465))))))+IKsqr((x1463*((((r21*sj4*sj5))+(((-1.0)*x1465*x1466))+(((-1.0)*r21*x1464))+(((-1.0)*x1468*x1469))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x1463*(x1473.value)*((((cj5*x1469*x1470))+((r01*sj5*x1467))+(((-1.0)*cj1*r01*x1464))+(((-1.0)*sj4*x1465*x1471))+(((-1.0)*r00*x1467*x1468))+((x1464*x1471))+((sj5*x1466*x1470))+(((-1.0)*cj1*cj4*r00*x1465))))), (x1463*((((r21*sj4*sj5))+(((-1.0)*x1465*x1466))+(((-1.0)*r21*x1464))+(((-1.0)*x1468*x1469))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1474=IKcos(j2);
IkReal x1475=IKsin(j2);
IkReal x1476=(cj4*sj5);
IkReal x1477=(sj4*sj5);
IkReal x1478=((0.00081)*r10);
IkReal x1479=(r01*sj3);
IkReal x1480=((0.02942)*cj5);
IkReal x1481=(cj0*sj1);
IkReal x1482=((0.08354)*cj5);
IkReal x1483=(r11*sj3);
IkReal x1484=((0.00081)*r01);
IkReal x1485=(r20*sj3);
IkReal x1486=((0.00081)*r21);
IkReal x1487=((0.08354)*sj5);
IkReal x1488=(cj4*cj5);
IkReal x1489=(cj5*sj4);
IkReal x1490=(r21*sj3);
IkReal x1491=((0.00081)*r00);
IkReal x1492=((0.00081)*r20);
IkReal x1493=((0.02942)*sj5);
IkReal x1494=((1.0)*cj3);
IkReal x1495=((0.26849)*cj1);
IkReal x1496=((1.0)*sj3);
IkReal x1497=((0.00081)*r11);
IkReal x1498=(sj0*sj1);
IkReal x1499=((0.00761)*x1475);
IkReal x1500=(sj0*x1475);
IkReal x1501=(cj1*x1474);
IkReal x1502=(cj0*x1474);
IkReal x1503=(sj0*x1474);
IkReal x1504=(cj0*x1475);
evalcond[0]=(((r20*x1489))+((r21*x1488))+x1501+(((-1.0)*r21*x1477))+((r20*x1476)));
evalcond[1]=((((-1.0)*r01*x1477))+((r01*x1488))+((r00*x1489))+x1500+((x1474*x1481))+((r00*x1476)));
evalcond[2]=(((r10*x1489))+(((-1.0)*x1504))+((r10*x1476))+((r11*x1488))+(((-1.0)*r11*x1477))+((x1474*x1498)));
evalcond[3]=((((-1.0)*x1485*x1488))+((x1476*x1490))+((x1489*x1490))+((cj1*x1475))+((x1477*x1485))+(((-1.0)*r22*x1494)));
evalcond[4]=((((-1.0)*r12*x1494))+((x1476*x1483))+((r10*sj3*x1477))+((x1483*x1489))+x1502+(((-1.0)*r10*x1488*x1496))+((x1475*x1498)));
evalcond[5]=((((-1.0)*x1503))+((r00*sj3*x1477))+(((-1.0)*r02*x1494))+((x1476*x1479))+(((-1.0)*r00*x1488*x1496))+((x1475*x1481))+((x1479*x1489)));
evalcond[6]=((((-0.06598)*r22))+(((-1.0)*r21*x1480))+(((-1.0)*r21*x1487))+((r20*x1482))+(((-1.0)*r20*x1493))+(((-1.0)*cj1*x1499))+(((-1.0)*x1486*x1489))+(((-0.26849)*sj1))+(((0.0065)*x1501))+(((-1.0)*pz))+(((0.03065)*cj1))+(((-1.0)*x1477*x1492))+((x1488*x1492))+(((-1.0)*x1476*x1486)));
evalcond[7]=((((0.00761)*x1503))+(((-1.0)*r01*x1480))+(((-1.0)*r01*x1487))+(((-1.0)*r00*x1493))+(((0.00041)*cj0))+((r00*x1482))+(((-1.0)*x1484*x1489))+(((-1.0)*x1481*x1499))+(((0.03065)*x1481))+(((-0.06598)*r02))+(((0.0065)*x1500))+(((-1.0)*px))+(((0.03283)*sj0))+(((-1.0)*x1477*x1491))+((cj0*x1495))+(((0.0065)*x1474*x1481))+((x1488*x1491))+(((-1.0)*x1476*x1484)));
evalcond[8]=((((-0.00761)*x1502))+(((-1.0)*r11*x1480))+(((-1.0)*r11*x1487))+((r10*x1482))+(((-0.03283)*cj0))+((sj0*x1495))+(((-0.06598)*r12))+(((-0.0065)*x1504))+(((-1.0)*x1477*x1478))+(((0.03065)*x1498))+(((0.00041)*sj0))+(((-1.0)*py))+(((0.0065)*x1474*x1498))+(((-1.0)*x1498*x1499))+((x1478*x1488))+(((-1.0)*x1476*x1497))+(((-1.0)*r10*x1493))+(((-1.0)*x1489*x1497)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1505=(cj0*cj4);
IkReal x1506=((1.0)*cj5);
IkReal x1507=(r10*sj5);
IkReal x1508=(cj0*sj4);
IkReal x1509=(r01*sj5);
IkReal x1510=(sj0*sj4);
IkReal x1511=(cj4*sj0);
IkReal x1512=((1.0)*sj5);
CheckValue<IkReal> x1513=IKPowWithIntegerCheck(sj1,-1);
if(!x1513.valid){
continue;
}
if( IKabs((((x1509*x1510))+(((-1.0)*r00*x1511*x1512))+((cj5*r11*x1505))+(((-1.0)*r01*x1506*x1511))+((x1505*x1507))+(((-1.0)*r11*x1508*x1512))+((cj5*r10*x1508))+(((-1.0)*r00*x1506*x1510)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1513.value)*(((((-1.0)*x1507*x1511))+((x1508*x1509))+(((-1.0)*r01*x1505*x1506))+(((-1.0)*r00*x1505*x1512))+((r11*sj5*x1510))+(((-1.0)*r00*x1506*x1508))+(((-1.0)*r10*x1506*x1510))+(((-1.0)*r11*x1506*x1511)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1509*x1510))+(((-1.0)*r00*x1511*x1512))+((cj5*r11*x1505))+(((-1.0)*r01*x1506*x1511))+((x1505*x1507))+(((-1.0)*r11*x1508*x1512))+((cj5*r10*x1508))+(((-1.0)*r00*x1506*x1510))))+IKsqr(((x1513.value)*(((((-1.0)*x1507*x1511))+((x1508*x1509))+(((-1.0)*r01*x1505*x1506))+(((-1.0)*r00*x1505*x1512))+((r11*sj5*x1510))+(((-1.0)*r00*x1506*x1508))+(((-1.0)*r10*x1506*x1510))+(((-1.0)*r11*x1506*x1511))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1509*x1510))+(((-1.0)*r00*x1511*x1512))+((cj5*r11*x1505))+(((-1.0)*r01*x1506*x1511))+((x1505*x1507))+(((-1.0)*r11*x1508*x1512))+((cj5*r10*x1508))+(((-1.0)*r00*x1506*x1510))), ((x1513.value)*(((((-1.0)*x1507*x1511))+((x1508*x1509))+(((-1.0)*r01*x1505*x1506))+(((-1.0)*r00*x1505*x1512))+((r11*sj5*x1510))+(((-1.0)*r00*x1506*x1508))+(((-1.0)*r10*x1506*x1510))+(((-1.0)*r11*x1506*x1511))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1514=IKcos(j2);
IkReal x1515=IKsin(j2);
IkReal x1516=(cj4*sj5);
IkReal x1517=(sj4*sj5);
IkReal x1518=((0.00081)*r10);
IkReal x1519=(r01*sj3);
IkReal x1520=((0.02942)*cj5);
IkReal x1521=(cj0*sj1);
IkReal x1522=((0.08354)*cj5);
IkReal x1523=(r11*sj3);
IkReal x1524=((0.00081)*r01);
IkReal x1525=(r20*sj3);
IkReal x1526=((0.00081)*r21);
IkReal x1527=((0.08354)*sj5);
IkReal x1528=(cj4*cj5);
IkReal x1529=(cj5*sj4);
IkReal x1530=(r21*sj3);
IkReal x1531=((0.00081)*r00);
IkReal x1532=((0.00081)*r20);
IkReal x1533=((0.02942)*sj5);
IkReal x1534=((1.0)*cj3);
IkReal x1535=((0.26849)*cj1);
IkReal x1536=((1.0)*sj3);
IkReal x1537=((0.00081)*r11);
IkReal x1538=(sj0*sj1);
IkReal x1539=((0.00761)*x1515);
IkReal x1540=(sj0*x1515);
IkReal x1541=(cj1*x1514);
IkReal x1542=(cj0*x1514);
IkReal x1543=(sj0*x1514);
IkReal x1544=(cj0*x1515);
evalcond[0]=(((r20*x1516))+(((-1.0)*r21*x1517))+((r20*x1529))+x1541+((r21*x1528)));
evalcond[1]=(((r00*x1529))+((r01*x1528))+(((-1.0)*r01*x1517))+((r00*x1516))+x1540+((x1514*x1521)));
evalcond[2]=((((-1.0)*x1544))+((r10*x1529))+((r11*x1528))+((r10*x1516))+(((-1.0)*r11*x1517))+((x1514*x1538)));
evalcond[3]=((((-1.0)*x1525*x1528))+(((-1.0)*r22*x1534))+((cj1*x1515))+((x1517*x1525))+((x1529*x1530))+((x1516*x1530)));
evalcond[4]=(((r10*sj3*x1517))+(((-1.0)*r12*x1534))+(((-1.0)*r10*x1528*x1536))+((x1523*x1529))+x1542+((x1516*x1523))+((x1515*x1538)));
evalcond[5]=((((-1.0)*x1543))+((x1519*x1529))+(((-1.0)*r02*x1534))+((x1516*x1519))+((r00*sj3*x1517))+((x1515*x1521))+(((-1.0)*r00*x1528*x1536)));
evalcond[6]=((((-0.06598)*r22))+((x1528*x1532))+(((0.0065)*x1541))+(((-0.26849)*sj1))+((r20*x1522))+(((-1.0)*pz))+(((0.03065)*cj1))+(((-1.0)*x1526*x1529))+(((-1.0)*x1517*x1532))+(((-1.0)*r21*x1527))+(((-1.0)*r21*x1520))+(((-1.0)*x1516*x1526))+(((-1.0)*r20*x1533))+(((-1.0)*cj1*x1539)));
evalcond[7]=((((-1.0)*x1521*x1539))+(((-1.0)*x1524*x1529))+(((-1.0)*r00*x1533))+(((-1.0)*r01*x1527))+(((-1.0)*r01*x1520))+(((0.00041)*cj0))+((x1528*x1531))+((r00*x1522))+(((0.0065)*x1540))+(((-0.06598)*r02))+(((-1.0)*px))+(((0.03283)*sj0))+(((0.03065)*x1521))+(((-1.0)*x1517*x1531))+(((0.0065)*x1514*x1521))+(((-1.0)*x1516*x1524))+((cj0*x1535))+(((0.00761)*x1543)));
evalcond[8]=((((-1.0)*x1529*x1537))+((r10*x1522))+(((-1.0)*r11*x1520))+(((-1.0)*r11*x1527))+(((-0.03283)*cj0))+((x1518*x1528))+((sj0*x1535))+(((-0.06598)*r12))+(((-0.0065)*x1544))+(((0.00041)*sj0))+(((-1.0)*py))+(((-0.00761)*x1542))+(((0.03065)*x1538))+(((-1.0)*x1517*x1518))+(((-1.0)*r10*x1533))+(((0.0065)*x1514*x1538))+(((-1.0)*x1538*x1539))+(((-1.0)*x1516*x1537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1545=(r21*sj3);
IkReal x1546=((1.0)*cj5);
IkReal x1547=((1.0)*cj4*sj5);
IkReal x1548=((1.0)*r20*sj4);
CheckValue<IkReal> x1549=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x1549.valid){
continue;
}
CheckValue<IkReal> x1550 = IKatan2WithCheck(IkReal((((cj4*cj5*r20*sj3))+((cj3*r22))+(((-1.0)*sj3*sj5*x1548))+(((-1.0)*sj4*x1545*x1546))+(((-1.0)*x1545*x1547)))),IkReal((((r21*sj4*sj5))+(((-1.0)*cj4*r21*x1546))+(((-1.0)*r20*sj4*x1546))+(((-1.0)*r20*x1547)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1550.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1549.value)))+(x1550.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1551=IKcos(j2);
IkReal x1552=IKsin(j2);
IkReal x1553=(cj4*sj5);
IkReal x1554=(sj4*sj5);
IkReal x1555=((0.00081)*r10);
IkReal x1556=(r01*sj3);
IkReal x1557=((0.02942)*cj5);
IkReal x1558=(cj0*sj1);
IkReal x1559=((0.08354)*cj5);
IkReal x1560=(r11*sj3);
IkReal x1561=((0.00081)*r01);
IkReal x1562=(r20*sj3);
IkReal x1563=((0.00081)*r21);
IkReal x1564=((0.08354)*sj5);
IkReal x1565=(cj4*cj5);
IkReal x1566=(cj5*sj4);
IkReal x1567=(r21*sj3);
IkReal x1568=((0.00081)*r00);
IkReal x1569=((0.00081)*r20);
IkReal x1570=((0.02942)*sj5);
IkReal x1571=((1.0)*cj3);
IkReal x1572=((0.26849)*cj1);
IkReal x1573=((1.0)*sj3);
IkReal x1574=((0.00081)*r11);
IkReal x1575=(sj0*sj1);
IkReal x1576=((0.00761)*x1552);
IkReal x1577=(sj0*x1552);
IkReal x1578=(cj1*x1551);
IkReal x1579=(cj0*x1551);
IkReal x1580=(sj0*x1551);
IkReal x1581=(cj0*x1552);
evalcond[0]=(((r20*x1566))+(((-1.0)*r21*x1554))+x1578+((r21*x1565))+((r20*x1553)));
evalcond[1]=(((x1551*x1558))+((r00*x1553))+x1577+((r00*x1566))+(((-1.0)*r01*x1554))+((r01*x1565)));
evalcond[2]=(((r11*x1565))+(((-1.0)*r11*x1554))+((r10*x1566))+(((-1.0)*x1581))+((r10*x1553))+((x1551*x1575)));
evalcond[3]=(((x1566*x1567))+((x1553*x1567))+((cj1*x1552))+(((-1.0)*r22*x1571))+((x1554*x1562))+(((-1.0)*x1562*x1565)));
evalcond[4]=(((x1560*x1566))+((x1552*x1575))+((x1553*x1560))+((r10*sj3*x1554))+x1579+(((-1.0)*r12*x1571))+(((-1.0)*r10*x1565*x1573)));
evalcond[5]=(((r00*sj3*x1554))+(((-1.0)*r02*x1571))+((x1556*x1566))+((x1553*x1556))+((x1552*x1558))+(((-1.0)*r00*x1565*x1573))+(((-1.0)*x1580)));
evalcond[6]=((((-0.06598)*r22))+(((0.0065)*x1578))+(((-0.26849)*sj1))+(((-1.0)*cj1*x1576))+(((-1.0)*pz))+(((-1.0)*x1563*x1566))+(((-1.0)*r20*x1570))+(((0.03065)*cj1))+(((-1.0)*r21*x1564))+(((-1.0)*x1553*x1563))+(((-1.0)*r21*x1557))+(((-1.0)*x1554*x1569))+((r20*x1559))+((x1565*x1569)));
evalcond[7]=((((-1.0)*x1558*x1576))+((r00*x1559))+(((0.00761)*x1580))+(((0.00041)*cj0))+(((0.0065)*x1577))+(((-0.06598)*r02))+(((-1.0)*px))+(((0.03283)*sj0))+(((0.03065)*x1558))+(((0.0065)*x1551*x1558))+((cj0*x1572))+(((-1.0)*x1553*x1561))+(((-1.0)*r01*x1564))+(((-1.0)*r00*x1570))+(((-1.0)*r01*x1557))+(((-1.0)*x1554*x1568))+(((-1.0)*x1561*x1566))+((x1565*x1568)));
evalcond[8]=(((x1555*x1565))+(((-0.03283)*cj0))+(((-1.0)*x1575*x1576))+(((-1.0)*x1566*x1574))+(((-0.0065)*x1581))+(((-0.06598)*r12))+(((0.03065)*x1575))+(((0.00041)*sj0))+(((0.0065)*x1551*x1575))+((sj0*x1572))+(((-1.0)*py))+(((-0.00761)*x1579))+(((-1.0)*r11*x1557))+(((-1.0)*x1553*x1574))+(((-1.0)*r10*x1570))+(((-1.0)*r11*x1564))+((r10*x1559))+(((-1.0)*x1554*x1555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1582=(cj3*cj5);
IkReal x1583=((1.0)*sj4);
IkReal x1584=(cj3*sj5);
IkReal x1585=((1.0)*cj4);
CheckValue<IkReal> x1586=IKPowWithIntegerCheck(cj0,-1);
if(!x1586.valid){
continue;
}
if( IKabs(((((-1.0)*r20*x1582*x1585))+((r22*sj3))+((r20*sj4*x1584))+((r21*sj4*x1582))+((cj4*r21*x1584)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1586.value)*(((((-1.0)*r01*x1584*x1585))+((cj4*r00*x1582))+(((-1.0)*r01*x1582*x1583))+(((-1.0)*r02*sj3))+(((-1.0)*r00*x1583*x1584)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x1582*x1585))+((r22*sj3))+((r20*sj4*x1584))+((r21*sj4*x1582))+((cj4*r21*x1584))))+IKsqr(((x1586.value)*(((((-1.0)*r01*x1584*x1585))+((cj4*r00*x1582))+(((-1.0)*r01*x1582*x1583))+(((-1.0)*r02*sj3))+(((-1.0)*r00*x1583*x1584))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r20*x1582*x1585))+((r22*sj3))+((r20*sj4*x1584))+((r21*sj4*x1582))+((cj4*r21*x1584))), ((x1586.value)*(((((-1.0)*r01*x1584*x1585))+((cj4*r00*x1582))+(((-1.0)*r01*x1582*x1583))+(((-1.0)*r02*sj3))+(((-1.0)*r00*x1583*x1584))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[3];
IkReal x1587=IKcos(j1);
IkReal x1588=(cj3*sj4);
IkReal x1589=(cj3*cj4);
IkReal x1590=((1.0)*cj5);
evalcond[0]=((((-1.0)*(IKsin(j1))))+((r20*sj5*x1588))+((r21*sj5*x1589))+((r22*sj3))+((cj5*r21*x1588))+(((-1.0)*r20*x1589*x1590)));
evalcond[1]=(((r00*sj5*x1588))+((cj5*r01*x1588))+((r01*sj5*x1589))+(((-1.0)*r00*x1589*x1590))+((r02*sj3))+((cj0*x1587)));
evalcond[2]=(((cj5*r11*x1588))+(((-1.0)*r10*x1589*x1590))+((r10*sj5*x1588))+((sj0*x1587))+((r12*sj3))+((r11*sj5*x1589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[3];
IkReal x1591=(r21*sj3);
IkReal x1592=((1.0)*cj5);
IkReal x1593=((1.0)*cj4*sj5);
IkReal x1594=((1.0)*r20*sj4);
j2eval[0]=cj1;
j2eval[1]=IKsign(cj1);
j2eval[2]=((IKabs((((r21*sj4*sj5))+(((-1.0)*r20*sj4*x1592))+(((-1.0)*r20*x1593))+(((-1.0)*cj4*r21*x1592)))))+(IKabs((((cj4*cj5*r20*sj3))+(((-1.0)*sj3*sj5*x1594))+((cj3*r22))+(((-1.0)*x1591*x1593))+(((-1.0)*sj4*x1591*x1592))))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal j2eval[1];
j2eval[0]=sj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj1;
j2eval[1]=sj0;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1595=(cj0*cj4);
IkReal x1596=((1.0)*cj5);
IkReal x1597=(r10*sj5);
IkReal x1598=(cj0*sj4);
IkReal x1599=(r01*sj5);
IkReal x1600=(sj0*sj4);
IkReal x1601=(cj4*sj0);
IkReal x1602=((1.0)*sj5);
if( IKabs(((((-1.0)*r00*x1596*x1600))+((cj5*r10*x1598))+((cj5*r11*x1595))+((x1599*x1600))+(((-1.0)*r11*x1598*x1602))+(((-1.0)*r00*x1601*x1602))+((x1595*x1597))+(((-1.0)*r01*x1596*x1601)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj5*x1600))+(((-1.0)*r10*x1596*x1600))+(((-1.0)*r00*x1596*x1598))+((x1598*x1599))+(((-1.0)*r01*x1595*x1596))+(((-1.0)*r00*x1595*x1602))+(((-1.0)*x1597*x1601))+(((-1.0)*r11*x1596*x1601)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1596*x1600))+((cj5*r10*x1598))+((cj5*r11*x1595))+((x1599*x1600))+(((-1.0)*r11*x1598*x1602))+(((-1.0)*r00*x1601*x1602))+((x1595*x1597))+(((-1.0)*r01*x1596*x1601))))+IKsqr((((r11*sj5*x1600))+(((-1.0)*r10*x1596*x1600))+(((-1.0)*r00*x1596*x1598))+((x1598*x1599))+(((-1.0)*r01*x1595*x1596))+(((-1.0)*r00*x1595*x1602))+(((-1.0)*x1597*x1601))+(((-1.0)*r11*x1596*x1601))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r00*x1596*x1600))+((cj5*r10*x1598))+((cj5*r11*x1595))+((x1599*x1600))+(((-1.0)*r11*x1598*x1602))+(((-1.0)*r00*x1601*x1602))+((x1595*x1597))+(((-1.0)*r01*x1596*x1601))), (((r11*sj5*x1600))+(((-1.0)*r10*x1596*x1600))+(((-1.0)*r00*x1596*x1598))+((x1598*x1599))+(((-1.0)*r01*x1595*x1596))+(((-1.0)*r00*x1595*x1602))+(((-1.0)*x1597*x1601))+(((-1.0)*r11*x1596*x1601))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1603=IKcos(j2);
IkReal x1604=IKsin(j2);
IkReal x1605=(cj4*r00);
IkReal x1606=((0.00081)*sj4);
IkReal x1607=(r10*sj5);
IkReal x1608=(cj4*cj5);
IkReal x1609=((1.0)*sj3);
IkReal x1610=(cj5*r01);
IkReal x1611=(cj5*sj4);
IkReal x1612=(r01*sj5);
IkReal x1613=((1.0)*sj4);
IkReal x1614=(sj3*sj4);
IkReal x1615=(r00*sj5);
IkReal x1616=(cj5*r11);
IkReal x1617=((0.08354)*cj5);
IkReal x1618=(r11*sj5);
IkReal x1619=((1.0)*cj3);
IkReal x1620=(sj0*x1604);
IkReal x1621=(cj0*x1603);
IkReal x1622=(sj0*x1603);
IkReal x1623=(cj4*x1618);
IkReal x1624=(cj0*x1604);
IkReal x1625=(x1621+x1620);
evalcond[0]=(((r00*x1611))+x1625+((sj5*x1605))+((r01*x1608))+(((-1.0)*x1612*x1613)));
evalcond[1]=((((-1.0)*x1624))+x1622+((cj4*x1607))+((r11*x1608))+((r10*x1611))+(((-1.0)*x1613*x1618)));
evalcond[2]=((((-1.0)*r12*x1619))+(((-1.0)*r10*x1608*x1609))+((sj3*x1623))+x1625+((x1607*x1614))+((r11*sj3*x1611)));
evalcond[3]=((((-1.0)*x1622))+(((-1.0)*cj5*x1605*x1609))+x1624+(((-1.0)*r02*x1619))+((x1614*x1615))+((cj4*sj3*x1612))+((x1610*x1614)));
evalcond[4]=((((-0.00081)*cj4*x1612))+(((-1.0)*x1606*x1610))+(((-1.0)*x1606*x1615))+(((0.03106)*cj0))+((r00*x1617))+(((-0.08354)*x1612))+(((0.00761)*x1622))+(((-0.06598)*r02))+(((-0.00761)*x1624))+(((-1.0)*px))+(((0.03283)*sj0))+(((0.00081)*cj5*x1605))+(((0.0065)*x1620))+(((0.0065)*x1621))+(((-0.02942)*x1615))+(((-0.02942)*x1610)));
evalcond[5]=((((-1.0)*x1606*x1616))+(((-0.03283)*cj0))+(((-0.08354)*x1618))+(((-0.06598)*r12))+(((-0.0065)*x1624))+(((-0.00081)*x1623))+(((0.00081)*r10*x1608))+(((-0.00761)*x1620))+(((-0.00761)*x1621))+(((-1.0)*py))+(((-0.02942)*x1607))+(((0.03106)*sj0))+((r10*x1617))+(((-1.0)*x1606*x1607))+(((0.0065)*x1622))+(((-0.02942)*x1616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1626=(cj0*r00);
IkReal x1627=(cj5*sj4);
IkReal x1628=(cj4*sj5);
IkReal x1629=(cj0*r10);
IkReal x1630=(cj4*cj5);
IkReal x1631=(cj0*r11);
IkReal x1632=((1.0)*r01);
IkReal x1633=(r11*sj0);
IkReal x1634=(sj4*sj5);
IkReal x1635=(r10*sj0);
IkReal x1636=((1.0)*r00*sj0);
if( IKabs(((((-1.0)*sj0*x1630*x1632))+((x1627*x1629))+((r01*sj0*x1634))+((x1628*x1629))+(((-1.0)*x1628*x1636))+((x1630*x1631))+(((-1.0)*x1631*x1634))+(((-1.0)*x1627*x1636)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1627*x1635))+((x1626*x1628))+((x1626*x1627))+((x1628*x1635))+(((-1.0)*cj0*x1632*x1634))+(((-1.0)*x1633*x1634))+((cj0*r01*x1630))+((x1630*x1633)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj0*x1630*x1632))+((x1627*x1629))+((r01*sj0*x1634))+((x1628*x1629))+(((-1.0)*x1628*x1636))+((x1630*x1631))+(((-1.0)*x1631*x1634))+(((-1.0)*x1627*x1636))))+IKsqr((((x1627*x1635))+((x1626*x1628))+((x1626*x1627))+((x1628*x1635))+(((-1.0)*cj0*x1632*x1634))+(((-1.0)*x1633*x1634))+((cj0*r01*x1630))+((x1630*x1633))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj0*x1630*x1632))+((x1627*x1629))+((r01*sj0*x1634))+((x1628*x1629))+(((-1.0)*x1628*x1636))+((x1630*x1631))+(((-1.0)*x1631*x1634))+(((-1.0)*x1627*x1636))), (((x1627*x1635))+((x1626*x1628))+((x1626*x1627))+((x1628*x1635))+(((-1.0)*cj0*x1632*x1634))+(((-1.0)*x1633*x1634))+((cj0*r01*x1630))+((x1630*x1633))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1637=IKcos(j2);
IkReal x1638=IKsin(j2);
IkReal x1639=(cj4*r00);
IkReal x1640=((0.00081)*sj4);
IkReal x1641=(r10*sj5);
IkReal x1642=(cj4*cj5);
IkReal x1643=((1.0)*sj3);
IkReal x1644=(cj5*r01);
IkReal x1645=(cj5*sj4);
IkReal x1646=(r01*sj5);
IkReal x1647=((1.0)*sj4);
IkReal x1648=(sj3*sj4);
IkReal x1649=(r00*sj5);
IkReal x1650=(cj5*r11);
IkReal x1651=((0.08354)*cj5);
IkReal x1652=(r11*sj5);
IkReal x1653=((1.0)*cj3);
IkReal x1654=(sj0*x1638);
IkReal x1655=(cj0*x1637);
IkReal x1656=(cj4*x1652);
IkReal x1657=(cj0*x1638);
IkReal x1658=(sj0*x1637);
IkReal x1659=((1.0)*x1658);
IkReal x1660=((1.0)*x1657);
IkReal x1661=(x1660+x1659);
evalcond[0]=((((-1.0)*x1646*x1647))+x1654+(((-1.0)*x1655))+((sj5*x1639))+((r00*x1645))+((r01*x1642)));
evalcond[1]=(((r11*x1642))+((r10*x1645))+(((-1.0)*x1647*x1652))+(((-1.0)*x1661))+((cj4*x1641)));
evalcond[2]=(x1655+(((-1.0)*r10*x1642*x1643))+(((-1.0)*r12*x1653))+((x1641*x1648))+(((-1.0)*x1654))+((sj3*x1656))+((r11*sj3*x1645)));
evalcond[3]=(((x1648*x1649))+((cj4*sj3*x1646))+((x1644*x1648))+(((-1.0)*cj5*x1639*x1643))+(((-1.0)*x1661))+(((-1.0)*r02*x1653)));
evalcond[4]=((((-0.02942)*x1649))+(((-0.02942)*x1644))+(((-0.00081)*cj4*x1646))+(((0.0065)*x1654))+(((0.00081)*cj5*x1639))+(((-0.06598)*r02))+(((-1.0)*x1640*x1644))+(((-1.0)*x1640*x1649))+((r00*x1651))+(((-1.0)*px))+(((0.03283)*sj0))+(((-0.0065)*x1655))+(((0.00761)*x1657))+(((0.00761)*x1658))+(((-0.03024)*cj0))+(((-0.08354)*x1646)));
evalcond[5]=((((-0.02942)*x1641))+((r10*x1651))+(((-0.03283)*cj0))+(((0.00081)*r10*x1642))+(((-0.02942)*x1650))+(((-0.03024)*sj0))+(((-0.06598)*r12))+(((-1.0)*x1640*x1650))+(((-1.0)*x1640*x1641))+(((-1.0)*py))+(((-0.0065)*x1657))+(((-0.0065)*x1658))+(((-0.08354)*x1652))+(((0.00761)*x1654))+(((-0.00761)*x1655))+(((-0.00081)*x1656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1662=(cj5*sj3);
IkReal x1663=(cj4*r10);
IkReal x1664=((1.0)*sj4);
IkReal x1665=(sj3*sj5);
IkReal x1666=(cj4*r11);
if( IKabs((((cj5*x1666))+(((-1.0)*r11*sj5*x1664))+((cj5*r10*sj4))+((sj5*x1663)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1662*x1663))+((cj3*r12))+(((-1.0)*x1665*x1666))+(((-1.0)*r10*x1664*x1665))+(((-1.0)*r11*x1662*x1664)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*x1666))+(((-1.0)*r11*sj5*x1664))+((cj5*r10*sj4))+((sj5*x1663))))+IKsqr((((x1662*x1663))+((cj3*r12))+(((-1.0)*x1665*x1666))+(((-1.0)*r10*x1664*x1665))+(((-1.0)*r11*x1662*x1664))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj5*x1666))+(((-1.0)*r11*sj5*x1664))+((cj5*r10*sj4))+((sj5*x1663))), (((x1662*x1663))+((cj3*r12))+(((-1.0)*x1665*x1666))+(((-1.0)*r10*x1664*x1665))+(((-1.0)*r11*x1662*x1664))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1667=IKcos(j2);
IkReal x1668=IKsin(j2);
IkReal x1669=(cj4*sj5);
IkReal x1670=((0.00081)*r10);
IkReal x1671=(sj4*sj5);
IkReal x1672=((0.02942)*cj5);
IkReal x1673=(cj4*cj5);
IkReal x1674=(r10*sj3);
IkReal x1675=(cj5*sj4);
IkReal x1676=((0.00081)*r20);
IkReal x1677=((0.08354)*sj5);
IkReal x1678=((0.00081)*r01);
IkReal x1679=(r01*sj3);
IkReal x1680=((0.02942)*sj5);
IkReal x1681=((1.0)*sj3);
IkReal x1682=(r21*sj3);
IkReal x1683=((0.08354)*cj5);
IkReal x1684=((0.00081)*r00);
IkReal x1685=((1.0)*cj3);
IkReal x1686=((0.00081)*r11);
IkReal x1687=((0.00081)*r21);
IkReal x1688=(r11*sj3);
IkReal x1689=(cj1*x1667);
IkReal x1690=(cj1*x1668);
IkReal x1691=(sj1*x1667);
IkReal x1692=(sj1*x1668);
evalcond[0]=(((r21*x1673))+x1689+((r20*x1669))+((r20*x1675))+(((-1.0)*r21*x1671)));
evalcond[1]=(((r00*x1675))+x1691+((r00*x1669))+(((-1.0)*r01*x1671))+((r01*x1673)));
evalcond[2]=(((r10*x1669))+(((-1.0)*x1668))+((r10*x1675))+(((-1.0)*r11*x1671))+((r11*x1673)));
evalcond[3]=((((-1.0)*r12*x1685))+((x1669*x1688))+x1667+((x1675*x1688))+(((-1.0)*x1673*x1674))+((x1671*x1674)));
evalcond[4]=(((x1669*x1682))+x1690+((x1675*x1682))+((r20*sj3*x1671))+(((-1.0)*r22*x1685))+(((-1.0)*r20*x1673*x1681)));
evalcond[5]=((((-1.0)*r00*x1673*x1681))+((x1675*x1679))+x1692+((x1669*x1679))+(((-1.0)*r02*x1685))+((r00*sj3*x1671)));
evalcond[6]=((-0.03283)+(((-1.0)*r10*x1680))+(((-1.0)*x1675*x1686))+((r10*x1683))+(((-0.06598)*r12))+(((-1.0)*r11*x1672))+(((-1.0)*r11*x1677))+(((-1.0)*py))+(((-1.0)*x1670*x1671))+(((-0.0065)*x1668))+(((-0.00761)*x1667))+(((-1.0)*x1669*x1686))+((x1670*x1673)));
evalcond[7]=((((0.0065)*x1689))+(((-0.06598)*r22))+(((-1.0)*x1675*x1687))+(((-1.0)*r20*x1680))+((x1673*x1676))+(((-0.26849)*sj1))+(((-1.0)*pz))+(((-1.0)*x1671*x1676))+(((0.03065)*cj1))+(((-1.0)*x1669*x1687))+(((-1.0)*r21*x1677))+(((-1.0)*r21*x1672))+(((-0.00761)*x1690))+((r20*x1683)));
evalcond[8]=((0.00041)+((x1673*x1684))+((r00*x1683))+(((0.0065)*x1691))+(((-1.0)*x1669*x1678))+(((0.26849)*cj1))+(((-0.06598)*r02))+(((-1.0)*px))+(((-1.0)*r01*x1677))+(((-1.0)*r01*x1672))+(((-0.00761)*x1692))+(((-1.0)*x1671*x1684))+(((-1.0)*x1675*x1678))+(((0.03065)*sj1))+(((-1.0)*r00*x1680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1693=(cj4*sj3);
IkReal x1694=(r11*sj5);
IkReal x1695=(sj3*sj4);
IkReal x1696=(cj5*r11);
IkReal x1697=(r10*sj5);
IkReal x1698=((1.0)*cj4);
IkReal x1699=((1.0)*cj5*r10);
if( IKabs(((((-1.0)*x1696*x1698))+(((-1.0)*x1697*x1698))+((sj4*x1694))+(((-1.0)*sj4*x1699)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1695*x1697))+((x1695*x1696))+(((-1.0)*cj3*r12))+((x1693*x1694))+(((-1.0)*x1693*x1699)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1696*x1698))+(((-1.0)*x1697*x1698))+((sj4*x1694))+(((-1.0)*sj4*x1699))))+IKsqr((((x1695*x1697))+((x1695*x1696))+(((-1.0)*cj3*r12))+((x1693*x1694))+(((-1.0)*x1693*x1699))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1696*x1698))+(((-1.0)*x1697*x1698))+((sj4*x1694))+(((-1.0)*sj4*x1699))), (((x1695*x1697))+((x1695*x1696))+(((-1.0)*cj3*r12))+((x1693*x1694))+(((-1.0)*x1693*x1699))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1700=IKcos(j2);
IkReal x1701=IKsin(j2);
IkReal x1702=(cj4*sj5);
IkReal x1703=(sj4*sj5);
IkReal x1704=((0.00081)*r10);
IkReal x1705=((0.02942)*cj5);
IkReal x1706=(cj4*cj5);
IkReal x1707=(r10*sj3);
IkReal x1708=(cj5*sj4);
IkReal x1709=((0.00081)*r20);
IkReal x1710=((0.08354)*sj5);
IkReal x1711=((0.00081)*r01);
IkReal x1712=(r01*sj3);
IkReal x1713=((1.0)*sj1);
IkReal x1714=((1.0)*sj3);
IkReal x1715=(r21*sj3);
IkReal x1716=((0.08354)*cj5);
IkReal x1717=((0.00081)*r00);
IkReal x1718=((1.0)*cj3);
IkReal x1719=((0.00081)*r11);
IkReal x1720=((0.00081)*r21);
IkReal x1721=(r11*sj3);
IkReal x1722=((0.02942)*sj5);
IkReal x1723=(cj1*x1700);
IkReal x1724=((0.00761)*x1701);
evalcond[0]=(x1701+((r11*x1706))+((r10*x1708))+((r10*x1702))+(((-1.0)*r11*x1703)));
evalcond[1]=(x1723+((r20*x1708))+((r20*x1702))+(((-1.0)*r21*x1703))+((r21*x1706)));
evalcond[2]=((((-1.0)*r01*x1703))+((r01*x1706))+((r00*x1708))+((r00*x1702))+(((-1.0)*x1700*x1713)));
evalcond[3]=(((cj1*x1701))+(((-1.0)*r20*x1706*x1714))+((r20*sj3*x1703))+((x1702*x1715))+(((-1.0)*r22*x1718))+((x1708*x1715)));
evalcond[4]=(((x1702*x1721))+(((-1.0)*x1700))+((x1703*x1707))+((x1708*x1721))+(((-1.0)*x1706*x1707))+(((-1.0)*r12*x1718)));
evalcond[5]=((((-1.0)*x1701*x1713))+((r00*sj3*x1703))+((x1702*x1712))+(((-1.0)*r02*x1718))+(((-1.0)*r00*x1706*x1714))+((x1708*x1712)));
evalcond[6]=((0.03283)+(((-1.0)*r10*x1722))+(((-0.06598)*r12))+(((-1.0)*x1708*x1719))+((x1704*x1706))+(((-1.0)*py))+(((-1.0)*x1703*x1704))+((r10*x1716))+(((-1.0)*r11*x1710))+(((0.0065)*x1701))+(((-1.0)*x1702*x1719))+(((0.00761)*x1700))+(((-1.0)*r11*x1705)));
evalcond[7]=((((0.0065)*x1723))+(((-0.06598)*r22))+(((-1.0)*x1702*x1720))+(((-1.0)*r21*x1705))+((r20*x1716))+(((-0.26849)*sj1))+((x1706*x1709))+(((-1.0)*r21*x1710))+(((-1.0)*pz))+(((-1.0)*x1703*x1709))+(((0.03065)*cj1))+(((-1.0)*cj1*x1724))+(((-1.0)*r20*x1722))+(((-1.0)*x1708*x1720)));
evalcond[8]=((-0.00041)+(((-0.26849)*cj1))+(((-0.0065)*sj1*x1700))+(((-0.03065)*sj1))+((sj1*x1724))+(((-1.0)*x1708*x1711))+(((-1.0)*r00*x1722))+(((-0.06598)*r02))+(((-1.0)*px))+((r00*x1716))+((x1706*x1717))+(((-1.0)*x1703*x1717))+(((-1.0)*r01*x1705))+(((-1.0)*x1702*x1711))+(((-1.0)*r01*x1710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1725=(r21*sj3);
IkReal x1726=((1.0)*cj5);
IkReal x1727=((1.0)*cj4*sj5);
IkReal x1728=((1.0)*r20*sj4);
if( IKabs(((((-1.0)*sj3*sj5*x1728))+(((-1.0)*sj4*x1725*x1726))+((cj4*cj5*r20*sj3))+((cj3*r22))+(((-1.0)*x1725*x1727)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*sj4*sj5))+(((-1.0)*cj4*r21*x1726))+(((-1.0)*r20*x1727))+(((-1.0)*r20*sj4*x1726)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj3*sj5*x1728))+(((-1.0)*sj4*x1725*x1726))+((cj4*cj5*r20*sj3))+((cj3*r22))+(((-1.0)*x1725*x1727))))+IKsqr((((r21*sj4*sj5))+(((-1.0)*cj4*r21*x1726))+(((-1.0)*r20*x1727))+(((-1.0)*r20*sj4*x1726))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj3*sj5*x1728))+(((-1.0)*sj4*x1725*x1726))+((cj4*cj5*r20*sj3))+((cj3*r22))+(((-1.0)*x1725*x1727))), (((r21*sj4*sj5))+(((-1.0)*cj4*r21*x1726))+(((-1.0)*r20*x1727))+(((-1.0)*r20*sj4*x1726))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1729=IKsin(j2);
IkReal x1730=IKcos(j2);
IkReal x1731=(cj4*r00);
IkReal x1732=((0.02942)*cj5);
IkReal x1733=((0.00081)*sj4);
IkReal x1734=(r10*sj5);
IkReal x1735=(cj4*cj5);
IkReal x1736=((1.0)*sj3);
IkReal x1737=(cj5*r01);
IkReal x1738=(cj5*sj4);
IkReal x1739=(r01*sj5);
IkReal x1740=((1.0)*sj4);
IkReal x1741=(r20*sj5);
IkReal x1742=((0.00081)*cj4);
IkReal x1743=(r11*sj5);
IkReal x1744=(sj3*sj4);
IkReal x1745=(cj4*sj3);
IkReal x1746=(r00*sj5);
IkReal x1747=(r21*sj5);
IkReal x1748=((0.08354)*cj5);
IkReal x1749=((1.0)*cj3);
IkReal x1750=(cj0*x1730);
IkReal x1751=(cj0*x1729);
IkReal x1752=(sj0*x1730);
IkReal x1753=(sj0*x1729);
evalcond[0]=(((cj4*x1741))+x1730+(((-1.0)*x1740*x1747))+((r21*x1735))+((r20*x1738)));
evalcond[1]=(((r01*x1735))+((sj5*x1731))+((r00*x1738))+x1753+(((-1.0)*x1739*x1740)));
evalcond[2]=((((-1.0)*x1740*x1743))+((r10*x1738))+(((-1.0)*x1751))+((cj4*x1734))+((r11*x1735)));
evalcond[3]=((((-1.0)*r20*x1735*x1736))+x1729+((x1745*x1747))+(((-1.0)*r22*x1749))+((x1741*x1744))+((r21*sj3*x1738)));
evalcond[4]=((((-1.0)*r12*x1749))+((x1734*x1744))+x1750+(((-1.0)*r10*x1735*x1736))+((r11*sj3*x1738))+((x1743*x1745)));
evalcond[5]=(((x1739*x1745))+((x1744*x1746))+(((-1.0)*cj5*x1731*x1736))+(((-1.0)*x1752))+(((-1.0)*r02*x1749))+((x1737*x1744)));
evalcond[6]=((0.03065)+(((0.00081)*r20*x1735))+(((0.0065)*x1730))+(((-0.02942)*x1741))+(((-0.06598)*r22))+(((-1.0)*x1733*x1741))+(((-0.00761)*x1729))+(((-0.08354)*x1747))+(((-1.0)*pz))+((r20*x1748))+(((-1.0)*cj5*r21*x1733))+(((-1.0)*x1742*x1747))+(((-1.0)*r21*x1732)));
evalcond[7]=((((-1.0)*x1733*x1737))+(((-0.02942)*x1746))+(((-1.0)*x1733*x1746))+(((-1.0)*r01*x1732))+(((-1.0)*x1739*x1742))+(((0.00081)*cj5*x1731))+(((-0.06598)*r02))+(((-1.0)*px))+(((0.03283)*sj0))+(((-0.08354)*x1739))+((r00*x1748))+(((0.0065)*x1753))+(((0.2689)*cj0))+(((0.00761)*x1752)));
evalcond[8]=((((-1.0)*x1733*x1734))+(((-1.0)*r11*x1732))+(((-0.03283)*cj0))+(((-0.02942)*x1734))+(((-0.06598)*r12))+(((-0.08354)*x1743))+(((-1.0)*py))+(((-0.0065)*x1751))+(((-1.0)*cj5*r11*x1733))+(((0.2689)*sj0))+(((-1.0)*x1742*x1743))+((r10*x1748))+(((-0.00761)*x1750))+(((0.00081)*r10*x1735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1754=(r20*sj5);
IkReal x1755=(sj3*sj4);
IkReal x1756=(cj4*r21);
IkReal x1757=(cj5*r20);
if( IKabs((((cj5*r21*x1755))+(((-1.0)*cj3*r22))+((x1754*x1755))+((sj3*sj5*x1756))+(((-1.0)*cj4*sj3*x1757)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*x1756))+((sj4*x1757))+(((-1.0)*r21*sj4*sj5))+((cj4*x1754)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r21*x1755))+(((-1.0)*cj3*r22))+((x1754*x1755))+((sj3*sj5*x1756))+(((-1.0)*cj4*sj3*x1757))))+IKsqr((((cj5*x1756))+((sj4*x1757))+(((-1.0)*r21*sj4*sj5))+((cj4*x1754))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj5*r21*x1755))+(((-1.0)*cj3*r22))+((x1754*x1755))+((sj3*sj5*x1756))+(((-1.0)*cj4*sj3*x1757))), (((cj5*x1756))+((sj4*x1757))+(((-1.0)*r21*sj4*sj5))+((cj4*x1754))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1758=IKsin(j2);
IkReal x1759=IKcos(j2);
IkReal x1760=(cj4*r00);
IkReal x1761=((0.02942)*cj5);
IkReal x1762=((0.00081)*sj4);
IkReal x1763=(r10*sj5);
IkReal x1764=(cj4*cj5);
IkReal x1765=((1.0)*sj3);
IkReal x1766=(cj5*r01);
IkReal x1767=(cj5*sj4);
IkReal x1768=(r01*sj5);
IkReal x1769=((1.0)*sj4);
IkReal x1770=(r20*sj5);
IkReal x1771=((0.00081)*cj4);
IkReal x1772=(r11*sj5);
IkReal x1773=(sj3*sj4);
IkReal x1774=(cj4*sj3);
IkReal x1775=(r00*sj5);
IkReal x1776=(r21*sj5);
IkReal x1777=((0.08354)*cj5);
IkReal x1778=((1.0)*cj3);
IkReal x1779=(cj0*x1759);
IkReal x1780=(cj0*x1758);
IkReal x1781=(sj0*x1759);
IkReal x1782=(sj0*x1758);
evalcond[0]=(((r21*x1764))+((r20*x1767))+((cj4*x1770))+(((-1.0)*x1759))+(((-1.0)*x1769*x1776)));
evalcond[1]=(x1782+((r01*x1764))+((sj5*x1760))+((r00*x1767))+(((-1.0)*x1768*x1769)));
evalcond[2]=(((cj4*x1763))+((r11*x1764))+((r10*x1767))+(((-1.0)*x1780))+(((-1.0)*x1769*x1772)));
evalcond[3]=(((x1770*x1773))+((r21*sj3*x1767))+(((-1.0)*r20*x1764*x1765))+(((-1.0)*x1758))+((x1774*x1776))+(((-1.0)*r22*x1778)));
evalcond[4]=((((-1.0)*r10*x1764*x1765))+((r11*sj3*x1767))+x1779+((x1763*x1773))+((x1772*x1774))+(((-1.0)*r12*x1778)));
evalcond[5]=((((-1.0)*cj5*x1760*x1765))+((x1773*x1775))+((x1766*x1773))+(((-1.0)*r02*x1778))+(((-1.0)*x1781))+((x1768*x1774)));
evalcond[6]=((-0.03065)+(((-1.0)*cj5*r21*x1762))+(((-0.08354)*x1776))+(((-1.0)*x1762*x1770))+(((-0.06598)*r22))+(((-1.0)*r21*x1761))+(((0.00081)*r20*x1764))+((r20*x1777))+(((-1.0)*pz))+(((-1.0)*x1771*x1776))+(((-0.0065)*x1759))+(((-0.02942)*x1770))+(((0.00761)*x1758)));
evalcond[7]=((((-0.08354)*x1768))+(((-1.0)*r01*x1761))+(((-1.0)*x1762*x1766))+(((0.00081)*cj5*x1760))+(((-1.0)*x1762*x1775))+(((0.0065)*x1782))+(((-0.26808)*cj0))+(((0.00761)*x1781))+((r00*x1777))+(((-0.06598)*r02))+(((-1.0)*px))+(((0.03283)*sj0))+(((-1.0)*x1768*x1771))+(((-0.02942)*x1775)));
evalcond[8]=((((-1.0)*x1762*x1763))+(((-0.0065)*x1780))+(((-0.08354)*x1772))+(((-0.03283)*cj0))+(((-0.06598)*r12))+(((-1.0)*cj5*r11*x1762))+(((-0.26808)*sj0))+(((-1.0)*r11*x1761))+((r10*x1777))+(((-1.0)*py))+(((-1.0)*x1771*x1772))+(((-0.02942)*x1763))+(((-0.00761)*x1779))+(((0.00081)*r10*x1764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1792=IKPowWithIntegerCheck(cj1,-1);
if(!x1792.valid){
continue;
}
IkReal x1783=x1792.value;
IkReal x1784=(cj4*cj5);
IkReal x1785=((1.0)*sj5);
IkReal x1786=(cj4*r20);
IkReal x1787=(cj1*sj4);
IkReal x1788=((1.0)*cj5);
IkReal x1789=(r20*sj4);
IkReal x1790=(cj0*sj1);
IkReal x1791=(r21*x1790);
CheckValue<IkReal> x1793=IKPowWithIntegerCheck(sj0,-1);
if(!x1793.valid){
continue;
}
if( IKabs((x1783*(x1793.value)*(((((-1.0)*cj1*cj4*r00*x1785))+(((-1.0)*r00*x1787*x1788))+((sj5*x1786*x1790))+(((-1.0)*cj1*r01*x1784))+((cj5*x1789*x1790))+((x1784*x1791))+(((-1.0)*sj4*x1785*x1791))+((r01*sj5*x1787)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1783*((((r21*sj4*sj5))+(((-1.0)*x1785*x1786))+(((-1.0)*x1788*x1789))+(((-1.0)*r21*x1784)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1783*(x1793.value)*(((((-1.0)*cj1*cj4*r00*x1785))+(((-1.0)*r00*x1787*x1788))+((sj5*x1786*x1790))+(((-1.0)*cj1*r01*x1784))+((cj5*x1789*x1790))+((x1784*x1791))+(((-1.0)*sj4*x1785*x1791))+((r01*sj5*x1787))))))+IKsqr((x1783*((((r21*sj4*sj5))+(((-1.0)*x1785*x1786))+(((-1.0)*x1788*x1789))+(((-1.0)*r21*x1784))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x1783*(x1793.value)*(((((-1.0)*cj1*cj4*r00*x1785))+(((-1.0)*r00*x1787*x1788))+((sj5*x1786*x1790))+(((-1.0)*cj1*r01*x1784))+((cj5*x1789*x1790))+((x1784*x1791))+(((-1.0)*sj4*x1785*x1791))+((r01*sj5*x1787))))), (x1783*((((r21*sj4*sj5))+(((-1.0)*x1785*x1786))+(((-1.0)*x1788*x1789))+(((-1.0)*r21*x1784))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1794=IKcos(j2);
IkReal x1795=IKsin(j2);
IkReal x1796=(cj4*sj5);
IkReal x1797=(sj4*sj5);
IkReal x1798=((0.00081)*r10);
IkReal x1799=(r01*sj3);
IkReal x1800=((0.02942)*cj5);
IkReal x1801=(cj0*sj1);
IkReal x1802=((0.08354)*cj5);
IkReal x1803=(r11*sj3);
IkReal x1804=((0.00081)*r01);
IkReal x1805=(r20*sj3);
IkReal x1806=((0.00081)*r21);
IkReal x1807=((0.08354)*sj5);
IkReal x1808=(cj4*cj5);
IkReal x1809=(cj5*sj4);
IkReal x1810=(r21*sj3);
IkReal x1811=((0.00081)*r00);
IkReal x1812=((0.00081)*r20);
IkReal x1813=((0.02942)*sj5);
IkReal x1814=((1.0)*cj3);
IkReal x1815=((0.26849)*cj1);
IkReal x1816=((1.0)*sj3);
IkReal x1817=((0.00081)*r11);
IkReal x1818=(sj0*sj1);
IkReal x1819=((0.00761)*x1795);
IkReal x1820=(sj0*x1795);
IkReal x1821=(cj1*x1794);
IkReal x1822=(cj0*x1794);
IkReal x1823=(sj0*x1794);
IkReal x1824=(cj0*x1795);
evalcond[0]=(((r21*x1808))+x1821+((r20*x1809))+(((-1.0)*r21*x1797))+((r20*x1796)));
evalcond[1]=(((r00*x1796))+((x1794*x1801))+x1820+(((-1.0)*r01*x1797))+((r00*x1809))+((r01*x1808)));
evalcond[2]=(((x1794*x1818))+((r10*x1796))+(((-1.0)*x1824))+(((-1.0)*r11*x1797))+((r11*x1808))+((r10*x1809)));
evalcond[3]=(((x1809*x1810))+((cj1*x1795))+((x1797*x1805))+((x1796*x1810))+(((-1.0)*x1805*x1808))+(((-1.0)*r22*x1814)));
evalcond[4]=(((r10*sj3*x1797))+((x1795*x1818))+(((-1.0)*r10*x1808*x1816))+((x1803*x1809))+(((-1.0)*r12*x1814))+((x1796*x1803))+x1822);
evalcond[5]=(((r00*sj3*x1797))+((x1799*x1809))+(((-1.0)*x1823))+((x1795*x1801))+(((-1.0)*r02*x1814))+((x1796*x1799))+(((-1.0)*r00*x1808*x1816)));
evalcond[6]=((((-1.0)*x1797*x1812))+(((0.0065)*x1821))+(((-1.0)*r21*x1800))+(((-1.0)*r21*x1807))+(((-0.06598)*r22))+(((-1.0)*x1796*x1806))+(((-0.26849)*sj1))+(((-1.0)*pz))+((x1808*x1812))+(((0.03065)*cj1))+(((-1.0)*x1806*x1809))+(((-1.0)*cj1*x1819))+((r20*x1802))+(((-1.0)*r20*x1813)));
evalcond[7]=((((-1.0)*x1797*x1811))+(((-1.0)*r01*x1800))+(((-1.0)*r01*x1807))+(((0.0065)*x1820))+((cj0*x1815))+(((0.0065)*x1794*x1801))+(((0.00041)*cj0))+(((0.00761)*x1823))+(((-1.0)*x1796*x1804))+(((-1.0)*x1804*x1809))+(((-0.06598)*r02))+(((0.03065)*x1801))+(((-1.0)*px))+(((-1.0)*r00*x1813))+(((0.03283)*sj0))+((x1808*x1811))+((r00*x1802))+(((-1.0)*x1801*x1819)));
evalcond[8]=((((-0.00761)*x1822))+((x1798*x1808))+(((-0.03283)*cj0))+(((0.03065)*x1818))+(((-1.0)*x1809*x1817))+(((-0.06598)*r12))+(((0.00041)*sj0))+(((-1.0)*r10*x1813))+(((-1.0)*py))+(((0.0065)*x1794*x1818))+((sj0*x1815))+(((-1.0)*x1818*x1819))+(((-1.0)*x1797*x1798))+((r10*x1802))+(((-0.0065)*x1824))+(((-1.0)*x1796*x1817))+(((-1.0)*r11*x1807))+(((-1.0)*r11*x1800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1825=(cj0*cj4);
IkReal x1826=((1.0)*cj5);
IkReal x1827=(r10*sj5);
IkReal x1828=(cj0*sj4);
IkReal x1829=(r01*sj5);
IkReal x1830=(sj0*sj4);
IkReal x1831=(cj4*sj0);
IkReal x1832=((1.0)*sj5);
CheckValue<IkReal> x1833=IKPowWithIntegerCheck(sj1,-1);
if(!x1833.valid){
continue;
}
if( IKabs(((((-1.0)*r01*x1826*x1831))+((cj5*r10*x1828))+(((-1.0)*r00*x1831*x1832))+((x1829*x1830))+(((-1.0)*r11*x1828*x1832))+((x1825*x1827))+(((-1.0)*r00*x1826*x1830))+((cj5*r11*x1825)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1833.value)*(((((-1.0)*r10*x1826*x1830))+(((-1.0)*r00*x1825*x1832))+(((-1.0)*r00*x1826*x1828))+(((-1.0)*x1827*x1831))+((r11*sj5*x1830))+(((-1.0)*r11*x1826*x1831))+(((-1.0)*r01*x1825*x1826))+((x1828*x1829)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1826*x1831))+((cj5*r10*x1828))+(((-1.0)*r00*x1831*x1832))+((x1829*x1830))+(((-1.0)*r11*x1828*x1832))+((x1825*x1827))+(((-1.0)*r00*x1826*x1830))+((cj5*r11*x1825))))+IKsqr(((x1833.value)*(((((-1.0)*r10*x1826*x1830))+(((-1.0)*r00*x1825*x1832))+(((-1.0)*r00*x1826*x1828))+(((-1.0)*x1827*x1831))+((r11*sj5*x1830))+(((-1.0)*r11*x1826*x1831))+(((-1.0)*r01*x1825*x1826))+((x1828*x1829))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r01*x1826*x1831))+((cj5*r10*x1828))+(((-1.0)*r00*x1831*x1832))+((x1829*x1830))+(((-1.0)*r11*x1828*x1832))+((x1825*x1827))+(((-1.0)*r00*x1826*x1830))+((cj5*r11*x1825))), ((x1833.value)*(((((-1.0)*r10*x1826*x1830))+(((-1.0)*r00*x1825*x1832))+(((-1.0)*r00*x1826*x1828))+(((-1.0)*x1827*x1831))+((r11*sj5*x1830))+(((-1.0)*r11*x1826*x1831))+(((-1.0)*r01*x1825*x1826))+((x1828*x1829))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1834=IKcos(j2);
IkReal x1835=IKsin(j2);
IkReal x1836=(cj4*sj5);
IkReal x1837=(sj4*sj5);
IkReal x1838=((0.00081)*r10);
IkReal x1839=(r01*sj3);
IkReal x1840=((0.02942)*cj5);
IkReal x1841=(cj0*sj1);
IkReal x1842=((0.08354)*cj5);
IkReal x1843=(r11*sj3);
IkReal x1844=((0.00081)*r01);
IkReal x1845=(r20*sj3);
IkReal x1846=((0.00081)*r21);
IkReal x1847=((0.08354)*sj5);
IkReal x1848=(cj4*cj5);
IkReal x1849=(cj5*sj4);
IkReal x1850=(r21*sj3);
IkReal x1851=((0.00081)*r00);
IkReal x1852=((0.00081)*r20);
IkReal x1853=((0.02942)*sj5);
IkReal x1854=((1.0)*cj3);
IkReal x1855=((0.26849)*cj1);
IkReal x1856=((1.0)*sj3);
IkReal x1857=((0.00081)*r11);
IkReal x1858=(sj0*sj1);
IkReal x1859=((0.00761)*x1835);
IkReal x1860=(sj0*x1835);
IkReal x1861=(cj1*x1834);
IkReal x1862=(cj0*x1834);
IkReal x1863=(sj0*x1834);
IkReal x1864=(cj0*x1835);
evalcond[0]=(((r20*x1849))+x1861+((r21*x1848))+((r20*x1836))+(((-1.0)*r21*x1837)));
evalcond[1]=((((-1.0)*r01*x1837))+((x1834*x1841))+((r00*x1849))+((r01*x1848))+x1860+((r00*x1836)));
evalcond[2]=(((r10*x1836))+((x1834*x1858))+(((-1.0)*r11*x1837))+((r10*x1849))+(((-1.0)*x1864))+((r11*x1848)));
evalcond[3]=(((x1837*x1845))+((x1849*x1850))+((x1836*x1850))+(((-1.0)*r22*x1854))+(((-1.0)*x1845*x1848))+((cj1*x1835)));
evalcond[4]=(((x1836*x1843))+((r10*sj3*x1837))+(((-1.0)*r10*x1848*x1856))+((x1835*x1858))+x1862+(((-1.0)*r12*x1854))+((x1843*x1849)));
evalcond[5]=((((-1.0)*r00*x1848*x1856))+((r00*sj3*x1837))+((x1839*x1849))+(((-1.0)*r02*x1854))+(((-1.0)*x1863))+((x1835*x1841))+((x1836*x1839)));
evalcond[6]=((((0.0065)*x1861))+(((-0.06598)*r22))+((x1848*x1852))+(((-1.0)*x1837*x1852))+(((-0.26849)*sj1))+(((-1.0)*pz))+(((0.03065)*cj1))+((r20*x1842))+(((-1.0)*x1836*x1846))+(((-1.0)*r21*x1847))+(((-1.0)*r21*x1840))+(((-1.0)*x1846*x1849))+(((-1.0)*r20*x1853))+(((-1.0)*cj1*x1859)));
evalcond[7]=((((0.0065)*x1860))+(((0.03065)*x1841))+((x1848*x1851))+(((0.00041)*cj0))+(((-1.0)*x1837*x1851))+(((-1.0)*r01*x1840))+(((-1.0)*r01*x1847))+(((-0.06598)*r02))+(((-1.0)*x1841*x1859))+(((-1.0)*px))+(((0.03283)*sj0))+((r00*x1842))+(((-1.0)*r00*x1853))+(((-1.0)*x1836*x1844))+(((0.0065)*x1834*x1841))+(((-1.0)*x1844*x1849))+((cj0*x1855))+(((0.00761)*x1863)));
evalcond[8]=(((x1838*x1848))+(((0.0065)*x1834*x1858))+(((-1.0)*x1849*x1857))+(((-0.03283)*cj0))+(((-1.0)*x1837*x1838))+(((-1.0)*x1858*x1859))+(((-0.06598)*r12))+(((0.00041)*sj0))+(((-1.0)*x1836*x1857))+(((-1.0)*py))+(((-0.00761)*x1862))+((r10*x1842))+((sj0*x1855))+(((-1.0)*r11*x1847))+(((-1.0)*r11*x1840))+(((-0.0065)*x1864))+(((-1.0)*r10*x1853))+(((0.03065)*x1858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1865=(r21*sj3);
IkReal x1866=((1.0)*cj5);
IkReal x1867=((1.0)*cj4*sj5);
IkReal x1868=((1.0)*r20*sj4);
CheckValue<IkReal> x1869=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x1869.valid){
continue;
}
CheckValue<IkReal> x1870 = IKatan2WithCheck(IkReal((((cj4*cj5*r20*sj3))+(((-1.0)*sj4*x1865*x1866))+(((-1.0)*x1865*x1867))+((cj3*r22))+(((-1.0)*sj3*sj5*x1868)))),IkReal((((r21*sj4*sj5))+(((-1.0)*cj4*r21*x1866))+(((-1.0)*r20*x1867))+(((-1.0)*r20*sj4*x1866)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1870.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1869.value)))+(x1870.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1871=IKcos(j2);
IkReal x1872=IKsin(j2);
IkReal x1873=(cj4*sj5);
IkReal x1874=(sj4*sj5);
IkReal x1875=((0.00081)*r10);
IkReal x1876=(r01*sj3);
IkReal x1877=((0.02942)*cj5);
IkReal x1878=(cj0*sj1);
IkReal x1879=((0.08354)*cj5);
IkReal x1880=(r11*sj3);
IkReal x1881=((0.00081)*r01);
IkReal x1882=(r20*sj3);
IkReal x1883=((0.00081)*r21);
IkReal x1884=((0.08354)*sj5);
IkReal x1885=(cj4*cj5);
IkReal x1886=(cj5*sj4);
IkReal x1887=(r21*sj3);
IkReal x1888=((0.00081)*r00);
IkReal x1889=((0.00081)*r20);
IkReal x1890=((0.02942)*sj5);
IkReal x1891=((1.0)*cj3);
IkReal x1892=((0.26849)*cj1);
IkReal x1893=((1.0)*sj3);
IkReal x1894=((0.00081)*r11);
IkReal x1895=(sj0*sj1);
IkReal x1896=((0.00761)*x1872);
IkReal x1897=(sj0*x1872);
IkReal x1898=(cj1*x1871);
IkReal x1899=(cj0*x1871);
IkReal x1900=(sj0*x1871);
IkReal x1901=(cj0*x1872);
evalcond[0]=(((r21*x1885))+((r20*x1886))+((r20*x1873))+x1898+(((-1.0)*r21*x1874)));
evalcond[1]=((((-1.0)*r01*x1874))+((x1871*x1878))+((r00*x1886))+((r01*x1885))+((r00*x1873))+x1897);
evalcond[2]=(((x1871*x1895))+(((-1.0)*x1901))+((r10*x1886))+(((-1.0)*r11*x1874))+((r10*x1873))+((r11*x1885)));
evalcond[3]=(((x1874*x1882))+((x1873*x1887))+(((-1.0)*r22*x1891))+((cj1*x1872))+(((-1.0)*x1882*x1885))+((x1886*x1887)));
evalcond[4]=(((x1880*x1886))+((x1873*x1880))+((x1872*x1895))+(((-1.0)*r12*x1891))+x1899+(((-1.0)*r10*x1885*x1893))+((r10*sj3*x1874)));
evalcond[5]=(((r00*sj3*x1874))+(((-1.0)*r02*x1891))+(((-1.0)*r00*x1885*x1893))+((x1876*x1886))+(((-1.0)*x1900))+((x1873*x1876))+((x1872*x1878)));
evalcond[6]=((((0.0065)*x1898))+(((-1.0)*x1873*x1883))+(((-0.06598)*r22))+(((-1.0)*x1883*x1886))+(((-1.0)*cj1*x1896))+(((-0.26849)*sj1))+(((-1.0)*pz))+((r20*x1879))+(((0.03065)*cj1))+(((-1.0)*r20*x1890))+(((-1.0)*r21*x1877))+((x1885*x1889))+(((-1.0)*r21*x1884))+(((-1.0)*x1874*x1889)));
evalcond[7]=((((0.0065)*x1897))+(((-1.0)*x1878*x1896))+(((-1.0)*x1873*x1881))+(((0.03065)*x1878))+(((0.00041)*cj0))+(((-1.0)*r01*x1877))+(((0.00761)*x1900))+(((-0.06598)*r02))+(((-1.0)*px))+(((0.03283)*sj0))+((r00*x1879))+(((-1.0)*r00*x1890))+((cj0*x1892))+(((-1.0)*r01*x1884))+((x1885*x1888))+(((0.0065)*x1871*x1878))+(((-1.0)*x1881*x1886))+(((-1.0)*x1874*x1888)));
evalcond[8]=((((0.03065)*x1895))+(((0.0065)*x1871*x1895))+(((-0.03283)*cj0))+(((-1.0)*x1873*x1894))+(((-1.0)*x1874*x1875))+(((-0.06598)*r12))+(((-1.0)*r11*x1884))+((x1875*x1885))+(((0.00041)*sj0))+(((-1.0)*r10*x1890))+(((-1.0)*py))+(((-1.0)*x1895*x1896))+(((-1.0)*x1886*x1894))+(((-1.0)*r11*x1877))+((sj0*x1892))+((r10*x1879))+(((-0.00761)*x1899))+(((-0.0065)*x1901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
    }

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "a7b0c49bbc035b62f2601274233a5d02"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
